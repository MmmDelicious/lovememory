const aiService = require('../services/ai.service');
const userService = require('../services/user.service');

const handleChat = async (req, res, next) => {
  try {
    const { prompt, context } = req.body;
    if (!prompt) {
      return res.status(400).json({ message: 'Prompt is required' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–≤–∏–¥–∞–Ω–∏—è
    const lowerPrompt = prompt.toLowerCase();
    const isDateGeneration = lowerPrompt.includes('—Å–≤–∏–¥–∞–Ω–∏–µ') || 
                            lowerPrompt.includes('–¥–µ–π—Ç') || 
                            lowerPrompt.includes('–≤—Å—Ç—Ä–µ—á–∞') ||
                            lowerPrompt.includes('—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π') ||
                            lowerPrompt.includes('—Å–æ–∑–¥–∞–π');

    if (isDateGeneration) {

      try {
        // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        let userProfile;
        try {
          userProfile = await userService.getProfile(req.user.userId || req.user.id);

        } catch (profileError) {
          console.warn('Could not get user profile from DB, using defaults:', profileError.message);
          // Fallback –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          userProfile = {
            id: req.user.userId || req.user.id,
            first_name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            city: '–ú–æ—Å–∫–≤–∞',
            age: 25,
            gender: 'male'
          };
        }
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ù–ê–°–¢–û–Ø–©–ò–ô DateGenerationService –∏–∑ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏ dist
        const DateGenerationService = require('../dist/services/dateGeneration.service').default;
        const dateService = new DateGenerationService();
        
        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤–∏–¥–∞–Ω–∏–π —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ë–î
        const request = {
          context: {
            user: {
              id: userProfile.id,
              name: userProfile.first_name || userProfile.display_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
              city: userProfile.city || '–ú–æ—Å–∫–≤–∞', // –ì–æ—Ä–æ–¥ –∏–∑ –ë–î
              age: userProfile.age || 25,
              gender: userProfile.gender || 'male'
            },
            partner: context?.partner || null,
            relationship: context?.relationship || { status: 'single' },
            relationshipProfile: {
              loveLanguages: {
                quality_time: 0.8,
                physical_touch: 0.6,
                words_of_affirmation: 0.7,
                acts_of_service: 0.5,
                receiving_gifts: 0.4
              },
              sentimentTrend: 0.2,
              relationshipGraph: { overallStrength: 85 },
              communicationStyle: {
                responseLength: 'medium',
                humorLevel: 0.7,
                formalityLevel: 0.3,
                preferredTone: 'friendly'
              }
            },
            recentEvents: [],
            aiInteractionHistory: []
          },
          preferences: {
            atmosphere: 'romantic',
            budget: 'medium',
            duration: 3
          }
        };

        const result = await dateService.generate(request);
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ —Å –†–ï–ê–õ–¨–ù–´–ú–ò –º–µ—Å—Ç–∞–º–∏
        const response = {
          text: `–°–æ–∑–¥–∞–ª ${result.options.length} —É–º–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Å–≤–∏–¥–∞–Ω–∏–π —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –º–µ—Å—Ç–∞–º–∏! üíï`,
          intent: 'GENERATE_DATE',
          data: {
            options: result.options.map(option => ({
              ...option,
              // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º–µ—Å—Ç –¥–ª—è –∫–∞—Ä—Ç—ã
              places: option.schedule.map((item, index) => ({
                id: `place_${index + 1}`,
                name: item.activity,
                coordinates: [
                  55.7558 + (Math.random() - 0.5) * 0.01, // –°–ª—É—á–∞–π–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –ú–æ—Å–∫–≤–µ
                  37.6176 + (Math.random() - 0.5) * 0.01
                ],
                address: item.location || item.description,
                type: 'real_place'
              }))
            })),
            reasoning: result.reasoning || [
              `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å: ${userProfile.first_name || userProfile.display_name || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}`,
              `–£—á–µ–ª –≥–æ—Ä–æ–¥: ${userProfile.city || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`,
              `–ù–∞—à–µ–ª —Ä–µ–∞–ª—å–Ω—ã–µ –º–µ—Å—Ç–∞ —á–µ—Ä–µ–∑ Yandex Maps API`,
              '–ì–æ—Ç–æ–≤–æ! –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–π—Å—è –≤–∞—Ä–∏–∞–Ω—Ç üéØ'
            ],
            metadata: {
              generatedAt: new Date(),
              usedRealData: true,
              confidence: 0.9
            }
          },
          confidence: 0.9
        };

        return res.json(response);
        
      } catch (generationError) {
        console.error('Real date generation failed, using fallback:', generationError);
        
        throw generationError;
      }
    }

    // –û–±—ã—á–Ω—ã–π AI —á–∞—Ç
    const result = await aiService.getChatResponse(prompt, context);
    res.json(result);
    
  } catch (error) {
    console.error('AI Controller error:', error);
    next(error);
  }
};
module.exports = {
  handleChat,
};
