/**
 * Activity Tracker Controller - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–µ—Ä–æ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
 */

const activityTrackerService = require('../services/activityTracker.service');
const { authenticateToken } = require('../middleware/auth.middleware');

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–∫–µ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
const getOrCreateTracker = async (req, res) => {
  try {
    const userId = req.user.id;
    const { pairId } = req.query;

    const tracker = await activityTrackerService.getOrCreateTracker(userId, pairId);

    res.json({
      success: true,
      data: {
        tracker: {
          id: tracker.id,
          dailySteps: tracker.daily_steps,
          dailyGoal: tracker.daily_goal,
          weeklyGoal: tracker.weekly_goal,
          caloriesBurned: tracker.calories_burned,
          activeMinutes: tracker.active_minutes,
          distance: tracker.distance_km,
          currentStreak: tracker.current_streak,
          longestStreak: tracker.longest_streak,
          totalDaysActive: tracker.total_days_active,
          achievements: tracker.achievements || [],
          lastSync: tracker.last_sync,
          dataSource: tracker.data_source
        }
      }
    });

  } catch (error) {
    console.error('Error in getOrCreateTracker:', error);
    res.status(500).json({
      success: false,
      message: 'Failed to get/create tracker',
      error: error.message
    });
  }
};

/**
 * –û–±–Ω–æ–≤–∏—Ç—å –¥–Ω–µ–≤–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
 */
const updateDailyActivity = async (req, res) => {
  try {
    const userId = req.user.id;
    const { steps, calories, activeMinutes, distance } = req.body;

    if (!steps && !calories && !activeMinutes && !distance) {
      return res.status(400).json({
        success: false,
        message: 'At least one activity metric is required'
      });
    }

    const result = await activityTrackerService.updateDailyActivity(userId, {
      steps: steps || 0,
      calories: calories || 0,
      activeMinutes: activeMinutes || 0,
      distance: distance || 0
    });

    res.json({
      success: true,
      data: {
        tracker: {
          id: result.tracker.id,
          dailySteps: result.tracker.daily_steps,
          goalProgress: result.goalProgress,
          currentStreak: result.tracker.current_streak
        },
        newAchievements: result.newAchievements,
        message: result.newAchievements.length > 0 
          ? `Got ${result.newAchievements.length} new achievements!`
          : 'Activity updated'
      }
    });

  } catch (error) {
    console.error('Error in updateDailyActivity:', error);
    res.status(500).json({
      success: false,
      message: 'Failed to update activity',
      error: error.message
    });
  }
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
const getUserStats = async (req, res) => {
  try {
    const userId = req.user.id;

    const stats = await activityTrackerService.getUserStats(userId);

    if (!stats) {
      return res.status(404).json({
        success: false,
        message: 'Activity tracker not found'
      });
    }

    res.json({
      success: true,
      data: stats
    });

  } catch (error) {
    console.error('Error in getUserStats:', error);
    res.status(500).json({
      success: false,
      message: 'Failed to get user stats',
      error: error.message
    });
  }
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞—Ä—ã
 */
const getPairStats = async (req, res) => {
  try {
    const userId = req.user.id;
    const { pairId } = req.params;

    if (!pairId) {
      return res.status(400).json({
        success: false,
        message: 'Pair ID is required'
      });
    }

    const pairStats = await activityTrackerService.getPairStats(pairId);

    if (!pairStats) {
      return res.status(404).json({
        success: false,
        message: 'Pair stats not found'
      });
    }

    res.json({
      success: true,
      data: pairStats
    });

  } catch (error) {
    console.error('Error in getPairStats:', error);
    res.status(500).json({
      success: false,
      message: 'Failed to get pair stats',
      error: error.message
    });
  }
};

/**
 * –û–±–Ω–æ–≤–∏—Ç—å —Ü–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
const updateGoals = async (req, res) => {
  try {
    const userId = req.user.id;
    const { dailyGoal, weeklyGoal } = req.body;

    if (!dailyGoal && !weeklyGoal) {
      return res.status(400).json({
        success: false,
        message: 'At least one goal must be provided'
      });
    }

    const tracker = await activityTrackerService.updateGoals(userId, {
      daily: dailyGoal,
      weekly: weeklyGoal
    });

    res.json({
      success: true,
      data: {
        tracker: {
          id: tracker.id,
          dailyGoal: tracker.daily_goal,
          weeklyGoal: tracker.weekly_goal
        },
        message: '–¶–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!'
      }
    });

  } catch (error) {
    console.error('Error in updateGoals:', error);
    res.status(500).json({
      success: false,
      message: 'Failed to update goals',
      error: error.message
    });
  }
};

/**
 * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –≤–Ω–µ—à–Ω–∏–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏
 */
const syncExternalData = async (req, res) => {
  try {
    const userId = req.user.id;
    const { source, steps, calories, activeMinutes, distance } = req.body;

    if (!source) {
      return res.status(400).json({
        success: false,
        message: 'Data source is required'
      });
    }

    const result = await activityTrackerService.syncExternalData(userId, {
      source,
      steps,
      calories,
      activeMinutes,
      distance
    });

    res.json({
      success: true,
      data: {
        tracker: {
          id: result.tracker.id,
          dailySteps: result.tracker.daily_steps,
          goalProgress: result.goalProgress
        },
        newAchievements: result.newAchievements,
        message: '–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!'
      }
    });

  } catch (error) {
    console.error('Error in syncExternalData:', error);
    res.status(500).json({
      success: false,
      message: 'Failed to sync external data',
      error: error.message
    });
  }
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
const getUserAchievements = async (req, res) => {
  try {
    const userId = req.user.id;

    const stats = await activityTrackerService.getUserStats(userId);

    if (!stats) {
      return res.status(404).json({
        success: false,
        message: 'Activity tracker not found'
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    const achievements = stats.achievements.map(achievementId => {
      const achievementMap = {
        'first_goal': {
          id: 'first_goal',
          title: '–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏',
          description: '–î–æ—Å—Ç–∏–≥–ª–∏ –ø–µ—Ä–≤–æ–π —Ü–µ–ª–∏ –ø–æ —à–∞–≥–∞–º!',
          icon: 'üë£',
          unlocked: true
        },
        'consistent_week': {
          id: 'consistent_week',
          title: '–ù–µ–¥–µ–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
          description: '7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ –¥–æ—Å—Ç–∏–≥–∞–µ—Ç–µ —Ü–µ–ª–∏!',
          icon: 'üî•',
          unlocked: true
        },
        'consistent_month': {
          id: 'consistent_month',
          title: '–ú–µ—Å—è—Ü –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
          description: '30 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥! –í—ã –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω—ã!',
          icon: 'üèÜ',
          unlocked: true
        },
        'ultra_active': {
          id: 'ultra_active',
          title: '–£–ª—å—Ç—Ä–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
          description: '15,000+ —à–∞–≥–æ–≤ –∑–∞ –¥–µ–Ω—å!',
          icon: '‚ö°',
          unlocked: true
        }
      };

      return achievementMap[achievementId] || {
        id: achievementId,
        title: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ',
        description: '–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!',
        icon: 'üéñÔ∏è',
        unlocked: true
      };
    });

    res.json({
      success: true,
      data: {
        achievements,
        totalUnlocked: achievements.length,
        totalAvailable: Object.keys(achievementMap).length
      }
    });

  } catch (error) {
    console.error('Error in getUserAchievements:', error);
    res.status(500).json({
      success: false,
      message: 'Failed to get achievements',
      error: error.message
    });
  }
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å –ª–∏–¥–µ—Ä–±–æ—Ä–¥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
 */
const getActivityLeaderboard = async (req, res) => {
  try {
    const { period = 'week', limit = 10 } = req.query;

    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    const leaderboard = [
      {
        rank: 1,
        userId: 'user1',
        name: '–ê–Ω–Ω–∞',
        avatar: null,
        steps: 15000,
        streak: 7,
        score: 95
      },
      {
        rank: 2,
        userId: 'user2',
        name: '–ú–∏—Ö–∞–∏–ª',
        avatar: null,
        steps: 12000,
        streak: 5,
        score: 88
      }
    ];

    res.json({
      success: true,
      data: {
        period,
        leaderboard,
        updatedAt: new Date().toISOString()
      }
    });

  } catch (error) {
    console.error('Error in getActivityLeaderboard:', error);
    res.status(500).json({
      success: false,
      message: 'Failed to get leaderboard',
      error: error.message
    });
  }
};

module.exports = {
  getOrCreateTracker,
  updateDailyActivity,
  getUserStats,
  getPairStats,
  updateGoals,
  syncExternalData,
  getUserAchievements,
  getActivityLeaderboard
};
