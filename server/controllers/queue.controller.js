const queueService = require('../services/queue.service');
const { checkRedisHealth } = require('../config/redis');

/**
 * Queue Controller - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥—è–º–∏ –∏ –≤–æ—Ä–∫–µ—Ä–∞–º–∏ —á–µ—Ä–µ–∑ API
 */

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—á–µ—Ä–µ–¥–µ–π
 */
const getQueueStatus = async (req, res, next) => {
  try {
    const stats = await queueService.getQueueStats();
    const health = await queueService.healthCheck();
    const redisHealth = await checkRedisHealth();

    res.json({
      success: true,
      data: {
        redis: redisHealth ? 'connected' : 'disconnected',
        queues: stats,
        health: health.status,
        timestamp: new Date().toISOString()
      }
    });

  } catch (error) {
    console.error('Error getting queue status:', error);
    next(error);
  }
};

/**
 * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
const addAnalysisJob = async (req, res, next) => {
  try {
    const userId = req.user?.id || req.body.userId;
    const { priority, delay } = req.body;

    if (!userId) {
      return res.status(400).json({
        success: false,
        message: 'User ID is required'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Ä–≤–∏—Å –æ—á–µ—Ä–µ–¥–µ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    if (!queueService.isInitialized) {
      await queueService.initialize();
    }

    const job = await queueService.addAnalysisJob(userId, {
      priority: priority || 10,
      delay: delay || 0,
      source: 'manual_api'
    });

    console.log(`üìä Added analysis job ${job.id} for user ${userId}`);

    res.json({
      success: true,
      data: {
        jobId: job.id,
        userId,
        status: 'queued',
        estimatedStart: new Date(Date.now() + (delay || 0)),
        message: 'Analysis job added to queue'
      }
    });

  } catch (error) {
    console.error('Error adding analysis job:', error);
    next(error);
  }
};

/**
 * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω—Å–∞–π—Ç–æ–≤
 */
const addInsightJob = async (req, res, next) => {
  try {
    const userId = req.user?.id;
    const { eventId, priority, delay } = req.body;

    if (!userId || !eventId) {
      return res.status(400).json({
        success: false,
        message: 'User ID and Event ID are required'
      });
    }

    if (!queueService.isInitialized) {
      await queueService.initialize();
    }

    const job = await queueService.addInsightJob(userId, eventId, {
      priority: priority || 20,
      delay: delay || 5000, // 5 —Å–µ–∫—É–Ω–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      source: 'manual_api'
    });

    console.log(`üí° Added insight job ${job.id} for user ${userId}, event ${eventId}`);

    res.json({
      success: true,
      data: {
        jobId: job.id,
        userId,
        eventId,
        status: 'queued',
        estimatedStart: new Date(Date.now() + (delay || 5000)),
        message: 'Insight job added to queue'
      }
    });

  } catch (error) {
    console.error('Error adding insight job:', error);
    next(error);
  }
};

/**
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥—å—é (–ø–∞—É–∑–∞/–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)
 */
const manageQueue = async (req, res, next) => {
  try {
    const { queueName, action } = req.body;

    if (!['analysis', 'insights', 'maintenance'].includes(queueName)) {
      return res.status(400).json({
        success: false,
        message: 'Invalid queue name. Use: analysis, insights, or maintenance'
      });
    }

    if (!['pause', 'resume', 'clear'].includes(action)) {
      return res.status(400).json({
        success: false,
        message: 'Invalid action. Use: pause, resume, or clear'
      });
    }

    if (!queueService.isInitialized) {
      await queueService.initialize();
    }

    let result;
    switch (action) {
      case 'pause':
        await queueService.pauseQueue(queueName);
        result = `Queue ${queueName} paused`;
        break;
      case 'resume':
        await queueService.resumeQueue(queueName);
        result = `Queue ${queueName} resumed`;
        break;
      case 'clear':
        await queueService.clearQueue(queueName, 'completed');
        result = `Queue ${queueName} cleared`;
        break;
    }

    console.log(`üéõÔ∏è Queue action: ${action} on ${queueName}`);

    res.json({
      success: true,
      data: {
        queueName,
        action,
        result,
        timestamp: new Date().toISOString()
      }
    });

  } catch (error) {
    console.error('Error managing queue:', error);
    next(error);
  }
};

/**
 * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –æ—á–µ—Ä–µ–¥–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
 */
const clearAllQueues = async (req, res, next) => {
  try {
    if (process.env.NODE_ENV === 'production') {
      return res.status(403).json({
        success: false,
        message: 'This action is not allowed in production'
      });
    }

    if (!queueService.isInitialized) {
      await queueService.initialize();
    }

    await Promise.all([
      queueService.clearQueue('analysis', 'completed'),
      queueService.clearQueue('analysis', 'failed'),
      queueService.clearQueue('insights', 'completed'),
      queueService.clearQueue('insights', 'failed'),
      queueService.clearQueue('maintenance', 'completed'),
      queueService.clearQueue('maintenance', 'failed')
    ]);

    console.log('üßπ All queues cleared (development mode)');

    res.json({
      success: true,
      data: {
        message: 'All queues cleared',
        timestamp: new Date().toISOString()
      }
    });

  } catch (error) {
    console.error('Error clearing queues:', error);
    next(error);
  }
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã –æ—á–µ—Ä–µ–¥–µ–π
 */
const healthCheck = async (req, res, next) => {
  try {
    const redisHealth = await checkRedisHealth();
    let queueHealth = { status: 'not_initialized' };
    
    if (queueService.isInitialized) {
      queueHealth = await queueService.healthCheck();
    }

    const overall = redisHealth && queueHealth.status === 'healthy' ? 'healthy' : 'unhealthy';

    res.json({
      success: true,
      data: {
        overall,
        redis: redisHealth ? 'connected' : 'disconnected',
        queues: queueHealth,
        uptime: process.uptime(),
        memory: process.memoryUsage(),
        timestamp: new Date().toISOString()
      }
    });

  } catch (error) {
    console.error('Error in health check:', error);
    res.status(500).json({
      success: false,
      data: {
        overall: 'error',
        error: error.message,
        timestamp: new Date().toISOString()
      }
    });
  }
};

/**
 * –¢—Ä–∏–≥–≥–µ—Ä –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π)
 */
const triggerAnalysisOnEvent = async (userId, eventId) => {
  try {
    if (!queueService.isInitialized) {
      // –¢–∏—Ö–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –æ—á–µ—Ä–µ–¥–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
      return;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –∞–Ω–∞–ª–∏–∑–∞ —Å –Ω–∏–∑–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –∏ –∑–∞–¥–µ—Ä–∂–∫–æ–π
    const analysisJob = await queueService.addAnalysisJob(userId, {
      priority: 30, // –ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
      delay: 10000, // 10 —Å–µ–∫—É–Ω–¥ –∑–∞–¥–µ—Ä–∂–∫–∞
      source: 'auto_event_trigger',
      eventId
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω—Å–∞–π—Ç–æ–≤
    const insightJob = await queueService.addInsightJob(userId, eventId, {
      priority: 25,
      delay: 15000, // 15 —Å–µ–∫—É–Ω–¥ –∑–∞–¥–µ—Ä–∂–∫–∞
      source: 'auto_event_trigger'
    });

    // –¢–∏—Ö–æ –ª–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—Ö —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    // console.log(`üéØ Auto-triggered analysis (${analysisJob.id}) and insight (${insightJob.id}) for user ${userId}`);

  } catch (error) {
    // –¢–∏—Ö–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—à–∏–±–∫–∏ - –∞–≤—Ç–æ–∞–Ω–∞–ª–∏–∑ –Ω–µ –¥–æ–ª–∂–µ–Ω –ª–æ–º–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π flow
    // console.error('Error triggering auto-analysis:', error);
  }
};

module.exports = {
  getQueueStatus,
  addAnalysisJob,
  addInsightJob,
  manageQueue,
  clearAllQueues,
  healthCheck,
  triggerAnalysisOnEvent // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞—Ö
};
