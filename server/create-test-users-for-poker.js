/**
 * –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∫–µ—Ä–∞
 */

const { User } = require('./models');
const jwt = require('jsonwebtoken');
require('dotenv').config();

async function createPokerTestUsers() {
  try {
    console.log('üîß –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–æ–∫–µ—Ä–∞...');
    
    const testUsers = [
      {
        email: 'poker.player1@test.com',
        password_hash: '123456',
        first_name: '–ê–ª–∏—Å–∞',
        last_name: '–ü–æ–∫–µ—Ä–æ–≤–∞',
        gender: 'female',
        city: '–ú–æ—Å–∫–≤–∞',
        age: 28,
        verified: true,
        role: 'user',
        coins: 10000
      },
      {
        email: 'poker.player2@test.com',
        password_hash: '123456',
        first_name: '–ë–æ–±',
        last_name: '–†–µ–π–∑–æ–≤—Å–∫–∏–π',
        gender: 'male',
        city: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
        age: 32,
        verified: true,
        role: 'user',
        coins: 10000
      },
      {
        email: 'poker.player3@test.com',
        password_hash: '123456',
        first_name: '–ß–∞—Ä–ª–∏',
        last_name: '–ë–ª–µ—Ñ–æ–≤—ã–π',
        gender: 'male',
        city: '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥',
        age: 26,
        verified: true,
        role: 'user',
        coins: 10000
      },
      {
        email: 'poker.host@test.com',
        password_hash: '123456',
        first_name: '–•–æ—Å—Ç',
        last_name: '–ò–≥—Ä–æ–≤–æ–π',
        gender: 'male',
        city: '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫',
        age: 30,
        verified: true,
        role: 'user',
        coins: 10000
      }
    ];

    const createdUsers = [];
    const tokens = [];

    for (const userData of testUsers) {
      // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ—Å—Ç—å
      await User.destroy({
        where: { email: userData.email }
      });
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await User.create(userData);
      createdUsers.push(user);
      
      // –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const token = jwt.sign(
        { 
          userId: user.id, 
          email: user.email,
          role: user.role 
        },
        process.env.JWT_SECRET,
        { expiresIn: '24h' }
      );
      
      tokens.push({ userId: user.id, email: user.email, token });
      
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.first_name} ${user.last_name} (${user.email})`);
      console.log(`   ID: ${user.id}, –¢–æ–∫–µ–Ω: ${token.substring(0, 20)}...`);
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã –≤ —Ñ–∞–π–ª –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ç–µ—Å—Ç–∞—Ö
    const fs = require('fs');
    const tokensData = {
      timestamp: new Date().toISOString(),
      users: tokens
    };
    
    fs.writeFileSync('poker-test-tokens.json', JSON.stringify(tokensData, null, 2));
    console.log('\nüíæ –¢–æ–∫–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: poker-test-tokens.json');
    
    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ–∑–¥–∞–Ω—ã!');
    console.log('–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å —Ç–µ—Å—Ç—ã –ø–æ–∫–µ—Ä–∞.');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error.message);
  } finally {
    process.exit(0);
  }
}

createPokerTestUsers();
