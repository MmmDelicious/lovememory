const { DataTypes } = require('sequelize');
const sequelize = require('../config/database');

const Achievement = sequelize.define('Achievement', {
  id: {
    type: DataTypes.UUID,
    defaultValue: DataTypes.UUIDV4,
    primaryKey: true,
  },
  pair_id: {
    type: DataTypes.UUID,
    allowNull: false,
    references: {
      model: 'Pairs',
      key: 'id',
    },
  },
  user_id: {
    type: DataTypes.UUID,
    allowNull: true,
    references: {
      model: 'Users',
      key: 'id',
    },
  },
  type: {
    type: DataTypes.STRING,
    allowNull: false,
    validate: {
      isIn: [[
        // –ò–≥—Ä–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        'first_game', 'game_win_streak_3', 'game_win_streak_5', 'game_win_streak_10',
        'chess_master', 'poker_champion', 'quiz_genius', 'wordle_wizard',
        
        // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è —É—Ä–æ–∫–æ–≤
        'first_lesson', 'lesson_streak_7', 'lesson_streak_30', 'communication_expert',
        'all_themes_complete', 'speed_learner',
        
        // –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è  
        'first_gift', 'generous_partner', 'event_creator', 'memory_keeper',
        'daily_active_7', 'daily_active_30',
        
        // Milestone –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        'first_month', 'first_year', 'harmony_50', 'harmony_75', 'harmony_100',
        'lovebirds', 'soulmates'
      ]],
    },
  },
  category: {
    type: DataTypes.STRING,
    allowNull: false,
    defaultValue: 'general',
    validate: {
      isIn: [['games', 'lessons', 'gifts', 'social', 'milestones']],
    },
  },
  title: {
    type: DataTypes.STRING,
    allowNull: false,
  },
  description: {
    type: DataTypes.TEXT,
    allowNull: false,
  },
  icon: {
    type: DataTypes.STRING,
    allowNull: true,
  },
  rarity: {
    type: DataTypes.STRING,
    allowNull: false,
    defaultValue: 'common',
    validate: {
      isIn: [['common', 'rare', 'epic', 'legendary']],
    },
  },
  points: {
    type: DataTypes.INTEGER,
    allowNull: false,
    defaultValue: 10,
    validate: {
      min: 1,
      max: 1000,
    },
  },
  earned_at: {
    type: DataTypes.DATE,
    allowNull: false,
    defaultValue: DataTypes.NOW,
  },
  metadata: {
    type: DataTypes.JSONB,
    allowNull: false,
    defaultValue: {},
  },
  is_hidden: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: false,
  },
}, {
  tableName: 'achievements',
  indexes: [
    { fields: ['pair_id'] },
    { fields: ['user_id'] },
    { fields: ['type'] },
    { fields: ['category'] },
    { fields: ['rarity'] },
    { fields: ['earned_at'] },
    { fields: ['pair_id', 'earned_at'] },
    { fields: ['pair_id', 'category'] },
    { fields: ['user_id', 'earned_at'] }
  ]
});

Achievement.associate = (models) => {
  Achievement.belongsTo(models.Pair, {
    foreignKey: 'pair_id',
    as: 'Pair',
    onDelete: 'CASCADE'
  });
  
  Achievement.belongsTo(models.User, {
    foreignKey: 'user_id',
    as: 'User',
    onDelete: 'SET NULL'
  });
};

// –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
Achievement.TEMPLATES = {
  // –ò–≥—Ä–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  first_game: {
    title: '–ü–µ—Ä–≤–∞—è –∏–≥—Ä–∞',
    description: '–°—ã–≥—Ä–∞–ª–∏ –ø–µ—Ä–≤—É—é –∏–≥—Ä—É –≤–º–µ—Å—Ç–µ!',
    category: 'games',
    rarity: 'common',
    points: 10,
    icon: 'üéÆ'
  },
  chess_master: {
    title: '–ú–∞—Å—Ç–µ—Ä —à–∞—Ö–º–∞—Ç',
    description: '–í—ã–∏–≥—Ä–∞–ª–∏ 10 –ø–∞—Ä—Ç–∏–π –≤ —à–∞—Ö–º–∞—Ç—ã',
    category: 'games',
    rarity: 'rare',
    points: 50,
    icon: '‚ôüÔ∏è'
  },
  
  // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è —É—Ä–æ–∫–æ–≤
  first_lesson: {
    title: '–ü–µ—Ä–≤—ã–π —É—Ä–æ–∫',
    description: '–ü—Ä–æ—à–ª–∏ –ø–µ—Ä–≤—ã–π —É—Ä–æ–∫ –≤–º–µ—Å—Ç–µ',
    category: 'lessons',
    rarity: 'common',
    points: 15,
    icon: 'üìö'
  },
  communication_expert: {
    title: '–≠–∫—Å–ø–µ—Ä—Ç –æ–±—â–µ–Ω–∏—è',
    description: '–ü—Ä–æ—à–ª–∏ –≤—Å–µ —É—Ä–æ–∫–∏ –ø–æ –æ–±—â–µ–Ω–∏—é',
    category: 'lessons',
    rarity: 'epic',
    points: 100,
    icon: 'üí¨'
  },
  
  // –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  first_gift: {
    title: '–ü–µ—Ä–≤—ã–π –ø–æ–¥–∞—Ä–æ–∫',
    description: '–ü–æ–¥–∞—Ä–∏–ª–∏ –ø–µ—Ä–≤—ã–π –ø–æ–¥–∞—Ä–æ–∫ –ø–∞—Ä—Ç–Ω–µ—Ä—É',
    category: 'gifts',
    rarity: 'common',
    points: 20,
    icon: 'üéÅ'
  },
  memory_keeper: {
    title: '–•—Ä–∞–Ω–∏—Ç–µ–ª—å –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π',
    description: '–°–æ–∑–¥–∞–ª–∏ 50 —Å–æ–±—ã—Ç–∏–π –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ',
    category: 'social',
    rarity: 'rare',
    points: 75,
    icon: 'üì∑'
  },
  
  // Milestone –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  first_month: {
    title: '–ü–µ—Ä–≤—ã–π –º–µ—Å—è—Ü',
    description: '–ú–µ—Å—è—Ü –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏',
    category: 'milestones',
    rarity: 'rare',
    points: 100,
    icon: 'üíñ'
  },
  harmony_100: {
    title: '–ò–¥–µ–∞–ª—å–Ω–∞—è –≥–∞—Ä–º–æ–Ω–∏—è',
    description: '–î–æ—Å—Ç–∏–≥–ª–∏ 100% –∏–Ω–¥–µ–∫—Å–∞ –≥–∞—Ä–º–æ–Ω–∏–∏',
    category: 'milestones',
    rarity: 'legendary',
    points: 500,
    icon: '‚ú®'
  }
};

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏
Achievement.grantAchievement = async function(pairId, userId, type, additionalMetadata = {}) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ –ª–∏ —É–∂–µ —ç—Ç–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
    const existing = await this.findOne({
      where: { pair_id: pairId, type, user_id: userId }
    });
    
    if (existing) {
      return null; // –£–∂–µ –ø–æ–ª—É—á–µ–Ω–æ
    }
    
    const template = this.TEMPLATES[type];
    if (!template) {
      throw new Error(`Unknown achievement type: ${type}`);
    }
    
    // –°–æ–∑–¥–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
    const achievement = await this.create({
      pair_id: pairId,
      user_id: userId,
      type,
      title: template.title,
      description: template.description,
      category: template.category,
      rarity: template.rarity,
      points: template.points,
      icon: template.icon,
      metadata: { ...additionalMetadata, earned_at: new Date() }
    });
    
    // –õ–æ–≥–∏—Ä—É–µ–º –≤ ActivityLog
    if (sequelize.models.ActivityLog) {
      await sequelize.models.ActivityLog.logEvent(
        pairId, 
        userId, 
        'achievement_earned', 
        { achievement_id: achievement.id, type, points: template.points }
      );
    }
    
    return achievement;
    
  } catch (error) {
    console.error('Failed to grant achievement:', error);
    return null;
  }
};

// –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–∞—Ä—ã
Achievement.getPairAchievements = async function(pairId, options = {}) {
  const { category, rarity, limit = 50, offset = 0 } = options;
  
  const where = { pair_id: pairId };
  if (category) where.category = category;
  if (rarity) where.rarity = rarity;
  
  return await this.findAll({
    where,
    order: [['earned_at', 'DESC']],
    limit,
    offset,
    include: [
      { model: sequelize.models.User, as: 'User', attributes: ['id', 'first_name', 'display_name'] }
    ]
  });
};

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–∞—Ä—ã
Achievement.getPairStats = async function(pairId) {
  const total = await this.count({ where: { pair_id: pairId } });
  const totalPoints = await this.sum('points', { where: { pair_id: pairId } }) || 0;
  
  const byCategory = await this.findAll({
    where: { pair_id: pairId },
    attributes: [
      'category',
      [sequelize.fn('COUNT', sequelize.col('id')), 'count'],
      [sequelize.fn('SUM', sequelize.col('points')), 'points']
    ],
    group: ['category'],
    raw: true
  });
  
  const byRarity = await this.findAll({
    where: { pair_id: pairId },
    attributes: [
      'rarity',
      [sequelize.fn('COUNT', sequelize.col('id')), 'count']
    ],
    group: ['rarity'],
    raw: true
  });
  
  return {
    total,
    totalPoints,
    byCategory,
    byRarity
  };
};

// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –≤—ã–¥–∞—Ç—å –∏–≥—Ä–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
Achievement.checkAndGrantGameAchievements = async function(pairId, userId, gameType, isWin, gameStats = {}) {
  const achievements = [];
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—É—é –∏–≥—Ä—É
    const firstGame = await this.grantAchievement(pairId, userId, 'first_game');
    if (firstGame) achievements.push(firstGame);
    
    if (isWin) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–∏–∏ –ø–æ–±–µ–¥
      const recentWins = await sequelize.models.GameParticipant.count({
        where: {
          user_id: userId,
          stats: {
            [sequelize.Op.contains]: { wins: { [sequelize.Op.gt]: 0 } }
          },
          createdAt: {
            [sequelize.Op.gte]: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000) // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
          }
        }
      });
      
      // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —Å–µ—Ä–∏–∏
      if (recentWins >= 3) {
        const streak3 = await this.grantAchievement(pairId, userId, 'game_win_streak_3');
        if (streak3) achievements.push(streak3);
      }
      
      // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –∏–≥—Ä –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
      if (gameType === 'chess' && gameStats.gamesWon >= 10) {
        const chessMaster = await this.grantAchievement(pairId, userId, 'chess_master');
        if (chessMaster) achievements.push(chessMaster);
      }
    }
    
    return achievements;
    
  } catch (error) {
    console.error('Failed to check game achievements:', error);
    return [];
  }
};

// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —É—Ä–æ–∫–æ–≤
Achievement.checkAndGrantLessonAchievements = async function(pairId, userId, lessonData = {}) {
  const achievements = [];
  
  try {
    // –ü–µ—Ä–≤—ã–π —É—Ä–æ–∫
    const firstLesson = await this.grantAchievement(pairId, userId, 'first_lesson');
    if (firstLesson) achievements.push(firstLesson);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤
    const lessonsCompleted = await sequelize.models.UserLessonProgress.count({
      where: { pair_id: pairId, completed_by_user_id: userId }
    });
    
    // –≠–∫—Å–ø–µ—Ä—Ç –æ–±—â–µ–Ω–∏—è (–µ—Å–ª–∏ –≤—Å–µ —É—Ä–æ–∫–∏ –ø–æ —Ç–µ–º–µ –ø—Ä–æ–π–¥–µ–Ω—ã)
    if (lessonData.theme === 'communication') {
      const communicationLessons = await sequelize.models.UserLessonProgress.count({
        where: { 
          pair_id: pairId, 
          completed_by_user_id: userId 
        },
        include: [{
          model: sequelize.models.Lesson,
          as: 'Lesson',
          where: { theme: 'communication' }
        }]
      });
      
      // –ï—Å–ª–∏ –ø—Ä–æ—à–µ–ª –º–Ω–æ–≥–æ —É—Ä–æ–∫–æ–≤ –ø–æ –æ–±—â–µ–Ω–∏—é, –¥–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
      if (communicationLessons >= 5) {
        const commExpert = await this.grantAchievement(pairId, userId, 'communication_expert');
        if (commExpert) achievements.push(commExpert);
      }
    }
    
    return achievements;
    
  } catch (error) {
    console.error('Failed to check lesson achievements:', error);
    return [];
  }
};

// –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø –ø–∞—Ä –ø–æ –æ—á–∫–∞–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
Achievement.getLeaderboard = async function(limit = 10) {
  return await this.findAll({
    attributes: [
      'pair_id',
      [sequelize.fn('SUM', sequelize.col('Achievement.points')), 'totalPoints'],
      [sequelize.fn('COUNT', sequelize.col('Achievement.id')), 'totalAchievements']
    ],
    group: ['pair_id', 'Pair.id'], // –î–æ–±–∞–≤–ª—è–µ–º Pair.id –≤ GROUP BY
    order: [[sequelize.literal('"totalPoints"'), 'DESC']],
    limit,
    include: [
      { 
        model: sequelize.models.Pair, 
        as: 'Pair',
        attributes: ['id', 'name', 'harmony_index'] // –î–æ–±–∞–≤–ª—è–µ–º id –≤ attributes
      }
    ],
    raw: false
  });
};

module.exports = Achievement;
