const Redis = require('ioredis');

/**
 * Redis Configuration –¥–ª—è Job Queue
 */

let redisClient = null;

const createRedisConnection = () => {
  if (redisClient) {
    return redisClient;
  }

  const redisConfig = {
    host: process.env.REDIS_HOST || 'localhost',
    port: process.env.REDIS_PORT || 6379,
    password: process.env.REDIS_PASSWORD || undefined,
    db: process.env.REDIS_DB || 0,
    retryDelayOnFailover: 100,
    maxRetriesPerRequest: null, // BullMQ —Ç—Ä–µ–±—É–µ—Ç null –¥–ª—è –±–ª–æ–∫–∏—Ä—É—é—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    lazyConnect: true,
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è production
    family: 4,
    keepAlive: true,
    connectTimeout: 10000,
    commandTimeout: 10000, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º timeout –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫
  };

  console.log('üî¥ Creating Redis connection:', {
    host: redisConfig.host,
    port: redisConfig.port,
    db: redisConfig.db
  });

  redisClient = new Redis(redisConfig);

  redisClient.on('connect', () => {
    console.log('‚úÖ Redis connected successfully');
  });

  redisClient.on('error', (error) => {
    console.error('‚ùå Redis Error:', error);
  });

  redisClient.on('reconnecting', (time) => {
    console.warn(`‚ö†Ô∏è Redis is reconnecting in ${time}ms...`);
  });

  redisClient.on('close', () => {
    // –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Å–ø–∞–º–∞ –≤ –ª–æ–≥–∞—Ö
    // console.log('üî¥ Redis connection closed');
  });

  return redisClient;
};

const getRedisClient = () => {
  if (!redisClient) {
    return createRedisConnection();
  }
  return redisClient;
};

const closeRedisConnection = async () => {
  if (redisClient) {
    await redisClient.quit();
    redisClient = null;
    console.log('üî¥ Redis connection closed gracefully');
  }
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
const checkRedisHealth = async () => {
  try {
    const client = getRedisClient();
    const result = await client.ping();
    return result === 'PONG';
  } catch (error) {
    console.error('‚ùå Redis health check failed:', error.message);
    return false;
  }
};

module.exports = {
  createRedisConnection,
  getRedisClient,
  closeRedisConnection,
  checkRedisHealth
};