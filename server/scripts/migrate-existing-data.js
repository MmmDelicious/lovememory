const { User, Pair, UserPair, Event, Media, GameRoom, ActivityLog } = require('../models');
const { Op } = require('sequelize');

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è pair_id –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
 * –û–°–¢–û–†–û–ñ–ù–û: –ó–∞–ø—É—Å–∫–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ backup –ë–î!
 */

async function migrateExistingData() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö...');

  try {
    // 1. –°–æ–∑–¥–∞–µ–º UserPair –∑–∞–ø–∏—Å–∏ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö Pair
    console.log('\n1Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º UserPair –∑–∞–ø–∏—Å–∏...');
    const existingPairs = await Pair.findAll();
    
    for (const pair of existingPairs) {
      console.log(`–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞—Ä—É ${pair.id}...`);
      
      // –°–æ–∑–¥–∞–µ–º UserPair –∑–∞–ø–∏—Å–∏
      await UserPair.findOrCreate({
        where: { user_id: pair.user1Id, pair_id: pair.id },
        defaults: {
          role: 'member',
          accepted: pair.status === 'active',
          joined_at: pair.createdAt || new Date()
        }
      });

      await UserPair.findOrCreate({
        where: { user_id: pair.user2Id, pair_id: pair.id },
        defaults: {
          role: 'member', 
          accepted: pair.status === 'active',
          joined_at: pair.createdAt || new Date()
        }
      });
    }
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ UserPair –∑–∞–ø–∏—Å–µ–π –¥–ª—è ${existingPairs.length} –ø–∞—Ä`);

    // 2. –ó–∞–ø–æ–ª–Ω—è–µ–º pair_id –≤ Events
    console.log('\n2Ô∏è‚É£ –ó–∞–ø–æ–ª–Ω—è–µ–º pair_id –≤ Events...');
    let eventsUpdated = 0;
    
    for (const pair of existingPairs) {
      const result = await Event.update(
        { pair_id: pair.id },
        { 
          where: { 
            userId: [pair.user1Id, pair.user2Id],
            pair_id: null // —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Ö, –≥–¥–µ –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
          }
        }
      );
      eventsUpdated += result[0];
    }
    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${eventsUpdated} —Å–æ–±—ã—Ç–∏–π`);

    // 3. –ó–∞–ø–æ–ª–Ω—è–µ–º pair_id –≤ Media —á–µ—Ä–µ–∑ Events
    console.log('\n3Ô∏è‚É£ –ó–∞–ø–æ–ª–Ω—è–µ–º pair_id –≤ Media...');
    let mediaUpdated = 0;
    
    const eventsWithPairs = await Event.findAll({
      where: { pair_id: { [Op.not]: null } },
      include: [{ model: Media }]
    });

    for (const event of eventsWithPairs) {
      if (event.Media && event.Media.length > 0) {
        const result = await Media.update(
          { pair_id: event.pair_id },
          { 
            where: { 
              eventId: event.id,
              pair_id: null
            }
          }
        );
        mediaUpdated += result[0];
      }
    }
    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${mediaUpdated} –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤`);

    // 4. –ó–∞–ø–æ–ª–Ω—è–µ–º pair_id –≤ GameRooms
    console.log('\n4Ô∏è‚É£ –ó–∞–ø–æ–ª–Ω—è–µ–º pair_id –≤ GameRooms...');
    let gamesUpdated = 0;
    
    for (const pair of existingPairs) {
      const result = await GameRoom.update(
        { pair_id: pair.id },
        { 
          where: { 
            [Op.or]: [
              { hostId: pair.user1Id },
              { hostId: pair.user2Id }
            ],
            pair_id: null
          }
        }
      );
      gamesUpdated += result[0];
    }
    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${gamesUpdated} –∏–≥—Ä–æ–≤—ã—Ö –∫–æ–º–Ω–∞—Ç`);

    // 5. –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤–∏—á–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –≤ ActivityLog
    console.log('\n5Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤ ActivityLog...');
    
    for (const pair of existingPairs) {
      // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—ã
      await ActivityLog.logEvent(pair.id, pair.user1Id, 'pair_created', {
        pair: {
          id: pair.id,
          status: pair.status,
          created_at: pair.createdAt
        },
        migrated: true // –æ—Ç–º–µ—á–∞–µ–º —á—Ç–æ —ç—Ç–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      });
    }
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${existingPairs.length} –∑–∞–ø–∏—Å–µ–π –≤ ActivityLog`);

    console.log('\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    
    // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = {
      pairs: existingPairs.length,
      userPairs: await UserPair.count(),
      eventsWithPairId: await Event.count({ where: { pair_id: { [Op.not]: null } } }),
      mediaWithPairId: await Media.count({ where: { pair_id: { [Op.not]: null } } }),
      gamesWithPairId: await GameRoom.count({ where: { pair_id: { [Op.not]: null } } }),
      activityLogs: await ActivityLog.count()
    };
    
    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏:');
    console.table(stats);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
async function checkDataIntegrity() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö...');
  
  const users = await User.count();
  const pairs = await Pair.count();
  const events = await Event.count();
  const media = await Media.count();
  const games = await GameRoom.count();
  
  console.log('üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î:');
  console.table({
    users,
    pairs,
    events,
    media,
    games,
    userPairs: await UserPair.count(),
    eventsWithPairId: await Event.count({ where: { pair_id: { [Op.not]: null } } }),
    mediaWithPairId: await Media.count({ where: { pair_id: { [Op.not]: null } } }),
    gamesWithPairId: await GameRoom.count({ where: { pair_id: { [Op.not]: null } } })
  });
}

// –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const command = process.argv[2];
  
  if (command === 'check') {
    checkDataIntegrity()
      .then(() => process.exit(0))
      .catch(err => {
        console.error(err);
        process.exit(1);
      });
  } else if (command === 'migrate') {
    migrateExistingData()
      .then(() => process.exit(0))
      .catch(err => {
        console.error(err);
        process.exit(1);
      });
  } else {
    console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:');
    console.log('  node scripts/migrate-existing-data.js check    - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ');
    console.log('  node scripts/migrate-existing-data.js migrate  - –º–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ');
  }
}

module.exports = {
  migrateExistingData,
  checkDataIntegrity
};
