const { User, Pair } = require('../models');
const sequelize = require('../config/database');

async function debugPairs() {
  try {
    console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–∞—Ä –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...\n');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    await sequelize.authenticate();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–∞—Ä—ã
    const allPairs = await Pair.findAll({
      include: [
        {
          model: User,
          as: 'Requester',
          attributes: ['id', 'email', 'first_name'],
        },
        {
          model: User,
          as: 'Receiver',
          attributes: ['id', 'email', 'first_name'],
        },
      ],
    });

    console.log(`\nüìä –ù–∞–π–¥–µ–Ω–æ –ø–∞—Ä –≤ –±–∞–∑–µ: ${allPairs.length}`);

    if (allPairs.length === 0) {
      console.log('‚ùå –ü–∞—Ä –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç');
      return;
    }

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å—É
    const activePairs = allPairs.filter(pair => pair.status === 'active');
    const pendingPairs = allPairs.filter(pair => pair.status === 'pending');

    console.log(`\n‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä: ${activePairs.length}`);
    console.log(`‚è≥ –û–∂–∏–¥–∞—é—â–∏—Ö –ø–∞—Ä: ${pendingPairs.length}`);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä
    if (activePairs.length > 0) {
      console.log('\nüîó –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä—ã:');
      activePairs.forEach((pair, index) => {
        console.log(`${index + 1}. ID: ${pair.id}`);
        console.log(`   Requester: ${pair.Requester.email} (${pair.Requester.first_name})`);
        console.log(`   Receiver: ${pair.Receiver.email} (${pair.Receiver.first_name})`);
        console.log(`   Status: ${pair.status}`);
        console.log(`   Created: ${pair.createdAt}`);
        console.log('');
      });
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–∞—Ä
    if (pendingPairs.length > 0) {
      console.log('\n‚è≥ –û–∂–∏–¥–∞—é—â–∏–µ –ø–∞—Ä—ã:');
      pendingPairs.forEach((pair, index) => {
        console.log(`${index + 1}. ID: ${pair.id}`);
        console.log(`   Requester: ${pair.Requester.email} (${pair.Requester.first_name})`);
        console.log(`   Receiver: ${pair.Receiver.email} (${pair.Receiver.first_name})`);
        console.log(`   Status: ${pair.status}`);
        console.log(`   Created: ${pair.createdAt}`);
        console.log('');
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const allUsers = await User.findAll({
      attributes: ['id', 'email', 'first_name'],
    });

    console.log(`\nüë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${allUsers.length}`);
    console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:');
    allUsers.forEach((user, index) => {
      console.log(`${index + 1}. ${user.email} (${user.first_name}) - ID: ${user.id}`);
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ:', error);
  } finally {
    await sequelize.close();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
debugPairs(); 