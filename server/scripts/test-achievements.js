#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
 */

const models = require('../models');
const { Achievement, User, Pair, UserPair } = models;

console.log('üèÜ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π...\n');

async function testAchievements() {
  let testUser, testUser2, testPair;
  
  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø–∞—Ä—É
    console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    
    testUser = await User.create({
      first_name: '–ò–≥—Ä–æ–∫1',
      email: `player1-${Date.now()}@test.com`,
      display_name: '–¢–µ—Å—Ç–æ–≤—ã–π –ò–≥—Ä–æ–∫ 1',
      locale: 'ru',
      email_verified: true
    });

    testUser2 = await User.create({
      first_name: '–ò–≥—Ä–æ–∫2',
      email: `player2-${Date.now()}@test.com`,
      display_name: '–¢–µ—Å—Ç–æ–≤—ã–π –ò–≥—Ä–æ–∫ 2',
      locale: 'ru',
      email_verified: false
    });

    testPair = await Pair.create({
      user1Id: testUser.id,
      user2Id: testUser2.id,
      name: '–¢–µ—Å—Ç–æ–≤–∞—è –ø–∞—Ä–∞',
      harmony_index: 80,
      metadata: { test: true }
    });

    await UserPair.create({
      user_id: testUser.id,
      pair_id: testPair.id,
      role: 'admin',
      accepted: true
    });

    await UserPair.create({
      user_id: testUser2.id,
      pair_id: testPair.id,
      role: 'member',
      accepted: true
    });
    
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞—Ä–∞: ${testPair.name}`);
    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${testUser.display_name}, ${testUser2.display_name}\n`);

    // ===== –¢–ï–°–¢ 1: –í—ã–¥–∞—á–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π =====
    console.log('üèÜ –¢–ï–°–¢ 1: –í—ã–¥–∞—á–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π');
    
    // –ü–µ—Ä–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
    const firstGame = await Achievement.grantAchievement(
      testPair.id, 
      testUser.id, 
      'first_game',
      { game_type: 'chess' }
    );
    
    console.log(`‚úÖ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–ü–µ—Ä–≤–∞—è –∏–≥—Ä–∞": ${firstGame ? '–≤—ã–¥–∞–Ω–æ' : '—É–∂–µ –±—ã–ª–æ'}`);
    
    // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≤—ã–¥–∞—á–∞ —Ç–æ–≥–æ –∂–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è (–¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å null)
    const duplicate = await Achievement.grantAchievement(
      testPair.id, 
      testUser.id, 
      'first_game'
    );
    
    console.log(`‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≤—ã–¥–∞—á–∞: ${duplicate ? 'ERROR!' : '–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞'}`);
    
    // –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —É—Ä–æ–∫–∞
    const firstLesson = await Achievement.grantAchievement(
      testPair.id,
      testUser2.id,
      'first_lesson',
      { lesson_theme: 'communication' }
    );
    
    console.log(`‚úÖ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–ü–µ—Ä–≤—ã–π —É—Ä–æ–∫": ${firstLesson ? '–≤—ã–¥–∞–Ω–æ' : '–æ—à–∏–±–∫–∞'}`);
    
    // –°–æ—Ü–∏–∞–ª—å–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
    const firstGift = await Achievement.grantAchievement(
      testPair.id,
      testUser.id,
      'first_gift',
      { gift_price: 100 }
    );
    
    console.log(`‚úÖ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–ü–µ—Ä–≤—ã–π –ø–æ–¥–∞—Ä–æ–∫": ${firstGift ? '–≤—ã–¥–∞–Ω–æ' : '–æ—à–∏–±–∫–∞'}\n`);

    // ===== –¢–ï–°–¢ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–∞—Ä—ã =====
    console.log('üèÜ –¢–ï–°–¢ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–∞—Ä—ã');
    
    const pairAchievements = await Achievement.getPairAchievements(testPair.id);
    console.log(`‚úÖ –í—Å–µ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π —É –ø–∞—Ä—ã: ${pairAchievements.length}`);
    
    pairAchievements.forEach((achievement, i) => {
      console.log(`   ${i + 1}. ${achievement.title} (${achievement.rarity}, ${achievement.points} –æ—á–∫–æ–≤)`);
      console.log(`      –ü–æ–ª—É—á–∏–ª: ${achievement.User ? achievement.User.display_name : '–ü–∞—Ä–∞'}`);
    });

    // ===== –¢–ï–°–¢ 3: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π =====
    console.log('\nüèÜ –¢–ï–°–¢ 3: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π');
    
    const stats = await Achievement.getPairStats(testPair.id);
    console.log(`‚úÖ –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`   - –í—Å–µ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: ${stats.total}`);
    console.log(`   - –û–±—â–∏–µ –æ—á–∫–∏: ${stats.totalPoints}`);
    console.log(`   - –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:`, stats.byCategory);
    console.log(`   - –ü–æ —Ä–µ–¥–∫–æ—Å—Ç–∏:`, stats.byRarity);

    // ===== –¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π =====
    console.log('\nüèÜ –¢–ï–°–¢ 4: –®–∞–±–ª–æ–Ω—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π');
    
    const templates = Object.keys(Achievement.TEMPLATES);
    console.log(`‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ —à–∞–±–ª–æ–Ω–æ–≤: ${templates.length}`);
    console.log('–ü—Ä–∏–º–µ—Ä—ã:');
    
    templates.slice(0, 5).forEach(type => {
      const template = Achievement.TEMPLATES[type];
      console.log(`   - ${type}: "${template.title}" (${template.category}, ${template.points} –æ—á–∫–æ–≤)`);
    });

    // ===== –¢–ï–°–¢ 5: –ò–≥—Ä–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è =====
    console.log('\nüèÜ –¢–ï–°–¢ 5: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤—ã–¥–∞—á–∞ –∏–≥—Ä–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π');
    
    const gameAchievements = await Achievement.checkAndGrantGameAchievements(
      testPair.id,
      testUser2.id,
      'chess',
      true, // isWin
      { gamesWon: 1 }
    );
    
    console.log(`‚úÖ –í—ã–¥–∞–Ω–æ –∏–≥—Ä–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: ${gameAchievements.length}`);
    gameAchievements.forEach(ach => {
      console.log(`   - ${ach.title}: ${ach.description}`);
    });

    // ===== –¢–ï–°–¢ 6: –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è —É—Ä–æ–∫–æ–≤ =====
    console.log('\nüèÜ –¢–ï–°–¢ 6: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤—ã–¥–∞—á–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π —É—Ä–æ–∫–æ–≤');
    
    const lessonAchievements = await Achievement.checkAndGrantLessonAchievements(
      testPair.id,
      testUser.id,
      { theme: 'communication', difficulty: 'easy' }
    );
    
    console.log(`‚úÖ –í—ã–¥–∞–Ω–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π —É—Ä–æ–∫–æ–≤: ${lessonAchievements.length}`);
    lessonAchievements.forEach(ach => {
      console.log(`   - ${ach.title}: ${ach.description}`);
    });

    // ===== –¢–ï–°–¢ 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–π =====
    console.log('\nüèÜ –¢–ï–°–¢ 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–π');
    
    const pairWithAchievements = await Pair.findByPk(testPair.id, {
      include: [{ model: Achievement, as: 'Achievements' }]
    });
    
    console.log(`‚úÖ –ê—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ Pair -> Achievements: ${pairWithAchievements.Achievements?.length || 0} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π`);
    
    const userWithAchievements = await User.findByPk(testUser.id, {
      include: [{ model: Achievement, as: 'Achievements' }]
    });
    
    console.log(`‚úÖ –ê—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ User -> Achievements: ${userWithAchievements.Achievements?.length || 0} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π`);

    // ===== –¢–ï–°–¢ 8: –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ =====
    console.log('\nüèÜ –¢–ï–°–¢ 8: –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤');
    
    const leaderboard = await Achievement.getLeaderboard(5);
    console.log(`‚úÖ –¢–æ–ø –ø–∞—Ä –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º:`);
    
    leaderboard.forEach((entry, i) => {
      const totalPoints = entry.getDataValue('totalPoints');
      const totalAchievements = entry.getDataValue('totalAchievements');
      console.log(`   ${i + 1}. –ü–∞—Ä–∞ "${entry.Pair?.name}" - ${totalPoints} –æ—á–∫–æ–≤ (${totalAchievements} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π)`);
    });

    // ===== –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê =====
    console.log('\nüìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
    
    const finalStats = await Achievement.getPairStats(testPair.id);
    console.log(`‚úÖ –ò—Ç–æ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: ${finalStats.total}`);
    console.log(`‚úÖ –ò—Ç–æ–≥–æ –æ—á–∫–æ–≤: ${finalStats.totalPoints}`);

    // ===== –û–ß–ò–°–¢–ö–ê =====
    console.log('\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    
    await Achievement.destroy({ where: { pair_id: testPair.id } });
    await UserPair.destroy({ where: { user_id: testUser.id } });
    await UserPair.destroy({ where: { user_id: testUser2.id } });
    await Pair.destroy({ where: { id: testPair.id } });
    await User.destroy({ where: { id: testUser.id } });
    await User.destroy({ where: { id: testUser2.id } });
    
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã');

    // ===== –†–ï–ó–£–õ–¨–¢–ê–¢ =====
    console.log('\nüéâ –í–°–ï –¢–ï–°–¢–´ –°–ò–°–¢–ï–ú–´ –î–û–°–¢–ò–ñ–ï–ù–ò–ô –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!');
    console.log('\nüìã –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:');
    console.log('‚úÖ –í—ã–¥–∞—á–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥—É–±–ª–∏–∫–∞—Ç–æ–≤');
    console.log('‚úÖ –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π');
    console.log('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤—ã–¥–∞—á–∞ –∏–≥—Ä–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π');
    console.log('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤—ã–¥–∞—á–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π —É—Ä–æ–∫–æ–≤');
    console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π');
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤');
    console.log('‚úÖ –í—Å–µ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    console.log('\nüöÄ –°–∏—Å—Ç–µ–º–∞ –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö:', error);
    console.error('Stack trace:', error.stack);
    
    // –ü–æ–ø—ã—Ç–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    try {
      if (testPair) await Achievement.destroy({ where: { pair_id: testPair.id } });
      if (testUser) await UserPair.destroy({ where: { user_id: testUser.id } });
      if (testUser2) await UserPair.destroy({ where: { user_id: testUser2.id } });
      if (testPair) await Pair.destroy({ where: { id: testPair.id } });
      if (testUser) await User.destroy({ where: { id: testUser.id } });
      if (testUser2) await User.destroy({ where: { id: testUser2.id } });
    } catch (cleanupError) {
      console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏:', cleanupError.message);
    }
    
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
testAchievements()
  .then(() => {
    console.log('\n‚ú® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    process.exit(0);
  })
  .catch(error => {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
