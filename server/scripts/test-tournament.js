const { User, Tournament, GameParticipant, Transaction, GameRoom } = require('../models');

async function testTournament() {
  console.log('üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Tournament –º–æ–¥–µ–ª–∏...');

  try {
    // 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const testUser = await User.create({
      email: `test-tournament-${Date.now()}@example.com`,
      first_name: 'Test',
      last_name: 'User',
      display_name: 'Test User Tournament'
    });
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', testUser.id);

    // 2. –°–æ–∑–¥–∞–µ–º —Ç—É—Ä–Ω–∏—Ä
    const tournament = await Tournament.createTournament({
      name: 'Test Championship',
      description: 'Test tournament for checking functionality',
      type: 'single_elimination',
      max_participants: 8,
      entry_fee_coins: 100,
      prize_pool: 500,
      creator_id: testUser.id,
      start_date: new Date(Date.now() + 24 * 60 * 60 * 1000), // –∑–∞–≤—Ç—Ä–∞
      metadata: {
        rules: 'Standard tournament rules',
        test: true
      }
    });
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω —Ç—É—Ä–Ω–∏—Ä:', tournament.id, tournament.name);

    // 3. –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç—É—Ä–Ω–∏—Ä –≤ —Å—Ç–∞—Ç—É—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    await tournament.update({ status: 'registering' });
    console.log('‚úÖ –¢—É—Ä–Ω–∏—Ä –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å—Ç–∞—Ç—É—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');

    // 4. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
    await tournament.register(testUser.id);
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Ç—É—Ä–Ω–∏—Ä–µ');

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å
    const entryTransaction = await Transaction.findOne({
      where: {
        user_id: testUser.id,
        tournament_id: tournament.id,
        tx_type: 'tournament_entry'
      }
    });
    console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤–∑–Ω–æ—Å–∞:', entryTransaction ? entryTransaction.amount : '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞');

    // 6. –ü–æ–ª—É—á–∞–µ–º —Ç—É—Ä–Ω–∏—Ä —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
    const tournamentWithParticipants = await Tournament.getTournamentWithParticipants(tournament.id);
    console.log('‚úÖ –¢—É—Ä–Ω–∏—Ä —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –ø–æ–ª—É—á–µ–Ω:', {
      id: tournamentWithParticipants.id,
      participantsCount: tournamentWithParticipants.Participants.length,
      creatorName: tournamentWithParticipants.Creator.display_name
    });

    // 7. –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã
    const activeTournaments = await Tournament.getActiveTournaments();
    console.log('‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã –Ω–∞–π–¥–µ–Ω—ã:', activeTournaments.length);

    // 8. –°—Ç–∞—Ä—Ç—É–µ–º —Ç—É—Ä–Ω–∏—Ä
    await tournament.start();
    console.log('‚úÖ –¢—É—Ä–Ω–∏—Ä –∑–∞–ø—É—â–µ–Ω');

    // 9. –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞
    const gameRoom = await GameRoom.create({
      gameType: 'chess',
      status: 'waiting',
      bet: 0,
      maxPlayers: 2,
      hostId: testUser.id,
      players: [testUser.id],
      tournament_id: tournament.id
    });
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∏–≥—Ä–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞:', gameRoom.id);

    // 10. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏
    const tournamentWithRooms = await Tournament.findByPk(tournament.id, {
      include: [
        { model: GameRoom, as: 'GameRooms' },
        { model: Transaction, as: 'Transactions' }
      ]
    });
    console.log('‚úÖ –ê—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞:', {
      gameRooms: tournamentWithRooms.GameRooms.length,
      transactions: tournamentWithRooms.Transactions.length
    });

    // 11. –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç—É—Ä–Ω–∏—Ä —Å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º
    await tournament.complete(testUser.id);
    console.log('‚úÖ –¢—É—Ä–Ω–∏—Ä –∑–∞–≤–µ—Ä—à–µ–Ω —Å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º');

    // 12. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–∑–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const prizeTransaction = await Transaction.findOne({
      where: {
        user_id: testUser.id,
        tournament_id: tournament.id,
        tx_type: 'tournament_prize'
      }
    });
    console.log('‚úÖ –ü—Ä–∏–∑–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è:', prizeTransaction ? prizeTransaction.amount : '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞');

    // 13. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä
    try {
      await tournament.register(testUser.id);
      console.log('‚ùå –û—à–∏–±–∫–∞: —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä');
    } catch (error) {
      console.log('‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä');
    }

    // 14. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞
    const finalTournament = await Tournament.findByPk(tournament.id);
    console.log('‚úÖ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞:', {
      status: finalTournament.status,
      winnerId: finalTournament.metadata.winner_id,
      startDate: finalTournament.start_date,
      endDate: finalTournament.end_date
    });

    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã Tournament –º–æ–¥–µ–ª–∏ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Tournament:', error.message);
    console.error(error.stack);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testTournament().then(() => {
  console.log('‚ú® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
  process.exit(0);
}).catch(error => {
  console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});
