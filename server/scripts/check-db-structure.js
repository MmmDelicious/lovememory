#!/usr/bin/env node

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 */

const { QueryInterface } = require('sequelize');
const sequelize = require('../config/database');

console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n');

async function checkStructure() {
  try {
    const queryInterface = sequelize.getQueryInterface();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã Users
    console.log('üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã Users:');
    const usersColumns = await queryInterface.describeTable('Users');
    
    const expectedFields = ['display_name', 'locale', 'email_verified'];
    
    console.log('–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è:');
    Object.keys(usersColumns).forEach(column => {
      const field = usersColumns[column];
      console.log(`  - ${column}: ${field.type}${field.allowNull ? '' : ' NOT NULL'}${field.defaultValue ? ` DEFAULT ${field.defaultValue}` : ''}`);
    });
    
    console.log('\nüéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π:');
    expectedFields.forEach(field => {
      if (usersColumns[field]) {
        console.log(`‚úÖ ${field}: –Ω–∞–π–¥–µ–Ω–æ`);
      } else {
        console.log(`‚ùå ${field}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
      }
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã Pairs
    console.log('\nüìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã Pairs:');
    const pairsColumns = await queryInterface.describeTable('Pairs');
    
    const expectedPairFields = ['name', 'harmony_index', 'metadata'];
    
    console.log('–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è:');
    Object.keys(pairsColumns).forEach(column => {
      const field = pairsColumns[column];
      console.log(`  - ${column}: ${field.type}${field.allowNull ? '' : ' NOT NULL'}${field.defaultValue ? ` DEFAULT ${field.defaultValue}` : ''}`);
    });
    
    console.log('\nüéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π –≤ Pairs:');
    expectedPairFields.forEach(field => {
      if (pairsColumns[field]) {
        console.log(`‚úÖ ${field}: –Ω–∞–π–¥–µ–Ω–æ`);
      } else {
        console.log(`‚ùå ${field}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
      }
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    console.log('\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü:');
    const newTables = ['user_pairs', 'activity_logs', 'game_participants', 'shop_items', 'transactions', 'consents', 'insights', 'notification_tokens'];
    
    for (const tableName of newTables) {
      try {
        await queryInterface.describeTable(tableName);
        console.log(`‚úÖ ${tableName}: —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
      } catch (error) {
        console.log(`‚ùå ${tableName}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π
    console.log('\nüìã –°—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π:');
    try {
      const [results] = await sequelize.query('SELECT * FROM "SequelizeMeta" ORDER BY name');
      console.log('–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏:');
      results.forEach(row => {
        console.log(`  ‚úÖ ${row.name}`);
      });
    } catch (error) {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π:', error.message);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:', error);
  } finally {
    await sequelize.close();
  }
}

checkStructure()
  .then(() => {
    console.log('\n‚ú® –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    process.exit(0);
  })
  .catch(error => {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
