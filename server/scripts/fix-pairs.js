#!/usr/bin/env node
/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–∞—Ä
 */

const { User, Pair } = require('../models');
const { Op } = require('sequelize');

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  reset: '\x1b[0m',
  bright: '\x1b[1m'
};

function log(color, message) {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

async function fixAllMutualRequests() {
  try {
    log('cyan', 'üîß –ù–∞—á–∏–Ω–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...\n');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ pending –ø–∞—Ä—ã
    const allPairs = await Pair.findAll({
      where: {
        status: 'pending'
      },
      include: [
        {
          model: User,
          as: 'Requester',
          attributes: ['id', 'email', 'first_name', 'last_name']
        },
        {
          model: User,
          as: 'Receiver', 
          attributes: ['id', 'email', 'first_name', 'last_name']
        }
      ]
    });

    log('blue', `üìä –ù–∞–π–¥–µ–Ω–æ pending –ø–∞—Ä: ${allPairs.length}\n`);

    if (allPairs.length === 0) {
      log('green', '‚úÖ –ù–µ—Ç pending –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
      return;
    }

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–∞—Ä–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const pairsByUsers = {};
    
    allPairs.forEach(pair => {
      const user1 = pair.user1_id;
      const user2 = pair.user2_id;
      
      // –°–æ–∑–¥–∞—ë–º –∫–ª—é—á –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –ø–æ—Ä—è–¥–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const key = [user1, user2].sort().join('-');
      
      if (!pairsByUsers[key]) {
        pairsByUsers[key] = [];
      }
      pairsByUsers[key].push(pair);
    });

    let fixedCount = 0;
    let deletedCount = 0;

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –≥—Ä—É–ø–ø—É
    for (const [key, pairs] of Object.entries(pairsByUsers)) {
      if (pairs.length > 1) {
        log('yellow', `üîç –ù–∞–π–¥–µ–Ω—ã –≤–∑–∞–∏–º–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ${key}:`);
        
        pairs.forEach((pair, index) => {
          const requesterEmail = pair.Requester?.email || 'Unknown';
          const receiverEmail = pair.Receiver?.email || 'Unknown';
          log('reset', `   ${index + 1}. ${requesterEmail} -> ${receiverEmail} (ID: ${pair.id})`);
        });

        // –ë–µ—Ä—ë–º –ø–µ—Ä–≤—É—é –ø–∞—Ä—É –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω—É—é
        const mainPair = pairs[0];
        const duplicates = pairs.slice(1);

        try {
          // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏
          const duplicateIds = duplicates.map(p => p.id);
          await Pair.destroy({
            where: {
              id: { [Op.in]: duplicateIds }
            }
          });

          // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ø–∞—Ä—É
          mainPair.status = 'active';
          await mainPair.save();

          const requesterEmail = mainPair.Requester?.email || 'Unknown';
          const receiverEmail = mainPair.Receiver?.email || 'Unknown';

          log('green', `   ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: ${requesterEmail} ‚Üî ${receiverEmail}`);
          log('green', `   üìù –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –ø–∞—Ä–∞ ID: ${mainPair.id}`);
          log('red', `   üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–µ–π: ${duplicates.length}\n`);

          fixedCount++;
          deletedCount += duplicates.length;

        } catch (error) {
          log('red', `   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø–∞—Ä—ã ${key}: ${error.message}\n`);
        }
      }
    }

    // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('\n' + '='.repeat(60));
    log('bright', 'üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
    log('green', `‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–∞—Ä: ${fixedCount}`);
    log('red', `üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–µ–π: ${deletedCount}`);
    
    if (fixedCount > 0) {
      log('green', '\nüéâ –í—Å–µ –¥—É–±–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!');
    } else {
      log('blue', '\nüí´ –î—É–±–ª–µ–π –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }

  } catch (error) {
    log('red', `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –¥—É–±–ª–µ–π: ${error.message}`);
    console.error(error);
  }
}

async function main() {
  try {
    log('bright', 'üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –î–£–ë–õ–ò–†–£–Æ–©–ò–• –ü–ê–†');
    log('bright', '=' * 40 + '\n');
    
    await fixAllMutualRequests();
    
    log('cyan', '\nüí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É: node scripts/check-pairs.js');
    
    process.exit(0);
  } catch (error) {
    log('red', `‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
    console.error(error);
    process.exit(1);
  }
}

if (require.main === module) {
  main();
}
