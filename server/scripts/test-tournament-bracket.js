const { Tournament, GameParticipant, TournamentMatch, User } = require('../models');
const sequelize = require('../config/database');

async function testTournamentBracket() {
  let tournament = null;
  let testUsers = [];
  
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...');

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for (let i = 1; i <= 7; i++) { // 6 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ + 1 —Å–æ–∑–¥–∞—Ç–µ–ª—å
      const user = await User.create({
        username: `testuser${i}`,
        email: `testuser${i}@test.com`,
        password_hash: 'test_hash',
        display_name: `Test User ${i}`,
        first_name: `User`,
        last_name: `${i}`
      });
      testUsers.push(user);
      console.log(`‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${i} —Å–æ–∑–¥–∞–Ω:`, user.id);
    }

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ç—É—Ä–Ω–∏—Ä
    tournament = await Tournament.create({
      name: '–¢–µ—Å—Ç–æ–≤—ã–π —Ç—É—Ä–Ω–∏—Ä',
      description: '–¢–µ—Å—Ç –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã —Ç—É—Ä–Ω–∏—Ä–æ–≤',
      type: 'single_elimination',
      max_participants: 8,
      status: 'registering',
      creator_id: testUsers[0].id // –ü–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Å–æ–∑–¥–∞—Ç–µ–ª—å
    });

    console.log('‚úÖ –¢—É—Ä–Ω–∏—Ä —Å–æ–∑–¥–∞–Ω:', tournament.id);

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    const participants = [];
    for (let i = 1; i <= 6; i++) {
      const participant = await GameParticipant.create({
        tournament_id: tournament.id,
        user_id: testUsers[i].id, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        is_host: false,
        stats: {}
      });
      participants.push(participant);
      console.log(`‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ ${i} —Å–æ–∑–¥–∞–Ω:`, participant.id);
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—É—Ä–Ω–∏—Ä (—ç—Ç–æ –¥–æ–ª–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ç–∫—É)
    console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—É—Ä–Ω–∏—Ä...');
    await tournament.start();
    console.log('‚úÖ –¢—É—Ä–Ω–∏—Ä –∑–∞–ø—É—â–µ–Ω, —Å—Ç–∞—Ç—É—Å:', tournament.status);

    // –ü–æ–ª—É—á–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∏
    const matches = await TournamentMatch.getMatchesByTournament(tournament.id);
    console.log(`‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –º–∞—Ç—á–µ–π: ${matches.length}`);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–µ—Ç–∫–∏
    matches.forEach(match => {
      console.log(`üéØ –†–∞—É–Ω–¥ ${match.round}, –ü–æ–∑–∏—Ü–∏—è ${match.position}:`, {
        participant1: match.participant1_id,
        participant2: match.participant2_id,
        status: match.status
      });
    });

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    if (matches.length > 0) {
      const firstMatch = matches[0];
      console.log('üéÆ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...');
      
      if (firstMatch.participant1_id) {
        await firstMatch.setReady(firstMatch.participant1_id);
        console.log('‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ 1 –≥–æ—Ç–æ–≤');
      }
      
      if (firstMatch.participant2_id) {
        await firstMatch.setReady(firstMatch.participant2_id);
        console.log('‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ 2 –≥–æ—Ç–æ–≤');
      }
      
      console.log('üìä –°—Ç–∞—Ç—É—Å –º–∞—Ç—á–∞ –ø–æ—Å–ª–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏:', firstMatch.status);
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞
    const state = await tournament.getTournamentState();
    console.log('üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞:', {
      currentRound: state.currentRound,
      totalRounds: state.totalRounds,
      matchesCount: state.matches.length,
      participantsCount: state.participants.length
    });

    console.log('üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');

    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    console.log('üßπ –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...');
    if (tournament) {
      await TournamentMatch.destroy({ where: { tournament_id: tournament.id } });
      await GameParticipant.destroy({ where: { tournament_id: tournament.id } });
      await Tournament.destroy({ where: { id: tournament.id } });
    }
    for (const user of testUsers) {
      await User.destroy({ where: { id: user.id } });
    }
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ:', error);
  } finally {
    await sequelize.close();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testTournamentBracket();
