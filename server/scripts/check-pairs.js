#!/usr/bin/env node
/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–∞—Ä
 */

const { User, Pair } = require('../models');
const { Op } = require('sequelize');

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  reset: '\x1b[0m',
  bright: '\x1b[1m'
};

function log(color, message) {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

async function checkPairsTable() {
  try {
    log('cyan', 'üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É pairs...\n');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–∞—Ä—ã
    const allPairs = await Pair.findAll({
      include: [
        {
          model: User,
          as: 'Requester',
          attributes: ['id', 'email', 'first_name', 'last_name']
        },
        {
          model: User,
          as: 'Receiver', 
          attributes: ['id', 'email', 'first_name', 'last_name']
        }
      ],
      order: [['createdAt', 'DESC']]
    });

    log('blue', `üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ pairs: ${allPairs.length}\n`);

    if (allPairs.length === 0) {
      log('yellow', '‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü–∞ pairs –ø—É—Å—Ç–∞');
      return;
    }

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    const statuses = {};
    allPairs.forEach(pair => {
      if (!statuses[pair.status]) {
        statuses[pair.status] = [];
      }
      statuses[pair.status].push(pair);
    });

    // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    Object.keys(statuses).forEach(status => {
      const count = statuses[status].length;
      const color = status === 'active' ? 'green' : status === 'pending' ? 'yellow' : 'red';
      log(color, `${status.toUpperCase()}: ${count} –∑–∞–ø–∏—Å–µ–π`);
    });

    console.log('\n' + '='.repeat(80) + '\n');

    // –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã
    allPairs.forEach((pair, index) => {
      const requesterName = pair.Requester ? 
        `${pair.Requester.first_name || ''} ${pair.Requester.last_name || ''}`.trim() || pair.Requester.email :
        'Unknown';
      const receiverName = pair.Receiver ? 
        `${pair.Receiver.first_name || ''} ${pair.Receiver.last_name || ''}`.trim() || pair.Receiver.email :
        'Unknown';

      const statusColor = pair.status === 'active' ? 'green' : pair.status === 'pending' ? 'yellow' : 'red';
      
      log('bright', `${index + 1}. –ü–∞—Ä–∞ ID: ${pair.id}`);
      log('reset', `   –°—Ç–∞—Ç—É—Å: ${colors[statusColor]}${pair.status}${colors.reset}`);
      log('reset', `   –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä: ${requesterName} (${pair.user1_id})`);
      log('reset', `   –ü–æ–ª—É—á–∞—Ç–µ–ª—å: ${receiverName} (${pair.user2_id})`);
      log('reset', `   –°–æ–∑–¥–∞–Ω–æ: ${pair.createdAt}`);
      log('reset', `   –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${pair.updatedAt}\n`);
    });

    // –ü–æ–∏—Å–∫ –¥—É–±–ª–µ–π
    await findDuplicatePairs(allPairs);

  } catch (error) {
    log('red', `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü—ã pairs: ${error.message}`);
    console.error(error);
  }
}

async function findDuplicatePairs(allPairs) {
  log('cyan', '\nüîç –ü–æ–∏—Å–∫ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...\n');

  const pairsByUsers = {};
  
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–∞—Ä—ã –ø–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  allPairs.forEach(pair => {
    const user1 = pair.user1_id;
    const user2 = pair.user2_id;
    
    // –°–æ–∑–¥–∞—ë–º –∫–ª—é—á –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –ø–æ—Ä—è–¥–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const key = [user1, user2].sort().join('-');
    
    if (!pairsByUsers[key]) {
      pairsByUsers[key] = [];
    }
    pairsByUsers[key].push(pair);
  });

  let duplicatesFound = false;

  // –ò—â–µ–º –¥—É–±–ª–∏
  Object.keys(pairsByUsers).forEach(key => {
    const pairs = pairsByUsers[key];
    
    if (pairs.length > 1) {
      duplicatesFound = true;
      log('red', `üö® –ù–ê–ô–î–ï–ù–´ –î–£–ë–õ–ò –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ${key}:`);
      
      pairs.forEach((pair, index) => {
        const requesterEmail = pair.Requester?.email || 'Unknown';
        const receiverEmail = pair.Receiver?.email || 'Unknown';
        
        log('yellow', `   ${index + 1}. ID: ${pair.id}, –°—Ç–∞—Ç—É—Å: ${pair.status}`);
        log('reset', `      ${requesterEmail} -> ${receiverEmail}`);
        log('reset', `      –°–æ–∑–¥–∞–Ω–æ: ${pair.createdAt}`);
      });
      
      console.log();
    }
  });

  if (!duplicatesFound) {
    log('green', '‚úÖ –î—É–±–ª–∏—Ä—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!');
  } else {
    log('yellow', '\nüí° –î–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—É–±–ª–µ–π –∑–∞–ø—É—Å—Ç–∏—Ç–µ: node scripts/fix-pairs.js');
  }
}

async function main() {
  try {
    log('bright', 'üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –¢–ê–ë–õ–ò–¶–´ PAIRS');
    log('bright', '=' * 50 + '\n');
    
    await checkPairsTable();
    
    process.exit(0);
  } catch (error) {
    log('red', `‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
    console.error(error);
    process.exit(1);
  }
}

if (require.main === module) {
  main();
}
