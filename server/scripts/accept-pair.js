#!/usr/bin/env node
/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è pending –∑–∞–ø—Ä–æ—Å–∞ –ø–∞—Ä—ã
 */

const { User, Pair } = require('../models');

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  reset: '\x1b[0m',
  bright: '\x1b[1m'
};

function log(color, message) {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

async function acceptPendingPair() {
  try {
    log('cyan', 'üîß –ü–æ–∏—Å–∫ pending –∑–∞–ø—Ä–æ—Å–∞...\n');

    // –ù–∞—Ö–æ–¥–∏–º pending –ø–∞—Ä—É
    const pendingPair = await Pair.findOne({
      where: {
        status: 'pending'
      },
      include: [
        {
          model: User,
          as: 'Requester',
          attributes: ['id', 'email', 'first_name', 'last_name']
        },
        {
          model: User,
          as: 'Receiver', 
          attributes: ['id', 'email', 'first_name', 'last_name']
        }
      ]
    });

    if (!pendingPair) {
      log('yellow', '‚ö†Ô∏è  –ù–µ—Ç pending –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è');
      return;
    }

    const requesterName = `${pendingPair.Requester.first_name} ${pendingPair.Requester.last_name}`.trim();
    const receiverName = `${pendingPair.Receiver.first_name} ${pendingPair.Receiver.last_name}`.trim();

    log('blue', `üìã –ù–∞–π–¥–µ–Ω –∑–∞–ø—Ä–æ—Å:`);
    log('reset', `   –û—Ç: ${requesterName} (${pendingPair.Requester.email})`);
    log('reset', `   –ö: ${receiverName} (${pendingPair.Receiver.email})`);
    log('reset', `   ID: ${pendingPair.id}\n`);

    // –ü—Ä–∏–Ω–∏–º–∞–µ–º –∑–∞–ø—Ä–æ—Å
    pendingPair.status = 'active';
    await pendingPair.save();

    log('green', 'üéâ –ó–ê–ü–†–û–° –ü–†–ò–ù–Ø–¢!');
    log('green', `‚úÖ ${requesterName} –∏ ${receiverName} —Ç–µ–ø–µ—Ä—å –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫–∞–∫ –ø–∞—Ä—Ç–Ω—ë—Ä—ã!`);
    log('green', `üìù –ü–∞—Ä–∞ ID: ${pendingPair.id} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞`);

  } catch (error) {
    log('red', `‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    console.error(error);
  }
}

async function main() {
  try {
    log('bright', 'üíï –ü–†–ò–ù–Ø–¢–ò–ï –ó–ê–ü–†–û–°–ê –ù–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï');
    log('bright', '=' * 40 + '\n');
    
    await acceptPendingPair();
    
    process.exit(0);
  } catch (error) {
    log('red', `‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
    console.error(error);
    process.exit(1);
  }
}

if (require.main === module) {
  main();
}
