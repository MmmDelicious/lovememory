const { Worker } = require('bullmq');
const { getRedisClient } = require('../config/redis');

/**
 * Analysis Worker - –§–æ–Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–¥–∞—á –∞–Ω–∞–ª–∏–∑–∞
 * 
 * –≠—Ç–æ—Ç –≤–æ—Ä–∫–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç—è–∂–µ–ª—ã–µ –∑–∞–¥–∞—á–∏:
 * - –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ AI
 * - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Å–∞–π—Ç–æ–≤ –æ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö
 * - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ RelationshipProfile
 */

class AnalysisWorker {
  constructor() {
    this.workers = [];
    this.connection = null;
    this.isRunning = false;
  }

  /**
   * –ó–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–æ–≤
   */
  async start() {
    if (this.isRunning) {
      console.log('‚ö†Ô∏è Analysis workers already running');
      return;
    }

    console.log('üöÄ Starting Analysis Workers...');

    try {
      // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
      this.connection = getRedisClient();
      await this.connection.ping();

      // –°–æ–∑–¥–∞–µ–º –≤–æ—Ä–∫–µ—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á
      await this.createWorkers();

      this.isRunning = true;
      console.log('‚úÖ Analysis Workers started successfully');

    } catch (error) {
      console.error('‚ùå Failed to start Analysis Workers:', error);
      throw error;
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –≤–æ—Ä–∫–µ—Ä–æ–≤
   */
  async createWorkers() {
    const workerConfig = {
      connection: this.connection,
      concurrency: 2, // 2 –∑–∞–¥–∞—á–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
      removeOnComplete: 50,
      removeOnFail: 100,
    };

    // –í–æ—Ä–∫–µ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const analysisWorker = new Worker('analysis', this.processAnalysisJob.bind(this), workerConfig);
    this.workers.push(analysisWorker);

    // –í–æ—Ä–∫–µ—Ä –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω—Å–∞–π—Ç–æ–≤
    const insightsWorker = new Worker('insights', this.processInsightJob.bind(this), workerConfig);
    this.workers.push(insightsWorker);

    // –í–æ—Ä–∫–µ—Ä –¥–ª—è —Å–ª—É–∂–µ–±–Ω—ã—Ö –∑–∞–¥–∞—á
    const maintenanceWorker = new Worker('maintenance', this.processMaintenanceJob.bind(this), {
      ...workerConfig,
      concurrency: 1, // –°–ª—É–∂–µ–±–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ –æ–¥–Ω–æ–π
    });
    this.workers.push(maintenanceWorker);

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    this.setupWorkerEvents();

    console.log(`üë∑ Created ${this.workers.length} workers`);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async processAnalysisJob(job) {
    const { userId, type } = job.data;
    console.log(`üìä Processing analysis job for user ${userId}`);

    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
      await job.updateProgress(10);

      // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç TS —Å–µ—Ä–≤–∏—Å–æ–≤ (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)
      let analysisEngine;
      try {
        // –í –±—É–¥—É—â–µ–º: analysisEngine = require('../services/analysisEngine.service');
        analysisEngine = {
          analyzeUser: async (request) => {
            // –ó–∞–≥–ª—É—à–∫–∞ –ø–æ–∫–∞ TS —Å–µ—Ä–≤–∏—Å—ã –Ω–µ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω—ã
            console.log(`üß† Mock analysis for user ${request.userId}`);
            await new Promise(resolve => setTimeout(resolve, 2000)); // –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã
            return {
              userId: request.userId,
              analysisType: 'full',
              result: { status: 'completed' },
              confidence: 0.8,
              analyzedAt: new Date()
            };
          }
        };
      } catch (error) {
        console.warn('‚ö†Ô∏è Using mock analysis engine:', error.message);
      }

      await job.updateProgress(30);

      // –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
      const result = await analysisEngine.analyzeUser({ userId });
      
      await job.updateProgress(80);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ (–ø–æ–∫–∞ —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π SQL)
      await this.updateAnalysisStatus(userId, 'completed');

      await job.updateProgress(100);

      console.log(`‚úÖ Analysis completed for user ${userId}`);
      return { 
        success: true, 
        userId, 
        result,
        completedAt: new Date()
      };

    } catch (error) {
      console.error(`‚ùå Analysis failed for user ${userId}:`, error);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∏
      await this.updateAnalysisStatus(userId, 'error');
      
      throw error;
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω—Å–∞–π—Ç–æ–≤
   */
  async processInsightJob(job) {
    const { userId, eventId, type } = job.data;
    console.log(`üí° Processing insight job for user ${userId}, event ${eventId}`);

    try {
      await job.updateProgress(20);

      // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω—Å–∞–π—Ç–æ–≤
      const insight = {
        userId,
        eventId,
        type: 'relationship_improvement',
        title: '–û—Ç–ª–∏—á–Ω–æ–µ –≤—Ä–µ–º—è–ø—Ä–µ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ!',
        content: '–í–∞—à–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–±—ã—Ç–∏–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–π. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!',
        confidence: 0.75,
        generatedAt: new Date()
      };

      await job.updateProgress(60);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Å–∞–π—Ç –≤ –±–∞–∑—É (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)
      await this.saveInsight(insight);

      await job.updateProgress(100);

      console.log(`‚úÖ Insight generated for user ${userId}`);
      return {
        success: true,
        insight,
        completedAt: new Date()
      };

    } catch (error) {
      console.error(`‚ùå Insight generation failed for user ${userId}:`, error);
      throw error;
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É–∂–µ–±–Ω—ã—Ö –∑–∞–¥–∞—á
   */
  async processMaintenanceJob(job) {
    const { type, cleanupType } = job.data;
    console.log(`üßπ Processing maintenance job: ${cleanupType}`);

    try {
      await job.updateProgress(25);

      switch (cleanupType) {
        case 'old_interactions':
          await this.cleanupOldInteractions();
          break;
        case 'failed_jobs':
          await this.cleanupFailedJobs();
          break;
        case 'temp_files':
          await this.cleanupTempFiles();
          break;
        default:
          console.warn(`Unknown cleanup type: ${cleanupType}`);
      }

      await job.updateProgress(100);

      console.log(`‚úÖ Maintenance completed: ${cleanupType}`);
      return {
        success: true,
        cleanupType,
        completedAt: new Date()
      };

    } catch (error) {
      console.error(`‚ùå Maintenance failed for ${cleanupType}:`, error);
      throw error;
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –≤–æ—Ä–∫–µ—Ä–æ–≤
   */
  setupWorkerEvents() {
    this.workers.forEach((worker, index) => {
      worker.on('completed', (job) => {
        console.log(`‚úÖ Worker ${index} completed job ${job.id}`);
      });

      worker.on('failed', (job, err) => {
        console.error(`‚ùå Worker ${index} failed job ${job?.id}:`, err.message);
      });

      worker.on('error', (err) => {
        console.error(`‚ùå Worker ${index} error:`, err);
      });

      worker.on('stalled', (jobId) => {
        console.warn(`‚ö†Ô∏è Worker ${index} job ${jobId} stalled`);
      });
    });
  }

  /**
   * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
   */
  async updateAnalysisStatus(userId, status) {
    try {
      // –ü–æ–∫–∞ —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π SQL, –ø–æ—Ç–æ–º —á–µ—Ä–µ–∑ TS –º–æ–¥–µ–ª—å
      const { sequelize } = require('../models');
      await sequelize.query(
        'UPDATE activity_logs SET activity_data = ? WHERE user_id = ? AND activity_type = ?',
        {
          replacements: [
            JSON.stringify({ analysis_status: status, updated_at: new Date() }),
            userId,
            'analysis_status'
          ]
        }
      );
      console.log(`üìù Updated analysis status for user ${userId}: ${status}`);
    } catch (error) {
      console.error('Error updating analysis status:', error);
    }
  }

  async saveInsight(insight) {
    try {
      // –ó–∞–≥–ª—É—à–∫–∞ - –≤ –±—É–¥—É—â–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ç–∞–±–ª–∏—Ü—É Insights
      console.log(`üíæ Saving insight for user ${insight.userId}:`, insight.title);
    } catch (error) {
      console.error('Error saving insight:', error);
    }
  }

  async cleanupOldInteractions() {
    console.log('üßπ Cleaning up old AI interactions...');
    // –£–¥–∞–ª—è–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å—Ç–∞—Ä—à–µ 90 –¥–Ω–µ–π
    const { sequelize } = require('../models');
    const result = await sequelize.query(`
      DELETE FROM activity_logs 
      WHERE activity_type = 'ai_interaction' 
      AND created_at < NOW() - INTERVAL '90 days'
    `);
    console.log(`üóëÔ∏è Removed ${result[1]} old interactions`);
  }

  async cleanupFailedJobs() {
    console.log('üßπ Cleaning up failed jobs...');
    // BullMQ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—Å—Ç–∏—Ç failed jobs –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
  }

  async cleanupTempFiles() {
    console.log('üßπ Cleaning up temp files...');
    // –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–æ—Ä–∫–µ—Ä–æ–≤
   */
  getWorkerStats() {
    return this.workers.map((worker, index) => ({
      id: index,
      queueName: worker.name,
      isRunning: worker.isRunning(),
      concurrency: worker.opts.concurrency
    }));
  }

  /**
   * –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Ä–∫–µ—Ä–æ–≤
   */
  async stop() {
    if (!this.isRunning) {
      console.log('‚ö†Ô∏è Analysis workers not running');
      return;
    }

    console.log('üîÑ Stopping Analysis Workers...');

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤
    await Promise.all(this.workers.map(worker => worker.close()));
    this.workers = [];
    this.isRunning = false;

    console.log('‚úÖ Analysis Workers stopped');
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –≤–æ—Ä–∫–µ—Ä–æ–≤
   */
  async healthCheck() {
    return {
      isRunning: this.isRunning,
      workersCount: this.workers.length,
      workers: this.getWorkerStats()
    };
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–Ω–≥–ª—Ç–æ–Ω
module.exports = new AnalysisWorker();

