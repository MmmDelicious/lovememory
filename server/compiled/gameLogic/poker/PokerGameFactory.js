"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PokerGameFactory = void 0;
const PokerEngine_1 = require("./PokerEngine");
class PokerGameFactory {
    /**
     * –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–∫–µ—Ä–Ω—É—é –∏–≥—Ä—É —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
     */
    static createGame(gameId, players, options = {}) {
        console.log(`üè≠ [PokerFactory] Creating poker game`, {
            timestamp: new Date().toISOString(),
            gameId,
            playersCount: players.length,
            players: players.map(p => ({ id: p.id, name: p.name, buyInCoins: p.buyInCoins })),
            options
        });
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º buy-in –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–≥—Ä–æ–∫–æ–≤ –∏–ª–∏ –æ–ø—Ü–∏–π
        const buyInCoins = players[0]?.buyInCoins || options.buyInAmount || 1000;
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–ª–∞–π–Ω–¥—ã –∫–∞–∫ –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç buy-in
        const smallBlind = options.smallBlind || Math.max(1, Math.floor(buyInCoins * 0.005)); // 0.5%
        const bigBlind = options.bigBlind || Math.max(2, Math.floor(buyInCoins * 0.01)); // 1%
        console.log(`üí∞ [PokerFactory] Calculated game parameters`, {
            timestamp: new Date().toISOString(),
            gameId,
            buyInCoins,
            smallBlind,
            bigBlind
        });
        const settings = {
            smallBlind,
            bigBlind,
            buyInAmount: buyInCoins,
            maxPlayers: options.maxPlayers || 8,
            minPlayers: options.minPlayers || 2,
            turnTimeLimit: options.turnTimeLimit || 30000, // 30 —Å–µ–∫—É–Ω–¥
            allowRebuys: options.allowRebuys !== false, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é true
            allowAddOns: options.allowAddOns !== false // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é true
        };
        console.log(`‚öôÔ∏è  [PokerFactory] Created game settings`, {
            timestamp: new Date().toISOString(),
            gameId,
            settings
        });
        const game = new PokerEngine_1.PokerEngine(gameId, settings);
        console.log(`üé≤ [PokerFactory] PokerEngine instantiated`, {
            timestamp: new Date().toISOString(),
            gameId,
            engineStatus: game.status,
            engineType: game.gameType
        });
        // –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–ª—è –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
        // –ò–≥—Ä–æ–∫–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ—Å–ª–µ buy-in —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã
        console.log(`‚è≠Ô∏è  [PokerFactory] Skipping automatic player addition - waiting for buy-ins`, {
            timestamp: new Date().toISOString(),
            gameId,
            playersToAddLater: players.length
        });
        // –£–î–ê–õ–ï–ù –°–¢–ê–†–´–ô –ö–û–î:
        // for (const playerInfo of players) {
        //   game.addPlayer(
        //     playerInfo.id, 
        //     playerInfo.name || '–ò–≥—Ä–æ–∫',
        //     playerInfo.buyInCoins || buyInCoins
        //   );
        // }
        console.log(`‚úÖ [PokerFactory] Poker game created successfully`, {
            timestamp: new Date().toISOString(),
            gameId,
            finalStatus: game.status,
            playersInGame: game.players?.length || 0
        });
        return game;
    }
    /**
     * –°–æ–∑–¥–∞–µ–º –ø–æ–∫–µ—Ä –¥–ª—è heads-up (1 –Ω–∞ 1)
     */
    static createHeadsUpGame(gameId, player1, player2, buyInAmount = 1000) {
        return this.createGame(gameId, [player1, player2], {
            maxPlayers: 2,
            minPlayers: 2,
            buyInAmount,
            smallBlind: Math.max(1, Math.floor(buyInAmount * 0.01)),
            bigBlind: Math.max(2, Math.floor(buyInAmount * 0.02)),
            turnTimeLimit: 30000
        });
    }
    /**
     * –°–æ–∑–¥–∞–µ–º —Ç—É—Ä–Ω–∏—Ä–Ω—ã–π –ø–æ–∫–µ—Ä (—É–≤–µ–ª–∏—á–∏–≤–∞—é—â–∏–µ—Å—è –±–ª–∞–π–Ω–¥—ã)
     */
    static createTournamentGame(gameId, players, options = {}) {
        const buyInAmount = options.buyInAmount || 1500;
        return this.createGame(gameId, players, {
            ...options,
            buyInAmount,
            smallBlind: 10,
            bigBlind: 20,
            allowRebuys: false,
            allowAddOns: false,
            turnTimeLimit: 25000 // –ë—ã—Å—Ç—Ä–µ–µ –≤ —Ç—É—Ä–Ω–∏—Ä–µ
        });
    }
}
exports.PokerGameFactory = PokerGameFactory;
//# sourceMappingURL=PokerGameFactory.js.map