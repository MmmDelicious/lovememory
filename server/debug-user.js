const { User } = require('./models');
const bcrypt = require('bcryptjs');

async function debugUser() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const users = await User.findAll({
      attributes: ['id', 'email', 'first_name', 'password_hash'],
      limit: 5
    });
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);
    
    if (users.length === 0) {
      console.log('‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π! –ù—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.');
      return;
    }
    
    users.forEach((user, index) => {
      console.log(`${index + 1}. ID: ${user.id}`);
      console.log(`   Email: ${user.email}`);
      console.log(`   –ò–º—è: ${user.first_name}`);
      console.log(`   –•—ç—à –ø–∞—Ä–æ–ª—è: ${user.password_hash ? '–µ—Å—Ç—å' : '–ù–ï–¢'}`);
      console.log(`   –î–ª–∏–Ω–∞ —Ö—ç—à–∞: ${user.password_hash ? user.password_hash.length : 'N/A'}`);
      console.log('---');
    });
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (users.length > 0) {
      const testUser = users[0];
      console.log(`üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø–∞—Ä–æ–ª—è –¥–ª—è ${testUser.email}`);
      
      // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–∞—Ä–æ–ª–µ–π
      const testPasswords = ['123456', 'password', '12345678', 'test', 'admin'];
      
      for (const pwd of testPasswords) {
        try {
          const isValid = await testUser.validPassword(pwd);
          console.log(`   –ü–∞—Ä–æ–ª—å "${pwd}": ${isValid ? '‚úÖ –í–ï–†–ù–´–ô' : '‚ùå –Ω–µ–≤–µ—Ä–Ω—ã–π'}`);
        } catch (error) {
          console.log(`   –ü–∞—Ä–æ–ª—å "${pwd}": ‚ùå –æ—à–∏–±–∫–∞ - ${error.message}`);
        }
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ:', error.message);
  } finally {
    process.exit(0);
  }
}

debugUser();
