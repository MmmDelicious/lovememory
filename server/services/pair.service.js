const { User, Pair } = require('../models');
const { Op } = require('sequelize');

class PairService {
  async getPairingStatus(userId) {
    if (!userId) {
      const error = new Error('userId is required');
      error.statusCode = 400;
      throw error;
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –≤–∑–∞–∏–º–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—Ä–æ—Å–µ —Å—Ç–∞—Ç—É—Å–∞
    try {
      await this.fixMutualRequests(userId);
    } catch (error) {
      console.warn('üîó Failed to fix mutual requests:', error.message);
    }
    
    // –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–∞—Ä—É
    const activePair = await Pair.findOne({
      where: {
        [Op.or]: [{ user1_id: userId }, { user2_id: userId }],
        status: 'active',
      },
      include: [
        {
          model: User,
          as: 'Requester',
          attributes: ['id', 'first_name', 'display_name', 'gender', 'city', 'email'],
        },
        {
          model: User,
          as: 'Receiver',
          attributes: ['id', 'first_name', 'display_name', 'gender', 'city', 'email'],
        },
      ],
    });

    // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–∞—Ä–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ—ë
    if (activePair) {
      const partnerData = activePair.user1_id === userId ? activePair.Receiver : activePair.Requester;
      
      return {
        status: 'active',
        id: activePair.id,
        user1_id: activePair.user1_id,
        user2_id: activePair.user2_id,
        Requester: activePair.Requester,
        Receiver: activePair.Receiver,
        partner: {
          id: partnerData.id,
          name: partnerData.display_name || partnerData.first_name, // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç display_name
          gender: partnerData.gender,
          city: partnerData.city,
        },
      };
    }

    // –ò—â–µ–º pending –∑–∞–ø—Ä–æ—Å
    const pendingPair = await Pair.findOne({
      where: {
        [Op.or]: [{ user1_id: userId }, { user2_id: userId }],
        status: 'pending',
      },
      include: [
        {
          model: User,
          as: 'Requester',
          attributes: ['id', 'first_name', 'display_name', 'gender', 'city', 'email'],
        },
        {
          model: User,
          as: 'Receiver',
          attributes: ['id', 'first_name', 'display_name', 'gender', 'city', 'email'],
        },
      ],
    });

    // –ï—Å–ª–∏ –µ—Å—Ç—å pending –∑–∞–ø—Ä–æ—Å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
    if (pendingPair) {
      return {
        status: 'pending',
        id: pendingPair.id,
        user1_id: pendingPair.user1_id,
        user2_id: pendingPair.user2_id,
        Requester: pendingPair.Requester,
        Receiver: pendingPair.Receiver,
      };
    }

    // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    return { status: 'unpaired' };
  }

  async sendPairRequest(requesterId, partnerEmail) {
    if (!partnerEmail) {
      const error = new Error('Email –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ —É–∫–∞–∑–∞–Ω.');
      error.statusCode = 400;
      throw error;
    }
    
    const partner = await User.findOne({ where: { email: partnerEmail } });
    if (!partner) {
      const error = new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      error.statusCode = 404;
      throw error;
    }

    if (requesterId === partner.id) {
        const error = new Error('–ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å –ø–∞—Ä—É —Å —Å–∞–º–∏–º —Å–æ–±–æ–π.');
        error.statusCode = 400;
        throw error;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã
    const existingPairs = await Pair.findAll({
        where: {
            [Op.or]: [
                { user1_id: requesterId, user2_id: partner.id },
                { user1_id: partner.id, user2_id: requesterId },
            ]
        }
    });

    // –ï—Å–ª–∏ –µ—Å—Ç—å –≤–∑–∞–∏–º–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–Ω–∏–º–∞–µ–º
    if (existingPairs.length > 0) {
        const existingPair = existingPairs[0];
        
        // –ï—Å–ª–∏ —ç—Ç–æ —Ç–æ—Ç –∂–µ –∑–∞–ø—Ä–æ—Å –æ—Ç —Ç–æ–≥–æ –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (existingPair.user1_id === requesterId) {
            const error = new Error('–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—ã —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.');
            error.statusCode = 409;
            throw error;
        }
        
        // –ï—Å–ª–∏ —ç—Ç–æ –≤—Å—Ç—Ä–µ—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–Ω–∏–º–∞–µ–º!
        if (existingPair.user1_id === partner.id && existingPair.user2_id === requesterId && existingPair.status === 'pending') {
            // –£–¥–∞–ª—è–µ–º –ª—é–±—ã–µ –¥—É–±–ª–∏—Ä—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏
            if (existingPairs.length > 1) {
                await Pair.destroy({
                    where: {
                        id: { [Op.in]: existingPairs.slice(1).map(p => p.id) }
                    }
                });
            }
            
            // –ü—Ä–∏–Ω–∏–º–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å
            existingPair.status = 'active';
            await existingPair.save();
            
            return existingPair;
        }
        
        const error = new Error('–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—ã —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.');
        error.statusCode = 409;
        throw error;
    }

    const newPair = await Pair.create({
      user1_id: requesterId,
      user2_id: partner.id,
      status: 'pending',
    });
    return newPair;
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
  async fixMutualRequests(userId) {
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ pending –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏—Å—Ö–æ–¥—è—â–∏–µ –∏ –≤—Ö–æ–¥—è—â–∏–µ)
    const allPairs = await Pair.findAll({
      where: {
        [Op.or]: [
          { user1_id: userId, status: 'pending' },
          { user2_id: userId, status: 'pending' }
        ]
      }
    });

    const pairsByPartner = {};
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞–º
    allPairs.forEach(pair => {
      const partnerId = pair.user1_id === userId ? pair.user2_id : pair.user1_id;
      if (!pairsByPartner[partnerId]) {
        pairsByPartner[partnerId] = [];
      }
      pairsByPartner[partnerId].push(pair);
    });

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∑–∞–∏–º–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    for (const [partnerId, pairs] of Object.entries(pairsByPartner)) {
      if (pairs.length > 1) {
        // –ï—Å—Ç—å –≤–∑–∞–∏–º–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã - –æ–±—ä–µ–¥–∏–Ω—è–µ–º –∏—Ö
        const mainPair = pairs[0];
        const duplicates = pairs.slice(1);
        
        // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏
        await Pair.destroy({
          where: {
            id: { [Op.in]: duplicates.map(p => p.id) }
          }
        });
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ø–∞—Ä—É
        mainPair.status = 'active';
        await mainPair.save();
        
        console.log(`üîó Fixed mutual requests between users ${userId} and ${partnerId}`);
      }
    }
    
    return true;
  }

  async acceptPairRequest(pairId, userId) {
    const pair = await Pair.findByPk(pairId);
    if (!pair || pair.user2_id !== userId) {
      const error = new Error('–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∞–¥—Ä–µ—Å–æ–≤–∞–Ω –Ω–µ –≤–∞–º.');
      error.statusCode = 404;
      throw error;
    }
    pair.status = 'active';
    await pair.save();
    return pair;
  }

  async rejectPairRequest(pairId, userId) {
    const pair = await Pair.findByPk(pairId);
    if (!pair || pair.user2_id !== userId) {
      const error = new Error('–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∞–¥—Ä–µ—Å–æ–≤–∞–Ω –Ω–µ –≤–∞–º.');
      error.statusCode = 404;
      throw error;
    }
    
    // –£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤–º–µ—Å—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    await pair.destroy();
    return { message: '–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω.' };
  }

  async deletePair(pairId, userId) {
    const pair = await Pair.findOne({
        where: {
            id: pairId,
            [Op.or]: [{ user1_id: userId }, { user2_id: userId }]
        }
    });

    if (!pair) {
      const error = new Error('–ü–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
      error.statusCode = 404;
      throw error;
    }
    
    await pair.destroy();
    return { message: '–ü–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.' };
  }
}

module.exports = new PairService();