import { Op } from 'sequelize';
import { 
  AnalysisRequest, 
  AnalysisResult, 
  RelationshipProfile as IRelationshipProfile,
  IAnalysisEngine,
  LoveLanguages,
  RelationshipGraph,
  ActivityPatterns,
  AnalysisError,
  UserContext,
  EventData
} from '../types/intelligence.types';

import RelationshipProfile from '../models/RelationshipProfile';
import userContextService from './userContext.service';

// –ò–º–ø–æ—Ä—Ç—ã JS –º–æ–¥–µ–ª–µ–π
const { Event, ActivityLog, User } = require('../models');
const aiService = require('./ai.service');

/**
 * Analysis Engine - –§–æ–Ω–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö
 * –û–±–Ω–æ–≤–ª—è–µ—Ç RelationshipProfile –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
class AnalysisEngine implements IAnalysisEngine {

  /**
   * –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async analyzeUser(request: AnalysisRequest): Promise<AnalysisResult> {
    console.log(`üî¨ AnalysisEngine: Starting analysis for user ${request.userId}`);
    
    try {
      const context = await userContextService.buildContext(request.userId);
      let analysisResults: AnalysisResult[] = [];

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á—Ç–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å
      const analysisTypes = request.analysisType ? [request.analysisType] : 
        ['love_languages', 'sentiment', 'activity_patterns'];

      // –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      const analyses = await Promise.allSettled(
        analysisTypes.map(type => this.performSpecificAnalysis(type, context))
      );

      // –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      analyses.forEach((result, index) => {
        if (result.status === 'fulfilled') {
          analysisResults.push(result.value);
        } else {
          console.error(`Analysis ${analysisTypes[index]} failed:`, result.reason);
        }
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –æ—Ç–Ω–æ—à–µ–Ω–∏–π
      const updatedProfile = await this.updateRelationshipProfile(request.userId, analysisResults);

      console.log(`‚úÖ AnalysisEngine: Analysis completed for user ${request.userId}`);

      return {
        userId: request.userId,
        analysisType: request.analysisType || 'full',
        result: updatedProfile,
        confidence: this.calculateOverallConfidence(analysisResults),
        analyzedAt: new Date(),
        dataUsed: {
          eventsCount: context.recentEvents.length,
          interactionsCount: context.aiInteractionHistory.length,
          timeRange: {
            from: this.getEarliestDate(context),
            to: new Date()
          }
        }
      };

    } catch (error) {
      console.error('‚ùå AnalysisEngine: Error during analysis:', error);
      throw new AnalysisError(`Analysis failed for user ${request.userId}: ${error.message}`, { request, error });
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –æ—Ç–Ω–æ—à–µ–Ω–∏–π
   */
  async updateRelationshipProfile(
    userId: string, 
    analysisResults: AnalysisResult[]
  ): Promise<IRelationshipProfile> {
    
    const profile = await RelationshipProfile.findOne({ where: { userId } });
    if (!profile) {
      throw new AnalysisError(`RelationshipProfile not found for user ${userId}`);
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–æ–≤
    for (const result of analysisResults) {
      switch (result.analysisType) {
        case 'love_languages':
          profile.loveLanguages = result.result as LoveLanguages;
          break;
        case 'sentiment':
          profile.sentimentTrend = result.result as number;
          break;
        case 'activity_patterns':
          profile.activityPatterns = result.result as ActivityPatterns;
          break;
        case 'relationship_graph':
          profile.relationshipGraph = result.result as RelationshipGraph;
          break;
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    profile.version = (profile.version || 1) + 1;
    profile.lastAnalyzedAt = new Date();
    profile.analysisStatus = 'completed';

    await profile.save();
    return profile.toJSON() as IRelationshipProfile;
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞
   */
  private async performSpecificAnalysis(
    analysisType: string, 
    context: UserContext
  ): Promise<AnalysisResult> {
    
    console.log(`üîç Analyzing ${analysisType} for user ${context.user.id}`);

    switch (analysisType) {
      case 'love_languages':
        return await this.analyzeLoveLanguages(context);
      case 'sentiment':
        return await this.analyzeSentiment(context);
      case 'activity_patterns':
        return await this.analyzeActivityPatterns(context);
      case 'relationship_graph':
        return await this.analyzeRelationshipGraph(context);
      default:
        throw new AnalysisError(`Unknown analysis type: ${analysisType}`);
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ —è–∑—ã–∫–æ–≤ –ª—é–±–≤–∏ —á–µ—Ä–µ–∑ AI
   */
  private async analyzeLoveLanguages(context: UserContext): Promise<AnalysisResult> {
    const events = context.recentEvents.slice(0, 15); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 15 —Å–æ–±—ã—Ç–∏–π
    
    if (events.length < 3) {
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –º–∞–ª–æ
      return {
        userId: context.user.id,
        analysisType: 'love_languages',
        result: {
          physical_touch: 0.2,
          quality_time: 0.25,
          words_of_affirmation: 0.2,
          acts_of_service: 0.15,
          receiving_gifts: 0.2
        },
        confidence: 0.3,
        analyzedAt: new Date(),
        dataUsed: {
          eventsCount: events.length,
          interactionsCount: 0,
          timeRange: { from: new Date(), to: new Date() }
        }
      };
    }

    try {
      const eventsText = events.map(e => 
        `${e.title}: ${e.description || ''} (${e.event_type})`
      ).join('\n');

      const prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–ø—Ä–µ–¥–µ–ª–∏ –µ–≥–æ —è–∑—ã–∫–∏ –ª—é–±–≤–∏.
–°–æ–±—ã—Ç–∏—è:
${eventsText}

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON –æ–±—ä–µ–∫—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
{
  "physical_touch": 0.0-1.0,
  "quality_time": 0.0-1.0, 
  "words_of_affirmation": 0.0-1.0,
  "acts_of_service": 0.0-1.0,
  "receiving_gifts": 0.0-1.0
}

–°—É–º–º–∞ –≤—Å–µ—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ 1.0.`;

      const aiResponse = await aiService.getChatResponse(prompt, {});
      const result = JSON.parse(aiResponse.text);

      return {
        userId: context.user.id,
        analysisType: 'love_languages',
        result,
        confidence: 0.8,
        analyzedAt: new Date(),
        dataUsed: {
          eventsCount: events.length,
          interactionsCount: 0,
          timeRange: this.getTimeRange(events)
        }
      };

    } catch (error) {
      console.error('Error in love languages analysis:', error);
      // Fallback –∫ –±–∞–∑–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º
      return {
        userId: context.user.id,
        analysisType: 'love_languages',
        result: {
          physical_touch: 0.2,
          quality_time: 0.25,
          words_of_affirmation: 0.2,
          acts_of_service: 0.15,
          receiving_gifts: 0.2
        },
        confidence: 0.1,
        analyzedAt: new Date(),
        dataUsed: {
          eventsCount: events.length,
          interactionsCount: 0,
          timeRange: this.getTimeRange(events)
        }
      };
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —á–µ—Ä–µ–∑ AI
   */
  private async analyzeSentiment(context: UserContext): Promise<AnalysisResult> {
    const recentEvents = context.recentEvents.slice(0, 10);
    const recentInteractions = context.aiInteractionHistory.slice(0, 10);

    if (recentEvents.length === 0 && recentInteractions.length === 0) {
      return {
        userId: context.user.id,
        analysisType: 'sentiment',
        result: 0.0, // –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
        confidence: 0.2,
        analyzedAt: new Date(),
        dataUsed: {
          eventsCount: 0,
          interactionsCount: 0,
          timeRange: { from: new Date(), to: new Date() }
        }
      };
    }

    try {
      const eventsText = recentEvents.map(e => 
        `${e.title}: ${e.description || ''}`
      ).join('\n');

      const interactionsText = recentInteractions.map(i => 
        `–ó–∞–ø—Ä–æ—Å: ${i.prompt} | –û—Ç–≤–µ—Ç: ${i.response}`
      ).join('\n');

      const prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ —Å–æ–±—ã—Ç–∏–π –∏ –æ–±—â–µ–Ω–∏—è —Å AI.

–°–æ–±—ã—Ç–∏—è:
${eventsText}

–û–±—â–µ–Ω–∏–µ —Å AI:
${interactionsText}

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û —á–∏—Å–ª–æ –æ—Ç -1.0 –¥–æ 1.0, –≥–¥–µ:
-1.0 = –æ—á–µ–Ω—å –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
0.0 = –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ  
1.0 = –æ—á–µ–Ω—å –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ`;

      const aiResponse = await aiService.getChatResponse(prompt, {});
      const sentiment = parseFloat(aiResponse.text.trim());

      return {
        userId: context.user.id,
        analysisType: 'sentiment',
        result: isNaN(sentiment) ? 0.0 : Math.max(-1, Math.min(1, sentiment)),
        confidence: 0.75,
        analyzedAt: new Date(),
        dataUsed: {
          eventsCount: recentEvents.length,
          interactionsCount: recentInteractions.length,
          timeRange: this.getTimeRange([...recentEvents])
        }
      };

    } catch (error) {
      console.error('Error in sentiment analysis:', error);
      return {
        userId: context.user.id,
        analysisType: 'sentiment',
        result: 0.0,
        confidence: 0.1,
        analyzedAt: new Date(),
        dataUsed: {
          eventsCount: recentEvents.length,
          interactionsCount: recentInteractions.length,
          timeRange: this.getTimeRange(recentEvents)
        }
      };
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
   */
  private async analyzeActivityPatterns(context: UserContext): Promise<AnalysisResult> {
    const events = context.recentEvents;
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
    const timePreferences = this.analyzeTimePreferences(events);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ–±—ã—Ç–∏–π
    const categoryPreferences = this.analyzeCategoryPreferences(events);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±—é–¥–∂–µ—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å (–ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞)
    const budgetLevel = this.determineBudgetLevel(events);
    
    // –ß–∞—Å—Ç–æ—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    const frequencyScore = this.calculateActivityFrequency(events);

    const result: ActivityPatterns = {
      timePreferences,
      budgetLevel,
      categoryPreferences,
      frequencyScore
    };

    return {
      userId: context.user.id,
      analysisType: 'activity_patterns',
      result,
      confidence: 0.7,
      analyzedAt: new Date(),
      dataUsed: {
        eventsCount: events.length,
        interactionsCount: 0,
        timeRange: this.getTimeRange(events)
      }
    };
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –≥—Ä–∞—Ñ–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏–π (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
   */
  private async analyzeRelationshipGraph(context: UserContext): Promise<AnalysisResult> {
    const events = context.recentEvents;
    
    // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ —É–∑–ª—ã –≥—Ä–∞—Ñ–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏–π
    const nodes = [
      {
        id: 'communication',
        label: '–û–±—â–µ–Ω–∏–µ',
        strength: this.calculateCommunicationStrength(events, context.aiInteractionHistory),
        color: '#4F46E5',
        icon: 'üí¨',
        x: 50,
        y: 30,
        activities: context.aiInteractionHistory.length,
        lastActivity: context.aiInteractionHistory[0]?.createdAt?.toISOString() || '',
        description: '–ö–∞—á–µ—Å—Ç–≤–æ –∏ —á–∞—Å—Ç–æ—Ç–∞ –æ–±—â–µ–Ω–∏—è'
      },
      {
        id: 'shared_time',
        label: '–°–æ–≤–º–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è',
        strength: this.calculateSharedTimeStrength(events),
        color: '#059669',
        icon: '‚è∞',
        x: 80,
        y: 60,
        activities: events.filter(e => e.event_type === 'date' || e.event_type === 'together').length,
        lastActivity: events[0]?.event_date?.toISOString() || '',
        description: '–í—Ä–µ–º—è, –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω–æ–µ –≤–º–µ—Å—Ç–µ'
      },
      {
        id: 'romance',
        label: '–†–æ–º–∞–Ω—Ç–∏–∫–∞',
        strength: this.calculateRomanceStrength(events),
        color: '#DC2626',
        icon: 'üíï',
        x: 20,
        y: 70,
        activities: events.filter(e => e.event_type === 'romantic' || e.event_type === 'date').length,
        lastActivity: events.find(e => e.event_type === 'romantic')?.event_date?.toISOString() || '',
        description: '–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –º–æ–º–µ–Ω—Ç—ã'
      }
    ];

    // –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑–∏ –º–µ–∂–¥—É —É–∑–ª–∞–º–∏
    const connections = [
      {
        from: 'communication',
        to: 'shared_time',
        strength: 70,
        type: 'strong' as const
      },
      {
        from: 'shared_time',
        to: 'romance',
        strength: 60,
        type: 'medium' as const
      },
      {
        from: 'communication',
        to: 'romance',
        strength: 50,
        type: 'medium' as const
      }
    ];

    const overallStrength = Math.round(
      nodes.reduce((sum, node) => sum + node.strength, 0) / nodes.length
    );

    const relationshipGraph: RelationshipGraph = {
      nodes,
      connections,
      overallStrength
    };

    return {
      userId: context.user.id,
      analysisType: 'relationship_graph',
      result: relationshipGraph,
      confidence: 0.6,
      analyzedAt: new Date(),
      dataUsed: {
        eventsCount: events.length,
        interactionsCount: context.aiInteractionHistory.length,
        timeRange: this.getTimeRange(events)
      }
    };
  }

  /**
   * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∞–Ω–∞–ª–∏–∑–∞
   */
  private analyzeTimePreferences(events: EventData[]) {
    const timeDistribution = { morning: 0, afternoon: 0, evening: 0, night: 0 };
    
    events.forEach(event => {
      const hour = new Date(event.event_date).getHours();
      if (hour >= 6 && hour < 12) timeDistribution.morning++;
      else if (hour >= 12 && hour < 17) timeDistribution.afternoon++;
      else if (hour >= 17 && hour < 22) timeDistribution.evening++;
      else timeDistribution.night++;
    });

    const total = events.length || 1;
    return {
      morning: timeDistribution.morning / total,
      afternoon: timeDistribution.afternoon / total,
      evening: timeDistribution.evening / total,
      night: timeDistribution.night / total
    };
  }

  private analyzeCategoryPreferences(events: EventData[]) {
    const categories: Record<string, number> = {};
    
    events.forEach(event => {
      const category = event.event_type || 'other';
      categories[category] = (categories[category] || 0) + 1;
    });

    const total = events.length || 1;
    Object.keys(categories).forEach(key => {
      categories[key] = categories[key] / total;
    });

    return categories;
  }

  private determineBudgetLevel(events: EventData[]): 'low' | 'medium' | 'high' {
    // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ - –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å
    const expensiveEvents = events.filter(e => 
      e.event_type === 'restaurant' || 
      e.event_type === 'travel' || 
      e.event_type === 'gift'
    ).length;

    const ratio = expensiveEvents / (events.length || 1);
    if (ratio > 0.4) return 'high';
    if (ratio > 0.2) return 'medium';
    return 'low';
  }

  private calculateActivityFrequency(events: EventData[]): number {
    if (events.length === 0) return 0;
    
    const now = new Date();
    const thirtyDaysAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);
    const recentEvents = events.filter(e => new Date(e.event_date) > thirtyDaysAgo);
    
    return Math.min(1.0, recentEvents.length / 10); // 10 —Å–æ–±—ã—Ç–∏–π –≤ –º–µ—Å—è—Ü = 100% –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
  }

  private calculateCommunicationStrength(events: EventData[], interactions: any[]): number {
    const recentInteractions = interactions.filter(i => {
      const daysSince = (new Date().getTime() - new Date(i.createdAt).getTime()) / (1000 * 60 * 60 * 24);
      return daysSince <= 7; // –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    });

    const interactionScore = Math.min(100, recentInteractions.length * 10); // –º–∞–∫—Å 100
    const communicationEvents = events.filter(e => 
      e.event_type === 'call' || e.event_type === 'message' || e.event_type === 'talk'
    ).length;
    
    const eventScore = Math.min(50, communicationEvents * 5);
    
    return Math.round(Math.max(30, interactionScore + eventScore));
  }

  private calculateSharedTimeStrength(events: EventData[]): number {
    const sharedEvents = events.filter(e => 
      e.event_type === 'date' || 
      e.event_type === 'together' || 
      e.event_type === 'activity'
    );

    const recentShared = sharedEvents.filter(e => {
      const daysSince = (new Date().getTime() - new Date(e.event_date).getTime()) / (1000 * 60 * 60 * 24);
      return daysSince <= 14; // –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –Ω–µ–¥–µ–ª–∏
    });

    return Math.round(Math.max(20, Math.min(100, recentShared.length * 15)));
  }

  private calculateRomanceStrength(events: EventData[]): number {
    const romanticEvents = events.filter(e => 
      e.event_type === 'romantic' || 
      e.event_type === 'date' || 
      e.event_type === 'gift' ||
      e.title.toLowerCase().includes('—Ä–æ–º–∞–Ω—Ç–∏–∫') ||
      e.title.toLowerCase().includes('—Å–≤–∏–¥–∞–Ω–∏–µ')
    );

    const recentRomantic = romanticEvents.filter(e => {
      const daysSince = (new Date().getTime() - new Date(e.event_date).getTime()) / (1000 * 60 * 60 * 24);
      return daysSince <= 21; // –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –Ω–µ–¥–µ–ª–∏
    });

    return Math.round(Math.max(15, Math.min(100, recentRomantic.length * 20)));
  }

  /**
   * –£—Ç–∏–ª–∏—Ç—ã
   */
  private calculateOverallConfidence(results: AnalysisResult[]): number {
    if (results.length === 0) return 0;
    return results.reduce((sum, r) => sum + r.confidence, 0) / results.length;
  }

  private getTimeRange(events: EventData[]) {
    if (events.length === 0) {
      const now = new Date();
      return { from: now, to: now };
    }

    const dates = events.map(e => new Date(e.event_date));
    return {
      from: new Date(Math.min(...dates.map(d => d.getTime()))),
      to: new Date(Math.max(...dates.map(d => d.getTime())))
    };
  }

  private getEarliestDate(context: UserContext): Date {
    const eventDates = context.recentEvents.map(e => new Date(e.event_date));
    const interactionDates = context.aiInteractionHistory.map(i => new Date(i.createdAt));
    
    const allDates = [...eventDates, ...interactionDates];
    if (allDates.length === 0) return new Date();
    
    return new Date(Math.min(...allDates.map(d => d.getTime())));
  }

  /**
   * –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
   */
  async scheduleBackgroundAnalysis(userId: string): Promise<void> {
    console.log(`üìÖ Scheduling background analysis for user ${userId}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–µ–Ω –ª–∏ –∞–Ω–∞–ª–∏–∑
    const profile = await RelationshipProfile.findOne({ where: { userId } });
    if (!profile || profile.needsAnalysis()) {
      // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
      setImmediate(() => {
        this.analyzeUser({ userId })
          .then(() => console.log(`‚úÖ Background analysis completed for user ${userId}`))
          .catch(error => console.error(`‚ùå Background analysis failed for user ${userId}:`, error));
      });
    }
  }
}

export default new AnalysisEngine();
