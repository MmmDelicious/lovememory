const TelegramBot = require('node-telegram-bot-api');
const cron = require('node-cron');
const { Op } = require('sequelize');
const { Event, User, Pair } = require('../models'); // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ index
require('dotenv').config();

const token = process.env.TELEGRAM_BOT_TOKEN;

let bot;

const startBot = () => {
  if (!token) {
    console.warn('TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –Ω–µ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω.');
    return;
  }

  bot = new TelegramBot(token, { polling: true });

  bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    bot.sendMessage(
      chatId,
      `–ü—Ä–∏–≤–µ—Ç! üëã\n\n–í–∞—à ID –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –∞–∫–∫–∞—É–Ω—Ç—É LoveMemory:\n\n\`${chatId}\`\n\n–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç ID –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞ —Å–∞–π—Ç–µ.`,
      { parse_mode: 'Markdown' }
    );
  });

  bot.on('polling_error', (error) => {
    console.error('!!! –û—à–∏–±–∫–∞ –æ–ø—Ä–æ—Å–∞ Telegram:', error.code);
  });
  
  console.log('–¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω.');
};

const sendMessage = (chatId, message) => {
  if (!bot) {
    console.error('–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.');
    return;
  }
  try {
    bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
  } catch(error) {
    console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç ${chatId}:`, error.message);
  }
};

const sendDailyReminders = async () => {
  console.log('–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–¥–∞—á–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');
  const today = new Date();
  const tomorrow = new Date(today);
  tomorrow.setDate(tomorrow.getDate() + 1);

  const startOfDay = new Date(today.setHours(0, 0, 0, 0));
  const endOfDay = new Date(tomorrow.setHours(0, 0, 0, 0));

  try {
    const eventsToday = await Event.findAll({
      where: {
        event_date: {
          [Op.gte]: startOfDay,
          [Op.lt]: endOfDay,
        },
      },
      include: [{ model: User, attributes: ['id', 'telegram_chat_id'] }]
    });

    if (eventsToday.length === 0) {
        console.log('–ù–∞ —Å–µ–≥–æ–¥–Ω—è —Å–æ–±—ã—Ç–∏–π –Ω–µ—Ç.');
        return;
    }

    const notifications = new Map();

    for (const event of eventsToday) {
      const user = event.User;
      if (user && user.telegram_chat_id) {
        if (!notifications.has(user.telegram_chat_id)) {
          notifications.set(user.telegram_chat_id, []);
        }
        notifications.get(user.telegram_chat_id).push(event.title);
      }
    }

    for (const [chatId, titles] of notifications.entries()) {
      const message = `*–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è* üîî\n\n–°–µ–≥–æ–¥–Ω—è —É –≤–∞—Å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ:\n- ${titles.join('\n- ')}`;
      sendMessage(chatId, message);
    }
    console.log(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${notifications.size}.`);

  } catch (error) {
    console.error('!!! –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
  }
};

const startCronJobs = () => {
  // –ó–∞–ø—É—Å–∫–∞—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00 —É—Ç—Ä–∞
  cron.schedule('0 9 * * *', sendDailyReminders, {
    scheduled: true,
    timezone: "Europe/Moscow"
  });
  console.log('–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á (cron) –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω.');
};

module.exports = { startBot, sendMessage, startCronJobs };