const clickhouseService = require('./clickhouse.service');
const { Interest } = require('../models');

class MLService {
  
  constructor() {
    // –ö–µ—à –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
    this.interestCategoryCache = new Map();
    this.lastCacheUpdate = null;
    this.cacheUpdateInterval = 1000 * 60 * 60; // 1 —á–∞—Å
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
   */
  async updateUserEmbeddingRealtime(userId) {
    try {
      console.log(`üß† Updating embedding for user ${userId}...`);
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const preferences = await clickhouseService.getUserPreferences(userId);
      
      if (preferences.length === 0) {
        console.log(`‚ÑπÔ∏è No preferences found for user ${userId}`);
        return null;
      }
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –∏–∑ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
      const embedding = await this.generateEmbeddingFromPreferences(preferences);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ ClickHouse
      await clickhouseService.updateUserEmbedding(userId, embedding, 'v1.0');
      
      console.log(`‚úÖ Updated embedding for user ${userId} (${preferences.length} preferences)`);
      return embedding;
      
    } catch (error) {
      console.error(`‚ùå Failed to update embedding for user ${userId}:`, error);
      throw error;
    }
  }
  
  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ –∏–∑ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async generateEmbeddingFromPreferences(preferences) {
    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à –∫–∞—Ç–µ–≥–æ—Ä–∏–π –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      await this.updateInterestCategoryCache();
      
      // –°–æ–∑–¥–∞–µ–º 128-–º–µ—Ä–Ω—ã–π –≤–µ–∫—Ç–æ—Ä (–º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –¥–ª—è –ª—É—á—à–µ–π —Ç–æ—á–Ω–æ—Å—Ç–∏)
      const embeddingSize = 128;
      const embedding = new Array(embeddingSize).fill(0);
      
      // –í–µ—Å–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
      const categoryWeights = this.getCategoryWeights();
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ
      preferences.forEach(pref => {
        const category = this.interestCategoryCache.get(pref.interest_id) || 'other';
        const categoryWeight = categoryWeights[category] || 1.0;
        
        // –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≤ –≤–µ–∫—Ç–æ—Ä–µ
        const indices = this.getEmbeddingIndices(pref.interest_id, category, embeddingSize);
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∏–ª—É —Å–∏–≥–Ω–∞–ª–∞
        const signal = pref.current_rating * pref.confidence * categoryWeight;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ —ç–º–±–µ–¥–¥–∏–Ω–≥
        indices.forEach(index => {
          embedding[index] += signal;
        });
      });
      
      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–µ–∫—Ç–æ—Ä
      const normalizedEmbedding = this.normalizeVector(embedding);
      
      // –î–æ–±–∞–≤–ª—è–µ–º —à—É–º –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è
      const noisyEmbedding = this.addNoise(normalizedEmbedding, 0.01);
      
      return noisyEmbedding;
      
    } catch (error) {
      console.error('‚ùå Failed to generate embedding:', error);
      throw error;
    }
  }
  
  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ—à–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
   */
  async updateInterestCategoryCache() {
    const now = Date.now();
    if (this.lastCacheUpdate && (now - this.lastCacheUpdate) < this.cacheUpdateInterval) {
      return; // –ö–µ—à –µ—â–µ –∞–∫—Ç—É–∞–ª–µ–Ω
    }
    
    try {
      const interests = await Interest.findAll({
        where: { is_active: true },
        attributes: ['id', 'category']
      });
      
      this.interestCategoryCache.clear();
      interests.forEach(interest => {
        this.interestCategoryCache.set(interest.id, interest.category);
      });
      
      this.lastCacheUpdate = now;
      console.log(`‚úÖ Updated interest category cache (${interests.length} interests)`);
      
    } catch (error) {
      console.error('‚ùå Failed to update interest category cache:', error);
    }
  }
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤–µ—Å–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
   */
  getCategoryWeights() {
    return {
      'food': 1.2,           // –ï–¥–∞ - –≤–∞–∂–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
      'travel': 1.3,         // –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è - –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è –ø–∞—Ä
      'sport': 1.1,          // –°–ø–æ—Ä—Ç
      'music': 1.2,          // –ú—É–∑—ã–∫–∞
      'cinema': 1.1,         // –ö–∏–Ω–æ
      'hobby': 1.0,          // –•–æ–±–±–∏
      'art': 1.0,            // –ò—Å–∫—É—Å—Å—Ç–≤–æ
      'books': 1.0,          // –ö–Ω–∏–≥–∏
      'games': 0.9,          // –ò–≥—Ä—ã - –º–µ–Ω–µ–µ –≤–∞–∂–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      'nature': 1.2,         // –ü—Ä–∏—Ä–æ–¥–∞
      'technology': 0.8,     // –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
      'fashion': 0.9,        // –ú–æ–¥–∞
      'cooking': 1.2,        // –ì–æ—Ç–æ–≤–∫–∞
      'fitness': 1.1,        // –§–∏—Ç–Ω–µ—Å
      'photography': 1.0,    // –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è
      'dancing': 1.3,        // –¢–∞–Ω—Ü—ã - –æ—Ç–ª–∏—á–Ω–æ –¥–ª—è –ø–∞—Ä
      'shopping': 0.8,       // –®–æ–ø–ø–∏–Ω–≥
      'animals': 1.1,        // –ñ–∏–≤–æ—Ç–Ω—ã–µ
      'cars': 0.9,           // –ú–∞—à–∏–Ω—ã
      'crafts': 1.0,         // –†—É–∫–æ–¥–µ–ª–∏–µ
      'education': 1.0,      // –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
      'volunteering': 1.2,   // –í–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–æ
      'other': 0.7           // –û—Å—Ç–∞–ª—å–Ω–æ–µ
    };
  }
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω–¥–µ–∫—Å—ã –≤ —ç–º–±–µ–¥–¥–∏–Ω–≥–µ –¥–ª—è –∏–Ω—Ç–µ—Ä–µ—Å–∞
   */
  getEmbeddingIndices(interestId, category, embeddingSize) {
    const indices = [];
    
    // –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω–¥–µ–∫—Å –ø–æ —Ö–µ—à—É ID –∏–Ω—Ç–µ—Ä–µ—Å–∞
    const primaryIndex = this.hashToIndex(interestId, embeddingSize);
    indices.push(primaryIndex);
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const categoryIndex = this.hashToIndex(category, embeddingSize);
    indices.push(categoryIndex);
    
    // –°–º–µ—à–∞–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å
    const mixedIndex = this.hashToIndex(interestId + category, embeddingSize);
    indices.push(mixedIndex);
    
    return indices;
  }
  
  /**
   * –•–µ—à —Å—Ç—Ä–æ–∫–∏ –≤ –∏–Ω–¥–µ–∫—Å –º–∞—Å—Å–∏–≤–∞
   */
  hashToIndex(str, maxIndex) {
    let hash = 0;
    for (let i = 0; i < str.length; i++) {
      const char = str.charCodeAt(i);
      hash = ((hash << 5) - hash) + char;
      hash = hash & hash; // Convert to 32bit integer
    }
    return Math.abs(hash) % maxIndex;
  }
  
  /**
   * –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–∞
   */
  normalizeVector(vector) {
    const magnitude = Math.sqrt(vector.reduce((sum, val) => sum + val * val, 0));
    if (magnitude === 0) {
      return vector; // –ò–∑–±–µ–≥–∞–µ–º –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
    }
    return vector.map(val => val / magnitude);
  }
  
  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —à—É–º–∞ –∫ –≤–µ–∫—Ç–æ—Ä—É
   */
  addNoise(vector, noiseLevel = 0.01) {
    return vector.map(val => {
      const noise = (Math.random() - 0.5) * 2 * noiseLevel;
      return val + noise;
    });
  }
  
  /**
   * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ö–æ–¥—Å—Ç–≤–∞ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
   */
  async calculateUserSimilarity(userId1, userId2) {
    try {
      const [embedding1, embedding2] = await Promise.all([
        clickhouseService.getUserEmbedding(userId1),
        clickhouseService.getUserEmbedding(userId2)
      ]);
      
      if (!embedding1 || !embedding2) {
        return null;
      }
      
      const similarity = clickhouseService.cosineSimilarity(
        embedding1.embedding_vector,
        embedding2.embedding_vector
      );
      
      return {
        similarity,
        user1_model: embedding1.model_version,
        user2_model: embedding2.model_version,
        calculated_at: new Date()
      };
      
    } catch (error) {
      console.error(`‚ùå Failed to calculate similarity between ${userId1} and ${userId2}:`, error);
      return null;
    }
  }
  
  /**
   * –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Ö–æ–∂–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  async recommendInterests(userId, limit = 10) {
    try {
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Ö–æ–∂–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const similarUsers = await clickhouseService.findSimilarUsers(userId, 20);
      
      if (similarUsers.length === 0) {
        return [];
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–µ—Å—ã –ø–æ—Ö–æ–∂–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const interestScores = new Map();
      
      for (const similarUser of similarUsers.slice(0, 5)) { // –ë–µ—Ä–µ–º —Ç–æ–ø 5
        const preferences = await clickhouseService.getUserPreferences(similarUser.user_id);
        
        preferences.forEach(pref => {
          const currentScore = interestScores.get(pref.interest_id) || 0;
          const weightedScore = pref.current_rating * similarUser.similarity;
          interestScores.set(pref.interest_id, currentScore + weightedScore);
        });
      }
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
      const userInterests = await clickhouseService.getUserPreferences(userId);
      const userInterestIds = new Set(userInterests.map(p => p.interest_id));
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
      const recommendations = Array.from(interestScores.entries())
        .filter(([interestId]) => !userInterestIds.has(interestId))
        .sort(([, scoreA], [, scoreB]) => scoreB - scoreA)
        .slice(0, limit)
        .map(([interestId, score]) => ({
          interest_id: interestId,
          predicted_rating: score,
          recommendation_type: 'collaborative_filtering'
        }));
      
      return recommendations;
      
    } catch (error) {
      console.error(`‚ùå Failed to recommend interests for user ${userId}:`, error);
      return [];
    }
  }
  
  /**
   * Batch –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  async batchUpdateEmbeddings(userIds) {
    console.log(`üß† Starting batch embedding update for ${userIds.length} users...`);
    
    let updated = 0;
    let failed = 0;
    
    for (const userId of userIds) {
      try {
        await this.updateUserEmbeddingRealtime(userId);
        updated++;
        
        // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
        await new Promise(resolve => setTimeout(resolve, 100));
        
      } catch (error) {
        console.error(`‚ùå Failed to update embedding for user ${userId}:`, error);
        failed++;
      }
    }
    
    console.log(`‚úÖ Batch embedding update completed: ${updated} updated, ${failed} failed`);
    return { updated, failed };
  }
  
  /**
   * –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
   */
  async analyzeEmbeddingQuality() {
    try {
      const { clickhouse } = require('../config/clickhouse');
      
      const result = await clickhouse.query({
        query: `
          SELECT 
            count() as total_embeddings,
            uniq(user_id) as unique_users,
            avg(arraySum(x -> x * x, embedding_vector)) as avg_magnitude,
            count() / uniq(user_id) as avg_versions_per_user
          FROM user_embeddings
        `,
        format: 'JSONEachRow'
      });
      
      const stats = await result.json();
      
      if (stats.length > 0) {
        console.log('üìä Embedding Quality Analysis:');
        console.log(`   Total embeddings: ${stats[0].total_embeddings}`);
        console.log(`   Unique users: ${stats[0].unique_users}`);
        console.log(`   Average magnitude: ${stats[0].avg_magnitude?.toFixed(4)}`);
        console.log(`   Avg versions per user: ${stats[0].avg_versions_per_user?.toFixed(2)}`);
      }
      
      return stats[0] || null;
      
    } catch (error) {
      console.error('‚ùå Failed to analyze embedding quality:', error);
      return null;
    }
  }
}

module.exports = new MLService();

