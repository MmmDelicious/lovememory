const { Insight, Event, UserInterest, Interest, Pair, User, ActivityTracker } = require('../models');
const { Op } = require('sequelize');

class InsightGeneratorService {
  
  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Å–∞–π—Ç—ã –¥–ª—è –ø–∞—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∞–≤–∏–ª
   */
  async generateInsightsForPair(pairId) {
    const insights = [];
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä—ã
      const pair = await Pair.findByPk(pairId, {
        include: [
          { model: User, as: 'Requester' },
          { model: User, as: 'Receiver' }
        ]
      });
      
      if (!pair) {
        throw new Error('Pair not found');
      }
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∏–Ω—Å–∞–π—Ç–æ–≤
      const compatibilityInsights = await this.generateCompatibilityInsights(pair);
      const activityInsights = await this.generateActivityPatternInsights(pair);
      const recommendationInsights = await this.generateRecommendationInsights(pair);
      
      insights.push(...compatibilityInsights);
      insights.push(...activityInsights);
      insights.push(...recommendationInsights);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã (–∏–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
      const savedInsights = [];
      for (const insight of insights) {
        const existing = await this.checkExistingInsight(pairId, insight);
        if (!existing) {
          const saved = await Insight.create({
            pair_id: pairId,
            insight_type: insight.type,
            summary: insight.summary,
            details: insight.details,
            model_version: 'rule_based_v1.0'
          });
          savedInsights.push(saved);
        }
      }
      
      return savedInsights;
      
    } catch (error) {
      console.error('Error generating insights:', error);
      throw error;
    }
  }
  
  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Å–∞–π—Ç—ã –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—â–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
   */
  async generateCompatibilityInsights(pair) {
    const insights = [];
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–µ—Å—ã –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const user1Interests = await UserInterest.findAll({
        where: { user_id: pair.user1_id },
        include: [{ model: Interest, as: 'Interest' }]
      });
      
      const user2Interests = await UserInterest.findAll({
        where: { user_id: pair.user2_id },
        include: [{ model: Interest, as: 'Interest' }]
      });
      
      // –ù–∞—Ö–æ–¥–∏–º –æ–±—â–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã
      const commonInterests = [];
      user1Interests.forEach(u1Interest => {
        const match = user2Interests.find(u2Interest => 
          u2Interest.interest_id === u1Interest.interest_id &&
          u1Interest.preference !== 'dislike' &&
          u2Interest.preference !== 'dislike'
        );
        if (match) {
          commonInterests.push({
            interest: u1Interest.Interest,
            user1_intensity: u1Interest.intensity,
            user2_intensity: match.intensity,
            compatibility_score: Math.min(u1Interest.intensity, match.intensity)
          });
        }
      });
      
      if (commonInterests.length >= 3) {
        const topInterests = commonInterests
          .sort((a, b) => b.compatibility_score - a.compatibility_score)
          .slice(0, 3);
        
        const avgScore = topInterests.reduce((sum, i) => sum + i.compatibility_score, 0) / topInterests.length;
        
        insights.push({
          type: 'compatibility',
          summary: `–£ –≤–∞—Å ${commonInterests.length} –æ–±—â–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–∞! –£—Ä–æ–≤–µ–Ω—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: ${Math.round(avgScore * 10)}%`,
          details: {
            common_interests_count: commonInterests.length,
            compatibility_score: avgScore,
            top_common_interests: topInterests.map(ci => ({
              name: ci.interest.name,
              emoji: ci.interest.emoji,
              compatibility_score: ci.compatibility_score
            })),
            recommendation: this.generateCompatibilityRecommendation(topInterests)
          }
        });
      }
      
      // –ò—â–µ–º –∏–Ω—Ç–µ—Ä–µ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ–¥–∏–Ω –ª—é–±–∏—Ç, –∞ –¥—Ä—É–≥–æ–π –Ω–µ –∑–Ω–∞–µ—Ç
      const potentialNewInterests = [];
      user1Interests.forEach(u1Interest => {
        if (u1Interest.preference === 'love') {
          const hasUser2 = user2Interests.find(u2 => u2.interest_id === u1Interest.interest_id);
          if (!hasUser2) {
            potentialNewInterests.push({
              interest: u1Interest.Interest,
              lover: 'user1',
              intensity: u1Interest.intensity
            });
          }
        }
      });
      
      user2Interests.forEach(u2Interest => {
        if (u2Interest.preference === 'love') {
          const hasUser1 = user1Interests.find(u1 => u1.interest_id === u2Interest.interest_id);
          if (!hasUser1) {
            potentialNewInterests.push({
              interest: u2Interest.Interest,
              lover: 'user2',
              intensity: u2Interest.intensity
            });
          }
        }
      });
      
      if (potentialNewInterests.length > 0) {
        const topSuggestion = potentialNewInterests
          .sort((a, b) => b.intensity - a.intensity)[0];
        
        insights.push({
          type: 'recommendation',
          summary: `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ ${topSuggestion.interest.name} –≤–º–µ—Å—Ç–µ! ${topSuggestion.interest.emoji}`,
          details: {
            suggested_interest: {
              name: topSuggestion.interest.name,
              emoji: topSuggestion.interest.emoji,
              category: topSuggestion.interest.category
            },
            reason: '–û–¥–∏–Ω –∏–∑ –≤–∞—Å –æ—á–µ–Ω—å –ª—é–±–∏—Ç —ç—Ç–æ, –∞ –≤—Ç–æ—Ä–æ–π –µ—â–µ –Ω–µ –ø—Ä–æ–±–æ–≤–∞–ª',
            lover: topSuggestion.lover,
            intensity: topSuggestion.intensity,
            triggers: { type: 'unshared_love_interest' }
          }
        });
      }
      
    } catch (error) {
      console.error('Error generating compatibility insights:', error);
    }
    
    return insights;
  }
  
  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Å–∞–π—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
   */
  async generateActivityPatternInsights(pair) {
    const insights = [];
    
    try {
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–µ–¥–∞–≤–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
      const recentEvents = await Event.findAll({
        where: {
          pair_id: pair.id,
          event_date: {
            [Op.gte]: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000) // –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
          }
        },
        order: [['event_date', 'DESC']]
      });
      
      // –ü–∞—Ç—Ç–µ—Ä–Ω: –Ω–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
      if (recentEvents.length < 3) {
        const daysSinceLastEvent = recentEvents.length > 0 
          ? Math.floor((Date.now() - new Date(recentEvents[0].event_date).getTime()) / (24 * 60 * 60 * 1000))
          : 30;
        
        insights.push({
          type: 'activity_pattern',
          summary: `–ü–æ—Ä–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —á—Ç–æ-—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ–µ! –í–∞—à–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–≤–∏–¥–∞–Ω–∏–µ –±—ã–ª–æ ${daysSinceLastEvent} –¥–Ω–µ–π –Ω–∞–∑–∞–¥`,
          details: {
            pattern: 'low_activity',
            recent_events_count: recentEvents.length,
            days_since_last_event: daysSinceLastEvent,
            recommendation: '–ó–∞–ø–ª–∞–Ω–∏—Ä—É–π—Ç–µ —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ —Å–≤–∏–¥–∞–Ω–∏–µ –Ω–∞ —ç—Ç–∏ –≤—ã—Ö–æ–¥–Ω—ã–µ',
            triggers: { type: 'low_activity', threshold: 3, period_days: 30 }
          }
        });
      }
      
      // –ü–∞—Ç—Ç–µ—Ä–Ω: –º–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏–π –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞
      const eventTypeDistribution = recentEvents.reduce((acc, event) => {
        acc[event.event_type] = (acc[event.event_type] || 0) + 1;
        return acc;
      }, {});
      
      const dominantType = Object.entries(eventTypeDistribution)
        .sort(([,a], [,b]) => b - a)[0];
      
      if (dominantType && dominantType[1] >= 3 && recentEvents.length >= 5) {
        const typeLabels = {
          date: '—Å–≤–∏–¥–∞–Ω–∏–π',
          memory: '–≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π',
          plan: '–ø–ª–∞–Ω–æ–≤',
          travel: '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π'
        };
        
        insights.push({
          type: 'activity_pattern',
          summary: `–í—ã —á–∞—Å—Ç–æ —Å–æ–∑–¥–∞–µ—Ç–µ ${typeLabels[dominantType[0]] || dominantType[0]}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—Ç—å!`,
          details: {
            pattern: 'repetitive_type',
            dominant_type: dominantType[0],
            dominant_count: dominantType[1],
            total_events: recentEvents.length,
            suggestion: '–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —Ç–∏–ø—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –¥–ª—è –±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è',
            triggers: { type: 'repetitive_event_type', threshold: 0.6 }
          }
        });
      }
      
      // –ü–∞—Ç—Ç–µ—Ä–Ω: —Ö–æ—Ä–æ—à–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
      if (recentEvents.length >= 8) {
        const aiEvents = recentEvents.filter(e => e.source === 'AI_SUGGESTED').length;
        const userEvents = recentEvents.filter(e => e.source === 'USER_CREATED').length;
        
        insights.push({
          type: 'activity_pattern',
          summary: `–û—Ç–ª–∏—á–Ω–æ! –£ –≤–∞—Å ${recentEvents.length} —Å–æ–±—ã—Ç–∏–π –∑–∞ –º–µ—Å—è—Ü. –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! üéâ`,
          details: {
            pattern: 'high_activity',
            total_events: recentEvents.length,
            ai_suggested: aiEvents,
            user_created: userEvents,
            balance_score: Math.abs(aiEvents - userEvents) <= 2 ? 'balanced' : 'unbalanced',
            encouragement: '–í—ã –æ—Ç–ª–∏—á–Ω–æ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –≤—Ä–µ–º—è –≤–º–µ—Å—Ç–µ!',
            triggers: { type: 'high_activity', threshold: 8, period_days: 30 }
          }
        });
      }
      
    } catch (error) {
      console.error('Error generating activity pattern insights:', error);
    }
    
    return insights;
  }
  
  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Å–∞–π—Ç—ã-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –∏ —Å–æ–±—ã—Ç–∏–π
   */
  async generateRecommendationInsights(pair) {
    const insights = [];
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö
      const user1Interests = await UserInterest.findAll({
        where: { 
          user_id: pair.user1_id,
          preference: ['love', 'like']
        },
        include: [{ model: Interest, as: 'Interest' }]
      });
      
      const user2Interests = await UserInterest.findAll({
        where: { 
          user_id: pair.user2_id,
          preference: ['love', 'like']
        },
        include: [{ model: Interest, as: 'Interest' }]
      });
      
      const recentEvents = await Event.findAll({
        where: {
          pair_id: pair.id,
          event_date: {
            [Op.gte]: new Date(Date.now() - 14 * 24 * 60 * 60 * 1000) // –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –Ω–µ–¥–µ–ª–∏
          }
        }
      });
      
      // –ò—â–µ–º –∏–Ω—Ç–µ—Ä–µ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –≤ —Å–æ–±—ã—Ç–∏—è—Ö
      const commonInterests = [];
      user1Interests.forEach(u1Interest => {
        const match = user2Interests.find(u2Interest => 
          u2Interest.interest_id === u1Interest.interest_id
        );
        if (match) {
          commonInterests.push({
            interest: u1Interest.Interest,
            avg_intensity: (u1Interest.intensity + match.intensity) / 2
          });
        }
      });
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–µ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —É–ø–æ–º–∏–Ω–∞–ª–∏—Å—å –≤ –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö
      const unusedInterests = commonInterests.filter(ci => {
        const mentioned = recentEvents.some(event => 
          event.title.toLowerCase().includes(ci.interest.name.toLowerCase()) ||
          event.description?.toLowerCase().includes(ci.interest.name.toLowerCase())
        );
        return !mentioned;
      });
      
      if (unusedInterests.length > 0) {
        const bestUnused = unusedInterests
          .sort((a, b) => b.avg_intensity - a.avg_intensity)[0];
        
        const recommendations = this.generateInterestBasedRecommendations(bestUnused.interest);
        
        insights.push({
          type: 'recommendation',
          summary: `–î–∞–≤–Ω–æ –Ω–µ –∑–∞–Ω–∏–º–∞–ª–∏—Å—å ${bestUnused.interest.name}! ${bestUnused.interest.emoji}`,
          details: {
            unused_interest: {
              name: bestUnused.interest.name,
              emoji: bestUnused.interest.emoji,
              category: bestUnused.interest.category
            },
            avg_intensity: bestUnused.avg_intensity,
            specific_recommendations: recommendations,
            triggers: { type: 'unused_common_interest', days_without: 14 }
          }
        });
      }
      
      // –°–µ–∑–æ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
      const seasonalInsight = this.generateSeasonalRecommendation(commonInterests);
      if (seasonalInsight) {
        insights.push(seasonalInsight);
      }
      
    } catch (error) {
      console.error('Error generating recommendation insights:', error);
    }
    
    return insights;
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ—Ö–æ–∂–∏–π –∏–Ω—Å–∞–π—Ç
   */
  async checkExistingInsight(pairId, insight) {
    const oneDayAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);
    
    return await Insight.findOne({
      where: {
        pair_id: pairId,
        insight_type: insight.type,
        generated_at: { [Op.gte]: oneDayAgo },
        summary: insight.summary
      }
    });
  }
  
  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
   */
  generateCompatibilityRecommendation(commonInterests) {
    const interest = commonInterests[0].interest;
    const recommendations = {
      '–†–µ—Å—Ç–æ—Ä–∞–Ω—ã': '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–æ–≤—É—é –∫—É—Ö–Ω—é –≤–º–µ—Å—Ç–µ!',
      '–ö–∏–Ω–æ': '–£—Å—Ç—Ä–æ–π—Ç–µ –¥–æ–º–∞—à–Ω–∏–π –∫–∏–Ω–æ–≤–µ—á–µ—Ä –∏–ª–∏ —Å—Ö–æ–¥–∏—Ç–µ –≤ –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä',
      '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è': '–ó–∞–ø–ª–∞–Ω–∏—Ä—É–π—Ç–µ —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –ø–æ–µ–∑–¥–∫—É –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ',
      '–°–ø–æ—Ä—Ç': '–ó–∞–π–º–∏—Ç–µ—Å—å –ø–∞—Ä–Ω—ã–º —Å–ø–æ—Ä—Ç–æ–º –∏–ª–∏ —Å—Ö–æ–¥–∏—Ç–µ –Ω–∞ –º–∞—Ç—á',
      '–ú—É–∑—ã–∫–∞': '–°—Ö–æ–¥–∏—Ç–µ –Ω–∞ –∫–æ–Ω—Ü–µ—Ä—Ç –∏–ª–∏ —É—Å—Ç—Ä–æ–π—Ç–µ —Ç–∞–Ω—Ü–µ–≤–∞–ª—å–Ω—ã–π –≤–µ—á–µ—Ä'
    };
    
    return recommendations[interest.name] || `–ü—Ä–æ–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è, –∑–∞–Ω–∏–º–∞—è—Å—å ${interest.name.toLowerCase()}`;
  }
  
  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ç–µ—Ä–µ—Å–∞
   */
  generateInterestBasedRecommendations(interest) {
    const recommendations = {
      '–†–µ—Å—Ç–æ—Ä–∞–Ω—ã': ['–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–æ–≤—É—é –∫—É—Ö–Ω—é', '–£—Å—Ç—Ä–æ–π—Ç–µ —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —É–∂–∏–Ω', '–ù–∞–π–¥–∏—Ç–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω —Å –ø–∞–Ω–æ—Ä–∞–º–Ω—ã–º –≤–∏–¥–æ–º'],
      '–ö–∏–Ω–æ': ['–î–æ–º–∞—à–Ω–∏–π –∫–∏–Ω–æ–≤–µ—á–µ—Ä', '–°—Ö–æ–¥–∏—Ç–µ –≤ –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä IMAX', '–§–µ—Å—Ç–∏–≤–∞–ª—å –∫–æ—Ä–æ—Ç–∫–æ–º–µ—Ç—Ä–∞–∂–µ–∫'],
      '–ú—É–∑—ã–∫–∞': ['–ö–æ–Ω—Ü–µ—Ä—Ç –ª—é–±–∏–º–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è', '–î–∂–∞–∑–æ–≤—ã–π –∫–ª—É–±', '–ö–∞—Ä–∞–æ–∫–µ-–≤–µ—á–µ—Ä'],
      '–°–ø–æ—Ä—Ç': ['–ò–≥—Ä–∞ –≤ –±–æ—É–ª–∏–Ω–≥', '–ö–∞—Ç–∞–Ω–∏–µ –Ω–∞ –∫–æ–Ω—å–∫–∞—Ö', '–ú–∏–Ω–∏-–≥–æ–ª—å—Ñ'],
      '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è': ['–û–¥–Ω–æ–¥–Ω–µ–≤–Ω–∞—è –ø–æ–µ–∑–¥–∫–∞', '–ü–∏–∫–Ω–∏–∫ –≤ –ø–∞—Ä–∫–µ', '–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–∞–π–æ–Ω–∞ –≥–æ—Ä–æ–¥–∞']
    };
    
    return recommendations[interest.name] || [`–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å ${interest.name.toLowerCase()}`];
  }
  
  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–µ–∑–æ–Ω–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
   */
  generateSeasonalRecommendation(commonInterests) {
    const now = new Date();
    const month = now.getMonth(); // 0-11
    
    let season, activities;
    
    if (month >= 2 && month <= 4) { // –í–µ—Å–Ω–∞
      season = '–≤–µ—Å–µ–Ω–Ω–∏–µ';
      activities = ['–ü—Ä–æ–≥—É–ª–∫–∞ –≤ –ø–∞—Ä–∫–µ', '–ü–∏–∫–Ω–∏–∫ –Ω–∞ –ø—Ä–∏—Ä–æ–¥–µ', '–§–æ—Ç–æ—Å–µ—Å—Å–∏—è —Å —Ü–≤–µ—Ç–∞–º–∏'];
    } else if (month >= 5 && month <= 7) { // –õ–µ—Ç–æ
      season = '–ª–µ—Ç–Ω–∏–µ';
      activities = ['–ü–ª—è–∂–Ω—ã–π –æ—Ç–¥—ã—Ö', '–í–µ–ª–æ–ø—Ä–æ–≥—É–ª–∫–∞', '–ö–∞—Ñ–µ —Å —Ç–µ—Ä—Ä–∞—Å–æ–π'];
    } else if (month >= 8 && month <= 10) { // –û—Å–µ–Ω—å
      season = '–æ—Å–µ–Ω–Ω–∏–µ';
      activities = ['–ü—Ä–æ–≥—É–ª–∫–∞ –ø–æ –∑–æ–ª–æ—Ç—ã–º –ª–∏—Å—Ç—å—è–º', '–£—é—Ç–Ω–æ–µ –∫–∞—Ñ–µ', '–§–æ—Ç–æ—Å–µ—Å—Å–∏—è –≤ –ø–∞—Ä–∫–µ'];
    } else { // –ó–∏–º–∞
      season = '–∑–∏–º–Ω–∏–µ';
      activities = ['–ö–∞—Ç–æ–∫', '–ì–æ—Ä—è—á–∏–π —à–æ–∫–æ–ª–∞–¥ –≤ –∫–∞—Ñ–µ', '–ù–æ–≤–æ–≥–æ–¥–Ω–∏–µ —è—Ä–º–∞—Ä–∫–∏'];
    }
    
    return {
      type: 'recommendation',
      summary: `–í—Ä–µ–º—è –¥–ª—è ${season} –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π! ‚ùÑÔ∏èüå∏‚òÄÔ∏èüçÇ`,
      details: {
        season,
        seasonal_activities: activities,
        recommendation: `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–µ–∑–æ–Ω –ø–æ –º–∞–∫—Å–∏–º—É–º—É!`,
        triggers: { type: 'seasonal_recommendation', month, season }
      }
    };
  }
}

module.exports = new InsightGeneratorService();
