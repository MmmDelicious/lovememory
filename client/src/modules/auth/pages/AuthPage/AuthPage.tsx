import React, { useState } from 'react';
import { useAuthActions, useAuthPageData } from '../../../../store/hooks';
import { Link, useNavigate, useLocation } from 'react-router-dom';
import { useInteractiveMascot } from '../../../../shared/mascot/hooks/useInteractiveMascot';
import { useAuthForm } from '../../hooks/useAuthForm';
import Button from '../../../../shared/components/Button/Button';
import StaticMascot from '../../../../shared/mascot/StaticMascot/StaticMascot';
import GenderSelector from '../../../users/components/GenderSelector/GenderSelector';
import greetAnimation from '../../../../shared/assets/greet.json';
import styles from './AuthPage.module.css';

type AuthMode = 'login' | 'register';

const mascotConfigs = {
  login: {
    initialMessage: '–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –í–∞—à–∏ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –∂–¥—É—Ç.',
    phrases: { 
      error: ['–≠–π, —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ email –∏ –ø–∞—Ä–æ–ª—å.', '–û–π-–æ–π! –ö–∞–∂–µ—Ç—Å—è, –¥–∞–Ω–Ω—ã–µ –Ω–µ–≤–µ—Ä–Ω—ã–µ.', '–°—Ç–æ–ø! –¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø–∞—Ä–æ–ª—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π.'], 
      idle: ['–ó–∞–¥—É–º–∞–ª–∏—Å—å? –Ø –ø–æ–¥–æ–∂–¥—É.'],
      story: ['–†–∞–¥–∞ –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞!', '–°–∫–æ–ª—å–∫–æ –Ω–æ–≤—ã—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–∞–∫–æ–ø–∏–ª–æ—Å—å?']
    }
  },
  register: {
    initialMessage: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ LoveMemory! –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞.',
    phrases: {
      error: ['–û–π! –ö–∞–∂–µ—Ç—Å—è, —Ç–∞–∫–æ–π email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∏–ª–∏ –≤–æ–π–¥–∏—Ç–µ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–∫–∫–∞—É–Ω—Ç.', '–°—Ç–æ–ø! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ –ø–æ–ª—è - —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫.', '–•–º, –∞–Ω–∫–µ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!'],
      idle: ['–ù–µ —Å–ø–µ—à–∏—Ç–µ, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ.', 'LoveMemory –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ—Å–æ–±–µ–Ω–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –≤–º–µ—Å—Ç–µ!'],
      story: ['–û—Ç–ª–∏—á–Ω–æ! –ê–Ω–∫–µ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!', '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ LoveMemory!', '–ì–æ—Ç–æ–≤—ã —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è?']
    }
  }
};

const AuthPage: React.FC = () => {

  const location = useLocation();

  
  const [mode, setMode] = useState<AuthMode>(() => {
    const currentPath = location.pathname;
    if (currentPath === '/register') {
      return 'register';
    } else {
      return 'login';
    }
  });
  
  const { loginUser, registerUser } = useAuthActions();

  
  const { user } = useAuthPageData();
  
  const navigate = useNavigate();
  
  const mascotConfig = React.useMemo(() => {
    return mascotConfigs[mode];
  }, [mode]);
  
  const { mascotMessage, handleAvatarClick, handleInteraction, triggerError } = useInteractiveMascot(mascotConfig);

  
  // –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º onSubmit –∏ onSuccess —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –Ω–µ–Ω—É–∂–Ω—ã—Ö —Ä–µ—Ä–µ–Ω–¥–µ—Ä–æ–≤ useAuthForm
  const onSubmit = React.useMemo(() => {
    return mode === 'login' ? loginUser : registerUser;
  }, [mode, loginUser, registerUser]);
  
  const onSuccess = React.useCallback(() => {
    navigate(mode === 'login' ? '/dashboard' : '/onboarding/interests');
  }, [mode, navigate]);
  
  const stableTriggerError = React.useCallback(triggerError, [triggerError]);
  const stableHandleInteraction = React.useCallback(handleInteraction, [handleInteraction]);
  
  const { formData, fieldErrors, isSubmitting, handleInputChange, handleSubmit } = useAuthForm({
    mode,
    onSubmit,
    onSuccess,
    triggerError: stableTriggerError,
    handleInteraction: stableHandleInteraction
  });
  


  // –û–±—Ä–∞–±–æ—Ç–∫–∞ Google OAuth –æ—à–∏–±–æ–∫
  React.useEffect(() => {
    const params = new URLSearchParams(location.search);
    if (params.get('error') === 'google-auth-failed') {
      triggerError('–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ —Å –ø–æ–º–æ—â—å—é Google. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      navigate(`/${mode}`, { replace: true });
    }
  }, [location.search, mode, navigate, triggerError]);

  // –†–µ–¥–∏—Ä–µ–∫—Ç –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
  React.useEffect(() => {
    if (user) {
      navigate('/dashboard');
    }
  }, [user, navigate]);

  React.useEffect(() => {
    const currentPath = location.pathname;
    
    if (currentPath === '/register' && mode !== 'register') {
      setMode('register');
    } else if (currentPath === '/login' && mode !== 'login') {
      setMode('login');
    }
  }, [location.pathname, mode, setMode]);

  const handleGoogleSignIn = (): void => {
    const apiBaseUrl = import.meta.env.VITE_API_BASE_URL;
    if (apiBaseUrl) {
      window.open(`${apiBaseUrl}/auth/google`, '_self');
    }
  };

  const handleModeSwitch = (newMode: AuthMode) => {
    setMode(newMode);
    navigate(`/${newMode}`, { replace: true });
  };

  return (
    <div className={styles.page}>
      {/* –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –±—Ä–µ–Ω–¥–∏–Ω–≥ */}
      <div className={styles.brandingPanel}>
        <div className={styles.brandingContent}>
          {/* 3D –°–µ—Ä–¥—Ü–µ */}
          <div className={styles.heart3D}>
            <div className={styles.heartGlow}></div>
          </div>
          
          <h1 className={styles.brandingTitle}>
            LoveMemory <span className={styles.heartIcon}>üíï</span>
          </h1>
          <p className={styles.brandingText}>
            –í—Å–µ —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –≤–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ.
          </p>
        </div>
      </div>

      {/* –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - —Ñ–æ—Ä–º–∞ */}
      <div className={styles.formPanel}>
        <div className={`${styles.authContainer} ${mode === 'register' ? styles.register : ''}`}>
          <div className={mode === 'register' ? styles.mascotContainer : styles.mascotPositioner}>
            <StaticMascot
              bubbleKey={mascotMessage}
              message={mascotMessage}
              animationData={greetAnimation}
              onAvatarClick={handleAvatarClick}
              isError={!!fieldErrors.email || !!fieldErrors.password} // –ü—Ä–∏–º–µ—Ä: —Ç—Ä—è—Å–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –≤ –ø–æ–ª—è—Ö
              mode={mode}
            />
          </div>

          <div className={mode === 'register' ? styles.header : ''}>
            <h1 className={`${styles.title} ${mode === 'register' ? styles.register : ''}`}>
              {mode === 'login' ? 'LoveMemory' : '–ê–Ω–∫–µ—Ç–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞'}
            </h1>
            <p className={`${styles.subtitle} ${mode === 'register' ? styles.register : ''}`}>
              {mode === 'login' ? '–í–æ–π–¥–∏—Ç–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å' : '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∞—Ä—ã'}
            </p>
          </div>

          {mode === 'register' ? (
            <div className={styles.formScroll}>
              <form onSubmit={handleSubmit} className={styles.form} noValidate>
                <div className={styles.formGrid}>
                  <input
                    name="name"
                    type="text"
                    placeholder="–í–∞—à–µ –∏–º—è"
                    className={`${styles.input} ${styles.register} ${fieldErrors.name ? `${styles.inputError} ${styles.register}` : ''}`}
                    value={formData.name || ''}
                    onChange={handleInputChange}
                  />
                  <input
                    name="email"
                    type="email"
                    placeholder="Email"
                    className={`${styles.input} ${styles.register} ${fieldErrors.email ? `${styles.inputError} ${styles.register}` : ''}`}
                    value={formData.email || ''}
                    onChange={handleInputChange}
                  />
                  <input
                    name="password"
                    type="password"
                    placeholder="–ü–∞—Ä–æ–ª—å (–º–∏–Ω. 6 —Å–∏–º–≤.)"
                    className={`${styles.input} ${styles.register} ${fieldErrors.password ? `${styles.inputError} ${styles.register}` : ''}`}
                    value={formData.password || ''}
                    onChange={handleInputChange}
                  />
                  <input
                    name="confirmPassword"
                    type="password"
                    placeholder="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
                    className={`${styles.input} ${styles.register} ${fieldErrors.confirmPassword ? `${styles.inputError} ${styles.register}` : ''}`}
                    value={formData.confirmPassword || ''}
                    onChange={handleInputChange}
                  />
                  <div className={styles.gridSpanFull}>
                    <GenderSelector
                      selectedGender={formData.gender || 'male'}
                      onGenderChange={(gender: 'male' | 'female' | 'other') => 
                        handleInputChange({ target: { name: 'gender', value: gender } } as any)
                      }
                    />
                  </div>
                  <input
                    name="city"
                    type="text"
                    placeholder="–ì–æ—Ä–æ–¥"
                    className={`${styles.input} ${styles.register} ${fieldErrors.city ? `${styles.inputError} ${styles.register}` : ''}`}
                    value={formData.city || ''}
                    onChange={handleInputChange}
                  />
                  <input
                    name="age"
                    type="number"
                    placeholder="–í–æ–∑—Ä–∞—Å—Ç (18+)"
                    className={`${styles.input} ${styles.register} ${fieldErrors.age ? `${styles.inputError} ${styles.register}` : ''}`}
                    value={formData.age || ''}
                    onChange={handleInputChange}
                    min="18"
                    max="99"
                  />
                </div>
                <Button type="primary" submit size="sm" fullWidth disabled={isSubmitting}>
                  {isSubmitting ? '–û—Ç–ø—Ä–∞–≤–ª—è–µ–º...' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É'}
                </Button>
              </form>
            </div>
          ) : (
            <form onSubmit={handleSubmit} className={styles.form} noValidate>
              <div className={styles.formColumn}>
                <input
                  name="email"
                  type="email"
                  placeholder="Email"
                  className={`${styles.input} ${fieldErrors.email ? styles.inputError : ''}`}
                  value={formData.email || ''}
                  onChange={handleInputChange}
                />
                <input
                  name="password"
                  type="password"
                  placeholder="–ü–∞—Ä–æ–ª—å"
                  className={`${styles.input} ${fieldErrors.password ? styles.inputError : ''}`}
                  value={formData.password || ''}
                  onChange={handleInputChange}
                />
              </div>
              <Button type="primary" submit size="sm" fullWidth disabled={isSubmitting}>
                {isSubmitting ? '–í—Ö–æ–¥–∏–º...' : '–í–æ–π—Ç–∏'}
              </Button>
            </form>
          )}

          <div className={`${styles.divider} ${mode === 'register' ? styles.register : ''}`}><span>–ò–õ–ò</span></div>

          <button className={styles.googleButton} type="button" onClick={handleGoogleSignIn} disabled={isSubmitting}>
            <svg aria-hidden="true" width="18" height="18" viewBox="0 0 18 18">
              <path d="M16.51 8.25H9.03v3.44h4.15c-.16 1.12-1.29 2.5-4.15 2.5-2.49 0-4.5-2.02-4.5-4.5s2.01-4.5 4.5-4.5c1.23 0 2.22.45 2.97 1.15l2.76-2.76C14.01 1.25 11.66 0 9.03 0 4.05 0 0 4.05 0 9s4.05 9 9.03 9c5.04 0 8.78-3.67 8.78-8.75 0-.62-.07-1.22-.19-1.8z" fill="#FFF" />
            </svg>
            <span>–í–æ–π—Ç–∏ —Å –ø–æ–º–æ—â—å—é Google</span>
          </button>

          <p className={styles.linkText}>
            {mode === 'login' ? (
              <>–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞? <button type="button" className={styles.switchButton} onClick={() => handleModeSwitch('register')}>–°–æ–∑–¥–∞—Ç—å</button></>
            ) : (
              <>–£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç? <button type="button" className={styles.switchButton} onClick={() => handleModeSwitch('login')}>–í–æ–π—Ç–∏</button></>
            )}
          </p>
        </div>
      </div>
    </div>
  );
};

export default AuthPage;
