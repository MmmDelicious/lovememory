import { useState, useEffect, useCallback } from 'react';
import { pairService, userService } from '../services';
import { toast } from '../../../shared/hooks/useToast';
export const usePairing = (user) => {
  const [pairing, setPairing] = useState({ status: 'unpaired' }); // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState('');
  const fetchData = useCallback(async () => {
    if (!user?.id) return;
    try {
      setIsLoading(true);
      setError('');
      const pairResponse = await pairService.getStatus();
      const pairingData = pairResponse.data || pairResponse;
      console.log('üîó fetchData SUCCESS:', pairingData);
      setPairing(pairingData);
    } catch (err) {
      console.log('üîó fetchData ERROR:', err.response?.status, err.response?.data);
      if (err.response?.data?.status === 'unpaired') {
        setPairing({ status: 'unpaired' });
      } else if (err.response?.status === 404) {
        setPairing({ status: 'unpaired' });
      } else {
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        setPairing({ status: 'unpaired' });
      }
    } finally {
      setIsLoading(false);
    }
  }, [user?.id]);
  useEffect(() => {
    fetchData();
  }, [fetchData]);
  const sendRequest = async (email) => {
    try {
      await pairService.sendRequest({ partnerEmail: email });
      toast.success('–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!', '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø–æ—á—Ç—É –ø–∞—Ä—Ç–Ω–µ—Ä–∞');
      await fetchData();
    } catch (err) {
      console.log('üîó sendRequest error:', err.response?.status, err.response?.data?.message);
      if (err.response?.status === 409) {
        const errorMsg = err.response?.data?.message || '–ó–∞–ø—Ä–æ—Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç';
        toast.warning(errorMsg, '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
        await fetchData(); // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
      } else if (err.response?.status === 404) {
        toast.error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω', '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∞–¥—Ä–µ—Å–∞');
      } else if (err.response?.status === 400) {
        const errorMsg = err.response?.data?.message || '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email';
        toast.error(errorMsg, '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
      } else {
        toast.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞', '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ');
        throw err;
      }
    }
  };
  const acceptRequest = async (requestId) => {
    try {
      await pairService.acceptRequest(requestId);
      toast.success('–ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç!', '–¢–µ–ø–µ—Ä—å –≤—ã —Å–≤—è–∑–∞–Ω—ã —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º');
      await fetchData();
    } catch (err) {
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–ø—Ä–æ—Å–∞', '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ');
      throw err;
    }
  };
  const rejectRequest = async (requestId) => {
    try {
      await pairService.rejectRequest(requestId);
      toast.info('–ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω', '–ü–∞—Ä—Ç–Ω–µ—Ä –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ');
      await fetchData();
    } catch (err) {
      toast.error('–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞', '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ');
      throw err;
    }
  };
  const deletePairing = async (pairingId) => {
    try {
      await pairService.deletePairing(pairingId);
      toast.info('–°–≤—è–∑—å —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º —Ä–∞–∑–æ—Ä–≤–∞–Ω–∞', '–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –Ω–æ–≤–æ–º—É –ø–∞—Ä—Ç–Ω–µ—Ä—É');
      await fetchData();
    } catch (err) {
      toast.error('–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è', '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ');
      throw err;
    }
  };

  const fixMutualRequests = async () => {
    try {
      const result = await pairService.fixMutualRequests();
      toast.success('–í–∑–∞–∏–º–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!', '–¢–µ–ø–µ—Ä—å –≤—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –ø–∞—Ä—Ç–Ω—ë—Ä—É');
      await fetchData();
      return result;
    } catch (err) {
      toast.error('–û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤', '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ');
      throw err;
    }
  };
  return {
    pairing,
    isLoading,
    error,
    sendRequest,
    acceptRequest,
    rejectRequest,
    deletePairing,
    fixMutualRequests,
    setError
  };
};
