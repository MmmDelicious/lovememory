import { useCallback } from 'react';

type Difficulty = 'easy' | 'medium' | 'hard';

interface MemoryCard {
  id: string;
  value: string;
  isFlipped: boolean;
  isMatched: boolean;
  index: number;
}

/**
 * –•—É–∫ –¥–ª—è –ª–æ–≥–∏–∫–∏ –∏–≥—Ä—ã "–ú–µ–º–æ—Ä–∏"
 * –°–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ä—Ç–∞–º–∏
 */
export const useMemoryGame = (difficulty: Difficulty) => {
  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∫–∞—Ä—Ç
  const generateCardValues = useCallback((): string[] => {
    const symbols = ['üéâ', 'üéä', 'üéà', 'üéÅ', 'üéÇ', 'üç∞', 'üåü', '‚≠ê', 'üíé', 'üí∞', 'üèÜ', 'üéØ', 'üé™', 'üé≠', 'üé®', 'üéµ', 'üé∂', 'üé∏', 'üéπ', 'üé∫', 'üéª', 'üé§', 'üéß', 'üé¨', 'üéÆ', 'üïπÔ∏è', 'üé≤', 'üÉè'];
    
    const pairCount = (() => {
      switch (difficulty) {
        case 'easy': return 6;   // 3x4 = 12 –∫–∞—Ä—Ç
        case 'medium': return 8; // 4x4 = 16 –∫–∞—Ä—Ç  
        case 'hard': return 12;  // 4x6 = 24 –∫–∞—Ä—Ç—ã
        default: return 8;
      }
    })();
    
    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –¥—É–±–ª–∏—Ä—É–µ–º –∏—Ö
    const selectedSymbols = symbols.slice(0, pairCount);
    return [...selectedSymbols, ...selectedSymbols];
  }, [difficulty]);

  // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ (–∞–ª–≥–æ—Ä–∏—Ç–º –§–∏—à–µ—Ä–∞-–ô–µ—Ç—Å–∞)
  const shuffleArray = useCallback(<T>(array: T[]): T[] => {
    const shuffled = [...array];
    for (let i = shuffled.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
    }
    return shuffled;
  }, []);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç
  const initializeCards = useCallback((): MemoryCard[] => {
    const values = generateCardValues();
    const shuffledValues = shuffleArray(values);
    
    return shuffledValues.map((value, index) => ({
      id: `card-${index}`,
      value,
      isFlipped: false,
      isMatched: false,
      index
    }));
  }, [generateCardValues, shuffleArray]);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∫–∞—Ä—Ç
  const checkMatch = useCallback((card1: MemoryCard, card2: MemoryCard): boolean => {
    return card1.value === card2.value;
  }, []);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
  const isGameFinished = useCallback((cards: MemoryCard[]): boolean => {
    return cards.length > 0 && cards.every(card => card.isMatched);
  }, []);

  // –ü–æ–¥—Å—á–µ—Ç –æ—á–∫–æ–≤
  const calculateScore = useCallback((moves: number, timeElapsed: number, matches: number): number => {
    const baseScore = matches * 100;
    const timeBonus = Math.max(0, 300 - timeElapsed); // –ë–æ–Ω—É—Å –∑–∞ –±—ã—Å—Ç—Ä–æ—Ç—É
    const movesPenalty = Math.max(0, moves - matches) * 5; // –®—Ç—Ä–∞—Ñ –∑–∞ –ª–∏—à–Ω–∏–µ —Ö–æ–¥—ã
    const difficultyMultiplier = (() => {
      switch (difficulty) {
        case 'easy': return 1;
        case 'medium': return 1.5;
        case 'hard': return 2;
        default: return 1;
      }
    })();
    
    return Math.round((baseScore + timeBonus - movesPenalty) * difficultyMultiplier);
  }, [difficulty]);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ —Å–µ—Ç–∫–∏ –¥–ª—è –¥–æ—Å–∫–∏
  const getBoardDimensions = useCallback(() => {
    switch (difficulty) {
      case 'easy': return { rows: 3, cols: 4 };
      case 'medium': return { rows: 4, cols: 4 };
      case 'hard': return { rows: 4, cols: 6 };
      default: return { rows: 4, cols: 4 };
    }
  }, [difficulty]);

  return {
    initializeCards,
    checkMatch,
    isGameFinished,
    calculateScore,
    getBoardDimensions
  };
};