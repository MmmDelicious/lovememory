import React, { useState } from 'react';
import DateRouteMap from '../DateRouteMap/DateRouteMap';
import { Place } from '../../api/yandexMaps';
import styles from './DateGenerationResult.module.css';

interface DateOption {
  id: string;
  title: string;
  description: string;
  schedule: Array<{
    time: string;
    endTime: string;
    activity: string;
    description: string;
    location?: string;
  }>;
  estimatedCost: number;
  duration: number;
  atmosphere: 'romantic' | 'fun' | 'adventure';
  reasoning: string;
  isRealData: boolean;
  activitiesCount: number;
  places?: Place[];
}

interface DateGenerationResultProps {
  options: DateOption[];
  reasoning: string[];
  onSelectDate: (option: DateOption) => void;
  onClose: () => void;
}

const DateGenerationResult: React.FC<DateGenerationResultProps> = ({
  options,
  reasoning,
  onSelectDate,
  onClose
}) => {
  const [selectedOptionIndex, setSelectedOptionIndex] = useState(0);
  const selectedOption = options[selectedOptionIndex];

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('ru-RU', {
      style: 'currency',
      currency: 'RUB',
      minimumFractionDigits: 0
    }).format(amount);
  };

  const getAtmosphereEmoji = (atmosphere: string) => {
    switch (atmosphere) {
      case 'romantic': return 'üíï';
      case 'fun': return 'üéâ';
      case 'adventure': return 'üåü';
      default: return '‚ú®';
    }
  };

  const getAtmosphereLabel = (atmosphere: string) => {
    switch (atmosphere) {
      case 'romantic': return '–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è';
      case 'fun': return '–í–µ—Å–µ–ª–∞—è';
      case 'adventure': return '–ü—Ä–∏–∫–ª—é—á–µ–Ω—á–µ—Å–∫–∞—è';
      default: return '–û—Å–æ–±–µ–Ω–Ω–∞—è';
    }
  };

  return (
    <div className={styles.overlay}>
      <div className={styles.modal}>
        <div className={styles.header}>
          <h2>üéØ –í–∞—Ä–∏–∞–Ω—Ç—ã —Å–≤–∏–¥–∞–Ω–∏–π –≥–æ—Ç–æ–≤—ã!</h2>
          <button className={styles.closeButton} onClick={onClose}>
            ‚úï
          </button>
        </div>

        {/* –ü—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ */}
        <div className={styles.reasoningSection}>
          <h3>üí≠ –ö–∞–∫ —è —Å–æ–∑–¥–∞–≤–∞–ª –≤–∞—Ä–∏–∞–Ω—Ç—ã:</h3>
          <div className={styles.reasoningSteps}>
            {reasoning.map((step, index) => (
              <div key={index} className={styles.reasoningStep}>
                <span className={styles.stepNumber}>{index + 1}</span>
                <span>{step}</span>
              </div>
            ))}
          </div>
        </div>

        {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –º–µ–∂–¥—É –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ */}
        <div className={styles.optionTabs}>
          {options.map((option, index) => (
            <button
              key={option.id}
              className={`${styles.optionTab} ${selectedOptionIndex === index ? styles.active : ''}`}
              onClick={() => setSelectedOptionIndex(index)}
            >
              {getAtmosphereEmoji(option.atmosphere)} –í–∞—Ä–∏–∞–Ω—Ç {index + 1}
            </button>
          ))}
        </div>

        {/* –í—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç */}
        <div className={styles.optionDetails}>
          <div className={styles.optionHeader}>
            <h3>{selectedOption.title}</h3>
            <div className={styles.optionMeta}>
              <span className={styles.atmosphere}>
                {getAtmosphereEmoji(selectedOption.atmosphere)} {getAtmosphereLabel(selectedOption.atmosphere)}
              </span>
              <span className={styles.cost}>{formatCurrency(selectedOption.estimatedCost)}</span>
              <span className={styles.duration}>{selectedOption.duration}—á</span>
            </div>
          </div>

          <p className={styles.description}>{selectedOption.description}</p>

          {/* –ö–∞—Ä—Ç–∞ –º–∞—Ä—à—Ä—É—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –º–µ—Å—Ç–∞ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏) */}
          {selectedOption.places && selectedOption.places.length > 0 && (
            <div className={styles.mapSection}>
              <h4>üìç –ú–∞—Ä—à—Ä—É—Ç –Ω–∞ –∫–∞—Ä—Ç–µ:</h4>
              <DateRouteMap
                places={selectedOption.places}
                height="300px"
                showRoute={true}
              />
            </div>
          )}

          {/* –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ */}
          <div className={styles.schedule}>
            <h4>‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:</h4>
            <div className={styles.scheduleItems}>
              {selectedOption.schedule.map((item, index) => (
                <div key={index} className={styles.scheduleItem}>
                  <div className={styles.timeSlot}>
                    <span className={styles.startTime}>{item.time}</span>
                    <span className={styles.endTime}>- {item.endTime}</span>
                  </div>
                  <div className={styles.activity}>
                    <strong>{item.activity}</strong>
                    <p>{item.description}</p>
                    {item.location && (
                      <span className={styles.location}>üìç {item.location}</span>
                    )}
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ */}
          <div className={styles.reasoning}>
            <h4>ü§î –ü–æ—á–µ–º—É —ç—Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç:</h4>
            <p>{selectedOption.reasoning}</p>
          </div>

          {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö */}
          <div className={styles.dataSource}>
            {selectedOption.isRealData ? (
              <span className={styles.realData}>‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã —Ä–µ–∞–ª—å–Ω—ã–µ –º–µ—Å—Ç–∞ –∏–∑ Yandex Maps</span>
            ) : (
              <span className={styles.staticData}>‚ÑπÔ∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—â–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π</span>
            )}
          </div>
        </div>

        {/* –î–µ–π—Å—Ç–≤–∏—è */}
        <div className={styles.actions}>
          <button 
            className={styles.selectButton}
            onClick={() => onSelectDate(selectedOption)}
          >
            üìÖ –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å
          </button>
          <button 
            className={styles.regenerateButton}
            onClick={onClose}
          >
            üîÑ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
          </button>
        </div>
      </div>
    </div>
  );
};

export default DateGenerationResult;

