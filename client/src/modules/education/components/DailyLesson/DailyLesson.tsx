import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Coins, Clock, CheckCircle } from 'lucide-react';
import Lottie from 'lottie-react';
import { getLessonAnimation } from '../../assets/lessons';
// Removed useDevice import - hook was deleted
import styles from './DailyLesson.module.css';

import type { Lesson } from '../../../types/common';

interface DailyLessonProps {
  lesson?: Lesson;
  onComplete: (feedback: string) => void;
  loading?: boolean;
  completionStatus?: {
    userCompleted: boolean;
    partnerCompleted: boolean;
  };
  viewMode?: 'my' | 'pair';
}

const DailyLesson: React.FC<DailyLessonProps> = ({
  lesson,
  onComplete,
  loading = false,
  completionStatus,
  viewMode = 'my'
}) => {
  const [feedback, setFeedback] = useState('');
  const [isCompleting, setIsCompleting] = useState(false);
  const [animationData, setAnimationData] = useState<any>(null);
  const [startTime] = useState(Date.now());
  const isMobile = false; // useDevice removed - default to desktop
  
  
  const getAnimationSize = () => {
    const screenWidth = window.innerWidth;
    if (screenWidth <= 480) {
      return { width: '150px', height: '150px' };
    } else if (screenWidth <= 768) {
      return { width: '180px', height: '180px' };
    }
    return { width: '240px', height: '240px' };
  };
  
  const [animationSize, setAnimationSize] = useState(getAnimationSize());
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ —ç–∫—Ä–∞–Ω–∞
  useEffect(() => {
    const handleResize = () => {
      setAnimationSize(getAnimationSize());
    };
    
    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é Lottie
  useEffect(() => {
    const animationFile = lesson?.Lesson?.animation_file || lesson?.animation_file;
    if (animationFile) {
      const animation = getLessonAnimation(animationFile);
      if (animation) {
        setAnimationData(animation);
      } else {
      }
    }
  }, [lesson?.Lesson?.animation_file, lesson?.animation_file]);

  const handleComplete = async () => {
    if (!lesson) return;
    
    setIsCompleting(true);
    const completionTime = Math.floor((Date.now() - startTime) / 1000);
    
    try {
      await onComplete(feedback);
    } finally {
      setIsCompleting(false);
    }
  };

  const isUserCompleted = completionStatus?.userCompleted;
  const isPartnerCompleted = completionStatus?.partnerCompleted;
  const isBothCompleted = isUserCompleted && isPartnerCompleted;

  if (loading) {
    return (
      <div className={styles.container}>
        <div className={styles.loadingSpinner}>
          <div className={styles.spinner}></div>
          <p>–ü–æ–¥–±–∏—Ä–∞–µ–º –∏–¥–µ–∞–ª—å–Ω—ã–π —É—Ä–æ–∫ –¥–ª—è –≤–∞—Å...</p>
        </div>
      </div>
    );
  }

  if (!lesson) {
    return (
      <div className={styles.container}>
        <div className={styles.errorState}>
          <h3>–£—Ä–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</h3>
          <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.</p>
        </div>
      </div>
    );
  }

  return (
    <div className={styles.container}>
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
        className={styles.lessonCard}
      >
        {/* –ê–Ω–∏–º–∞—Ü–∏—è Lottie */}
        {animationData && (
          <div className={styles.animationContainer}>
            <Lottie
              animationData={animationData}
              loop={true}
              autoplay={true}
              width={parseInt(animationSize.width)}
              height={parseInt(animationSize.height)}
              style={{
                maxWidth: '100%',
                maxHeight: '100%'
              }}
              className={styles.animation}
            />
          </div>
        )}

        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —É—Ä–æ–∫–∞ */}
        <div className={styles.header}>
          <motion.h2
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ delay: 0.2 }}
            className={styles.title}
          >
            {lesson?.Lesson?.title || lesson?.title || '–ó–∞–≥—Ä—É–∑–∫–∞...'}
          </motion.h2>
          
          <div className={styles.rewardBadge}>
            <Coins size={16} className={styles.coinIcon} />
            <span>{lesson?.Lesson?.base_coins_reward || lesson?.base_coins_reward || 0}</span>
            {(lesson?.streak_bonus || lesson?.Lesson?.streak_bonus) && ((lesson?.streak_bonus && lesson.streak_bonus > 0) || (lesson?.Lesson?.streak_bonus && lesson.Lesson.streak_bonus > 0)) && (
              <span className={styles.streakBonus}>+{lesson?.streak_bonus || lesson?.Lesson?.streak_bonus}</span>
            )}
          </div>
        </div>

        {/* –û–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–∞ */}
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 0.4 }}
          className={styles.content}
        >
          <p className={styles.description}>
            {lesson?.Lesson?.text || lesson?.text || '–û–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–∞...'}
          </p>
        </motion.div>

        {/* –°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è */}
        <div className={styles.completionStatus}>
          <div className={`${styles.statusItem} ${isUserCompleted ? styles.completed : ''}`}>
            <span className={styles.statusIcon}>
              {isUserCompleted ? <CheckCircle size={20} /> : <Clock size={20} />}
            </span>
            <span>–í—ã</span>
          </div>
          <div className={`${styles.statusItem} ${isPartnerCompleted ? styles.completed : ''}`}>
            <span className={styles.statusIcon}>
              {isPartnerCompleted ? <CheckCircle size={20} /> : <Clock size={20} />}
            </span>
            <span>–ü–∞—Ä—Ç–Ω–µ—Ä</span>
          </div>
        </div>

        {/* –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —á–∞—Å—Ç—å */}
        <AnimatePresence>
          {!isUserCompleted && (
            <motion.div
              initial={{ opacity: 0, height: 0 }}
              animate={{ opacity: 1, height: 'auto' }}
              exit={{ opacity: 0, height: 0 }}
              className={styles.interactiveSection}
            >
              {(lesson?.Lesson?.interactive_type || lesson?.interactive_type) === 'chat' && (
                <div className={styles.chatInput}>
                  <textarea
                    value={feedback}
                    onChange={(e) => setFeedback(e.target.value)}
                    placeholder="–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –º—ã—Å–ª—è–º–∏ –∏–ª–∏ –æ–ø–∏—à–∏—Ç–µ, –∫–∞–∫ –ø—Ä–æ—à–µ–ª —É—Ä–æ–∫..."
                    className={styles.textarea}
                    rows={3}
                  />
                </div>
              )}

              {(lesson?.Lesson?.interactive_type || lesson?.interactive_type) === 'prompt' && (
                <div className={styles.promptInput}>
                  <textarea
                    value={feedback}
                    onChange={(e) => setFeedback(e.target.value)}
                    placeholder="–û–ø–∏—à–∏—Ç–µ, –∫–∞–∫ –≤—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ..."
                    className={styles.textarea}
                    rows={3}
                  />
                </div>
              )}

              {(lesson?.Lesson?.interactive_type || lesson?.interactive_type) === 'photo' && (
                <div className={styles.photoInput}>
                  <input
                    type="file"
                    accept="image/*"
                    className={styles.fileInput}
                    id="photo-upload"
                  />
                  <label htmlFor="photo-upload" className={styles.photoLabel}>
                    üì∏ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ
                  </label>
                  <textarea
                    value={feedback}
                    onChange={(e) => setFeedback(e.target.value)}
                    placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Ñ–æ—Ç–æ..."
                    className={styles.textarea}
                    rows={2}
                  />
                </div>
              )}

              <motion.button
                whileHover={{ scale: 1.02 }}
                whileTap={{ scale: 0.98 }}
                onClick={handleComplete}
                disabled={isCompleting}
                className={styles.completeButton}
              >
                {isCompleting ? (
                  <div className={styles.buttonSpinner}>
                    <div className={styles.miniSpinner}></div>
                    –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...
                  </div>
                ) : (
                  <>
                    <span>‚ú® –í—ã–ø–æ–ª–Ω–∏—Ç—å —É—Ä–æ–∫</span>
                    <span className={styles.reward}>
                      +{lesson?.Lesson?.base_coins_reward || lesson?.base_coins_reward || 0} <Coins size={16} />
                    </span>
                  </>
                )}
              </motion.button>
            </motion.div>
          )}
        </AnimatePresence>

        {/* –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ */}
        {isUserCompleted && (
          <motion.div
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}
            className={styles.completedMessage}
          >
            <div className={styles.celebrationIcon}>üéâ</div>
            <h3>–£—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω!</h3>
            <p>
              {isBothCompleted 
                ? '–û—Ç–ª–∏—á–Ω–æ! –í—ã –æ–±–∞ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —É—Ä–æ–∫ —Å–µ–≥–æ–¥–Ω—è!' 
                : '–ñ–¥–µ–º, –∫–æ–≥–¥–∞ –ø–∞—Ä—Ç–Ω–µ—Ä —Ç–æ–∂–µ –≤—ã–ø–æ–ª–Ω–∏—Ç —É—Ä–æ–∫.'
              }
            </p>
          </motion.div>
        )}

        {/* –¢–µ–≥–∏ —É—Ä–æ–∫–∞ */}
        <div className={styles.tags}>
          {(lesson?.Lesson?.tags || lesson?.tags || []).map((tag: string, index: number) => (
            <span key={index} className={styles.tag}>
              #{tag}
            </span>
          ))}
        </div>
      </motion.div>
    </div>
  );
};

export default DailyLesson;
