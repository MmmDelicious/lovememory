import React, { useState, useEffect } from 'react';
import { MediaDerivative } from '../../types/models';
import mediaService from '../../services/media.service';
import styles from './MediaDerivativeViewer.module.css';

interface MediaDerivativeViewerProps {
  mediaId: string;
  showControls?: boolean;
  onDerivativeCreate?: (derivative: MediaDerivative) => void;
  onDerivativeDelete?: (derivativeId: string) => void;
}

export const MediaDerivativeViewer: React.FC<MediaDerivativeViewerProps> = ({
  mediaId,
  showControls = true,
  onDerivativeCreate,
  onDerivativeDelete
}) => {
  const [derivatives, setDerivatives] = useState<MediaDerivative[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [selectedType, setSelectedType] = useState<string | null>(null);
  const [stats, setStats] = useState<any>(null);

  useEffect(() => {
    loadDerivatives();
    loadStats();
  }, [mediaId]);

  const loadDerivatives = async () => {
    try {
      setLoading(true);
      setError(null);
      const response = await mediaService.getMediaDerivatives(mediaId);
      setDerivatives(response.data || []);
    } catch (err) {
      console.error('Error loading derivatives:', err);
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤');
    } finally {
      setLoading(false);
    }
  };

  const loadStats = async () => {
    try {
      const response = await mediaService.getDerivativeStats(mediaId);
      setStats(response);
    } catch (err) {
      console.error('Error loading stats:', err);
    }
  };

  const handleDelete = async (derivativeId: string) => {
    if (!window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–π —Ñ–∞–π–ª?')) {
      return;
    }

    try {
      await mediaService.deleteMediaDerivative(derivativeId);
      setDerivatives(derivatives.filter(d => d.id !== derivativeId));
      onDerivativeDelete?.(derivativeId);
      await loadStats(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    } catch (error) {
      console.error('Error deleting derivative:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞');
    }
  };

  const handleAutoGenerate = async () => {
    try {
      await mediaService.autoGenerateDerivatives(mediaId);
      alert('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞');
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã polling –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    } catch (error) {
      console.error('Error auto-generating:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏');
    }
  };

  const getTypeIcon = (type: string) => {
    switch (type) {
      case 'thumbnail':
        return 'üñºÔ∏è';
      case 'preview':
        return 'üëÅÔ∏è';
      case 'optimized':
        return '‚ö°';
      case 'webp':
        return 'üåê';
      case 'blur_hash':
        return 'üå´Ô∏è';
      default:
        return 'üìÑ';
    }
  };

  const getTypeName = (type: string) => {
    switch (type) {
      case 'thumbnail':
        return '–ú–∏–Ω–∏–∞—Ç—é—Ä–∞';
      case 'preview':
        return '–ü—Ä–µ–≤—å—é';
      case 'optimized':
        return '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π';
      case 'webp':
        return 'WebP';
      case 'blur_hash':
        return 'Blur Hash';
      default:
        return type;
    }
  };

  const formatFileSize = (bytes: number) => {
    if (!bytes) return '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
    const units = ['–ë', '–ö–ë', '–ú–ë', '–ì–ë'];
    let size = bytes;
    let unitIndex = 0;
    
    while (size >= 1024 && unitIndex < units.length - 1) {
      size /= 1024;
      unitIndex++;
    }
    
    return `${size.toFixed(1)} ${units[unitIndex]}`;
  };

  const getDerivativeUrl = (derivative: MediaDerivative) => {
    return mediaService.getDerivativeUrl(derivative);
  };

  const filteredDerivatives = selectedType 
    ? derivatives.filter(d => d.derivative_type === selectedType)
    : derivatives;

  const availableTypes = [...new Set(derivatives.map(d => d.derivative_type))];

  if (loading) {
    return (
      <div className={styles.loading}>
        <div className={styles.spinner}></div>
        <span>–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...</span>
      </div>
    );
  }

  if (error) {
    return (
      <div className={styles.error}>
        <span>‚ùå {error}</span>
        <button onClick={loadDerivatives} className={styles.retryButton}>
          üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å
        </button>
      </div>
    );
  }

  return (
    <div className={styles.derivativeViewer}>
      {/* Header with Stats */}
      <div className={styles.header}>
        <h3>üìÅ –ü—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã</h3>
        {stats && (
          <div className={styles.stats}>
            <span>–í—Å–µ–≥–æ: {stats.totalDerivatives}</span>
            <span>–†–∞–∑–º–µ—Ä: {formatFileSize(stats.totalSize)}</span>
          </div>
        )}
      </div>

      {/* Controls */}
      {showControls && (
        <div className={styles.controls}>
          <div className={styles.typeFilter}>
            <button
              className={`${styles.filterButton} ${!selectedType ? styles.active : ''}`}
              onClick={() => setSelectedType(null)}
            >
              –í—Å–µ ({derivatives.length})
            </button>
            {availableTypes.map(type => (
              <button
                key={type}
                className={`${styles.filterButton} ${selectedType === type ? styles.active : ''}`}
                onClick={() => setSelectedType(type)}
              >
                {getTypeIcon(type)} {getTypeName(type)} ({derivatives.filter(d => d.derivative_type === type).length})
              </button>
            ))}
          </div>
          
          <div className={styles.actions}>
            <button 
              onClick={handleAutoGenerate}
              className={styles.autoGenerateButton}
            >
              ‚ö° –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è
            </button>
            <button onClick={loadDerivatives} className={styles.refreshButton}>
              üîÑ –û–±–Ω–æ–≤–∏—Ç—å
            </button>
          </div>
        </div>
      )}

      {/* Derivatives List */}
      <div className={styles.derivativesList}>
        {filteredDerivatives.length === 0 ? (
          <div className={styles.empty}>
            <div className={styles.emptyIcon}>üìÑ</div>
            <h4>
              {selectedType 
                ? `–ù–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —Ç–∏–ø–∞ "${getTypeName(selectedType)}"` 
                : '–ü—Ä–æ–∏–∑–≤–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ—Ç'
              }
            </h4>
            <p>
              {selectedType 
                ? '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã'
                : '–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'
              }
            </p>
            {!selectedType && showControls && (
              <button 
                onClick={handleAutoGenerate}
                className={styles.emptyActionButton}
              >
                ‚ö° –°–æ–∑–¥–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
              </button>
            )}
          </div>
        ) : (
          <div className={styles.derivativesGrid}>
            {filteredDerivatives.map(derivative => (
              <div key={derivative.id} className={styles.derivativeCard}>
                <div className={styles.cardHeader}>
                  <span className={styles.typeIcon}>
                    {getTypeIcon(derivative.derivative_type)}
                  </span>
                  <span className={styles.typeName}>
                    {getTypeName(derivative.derivative_type)}
                  </span>
                  {showControls && (
                    <button
                      onClick={() => handleDelete(derivative.id)}
                      className={styles.deleteButton}
                      title="–£–¥–∞–ª–∏—Ç—å"
                    >
                      üóëÔ∏è
                    </button>
                  )}
                </div>

                <div className={styles.cardContent}>
                  {derivative.derivative_type === 'blur_hash' ? (
                    <div className={styles.blurHashPreview}>
                      <div className={styles.blurHashCode}>
                        {derivative.metadata?.blur_hash || 'Blur Hash'}
                      </div>
                    </div>
                  ) : (
                    <div className={styles.imagePreview}>
                      <img
                        src={getDerivativeUrl(derivative)}
                        alt={`${getTypeName(derivative.derivative_type)} preview`}
                        className={styles.previewImage}
                        onError={(e) => {
                          (e.target as HTMLImageElement).src = '/placeholder-image.png';
                        }}
                      />
                    </div>
                  )}

                  <div className={styles.cardMeta}>
                    {derivative.width && derivative.height && (
                      <span className={styles.dimensions}>
                        üìê {derivative.width}√ó{derivative.height}
                      </span>
                    )}
                    {derivative.size_bytes && (
                      <span className={styles.fileSize}>
                        üíæ {formatFileSize(derivative.size_bytes)}
                      </span>
                    )}
                    {derivative.format && (
                      <span className={styles.format}>
                        üîß {derivative.format.toUpperCase()}
                      </span>
                    )}
                    {derivative.quality && (
                      <span className={styles.quality}>
                        ‚≠ê –ö–∞—á–µ—Å—Ç–≤–æ: {derivative.quality}%
                      </span>
                    )}
                  </div>

                  {derivative.metadata && Object.keys(derivative.metadata).length > 0 && (
                    <div className={styles.metadata}>
                      <details className={styles.metadataDetails}>
                        <summary>üìã –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ</summary>
                        <pre className={styles.metadataContent}>
                          {JSON.stringify(derivative.metadata, null, 2)}
                        </pre>
                      </details>
                    </div>
                  )}
                </div>

                <div className={styles.cardActions}>
                  {derivative.derivative_type !== 'blur_hash' && (
                    <a
                      href={getDerivativeUrl(derivative)}
                      target="_blank"
                      rel="noopener noreferrer"
                      className={styles.viewButton}
                    >
                      üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä
                    </a>
                  )}
                  <a
                    href={getDerivativeUrl(derivative)}
                    download
                    className={styles.downloadButton}
                  >
                    üì• –°–∫–∞—á–∞—Ç—å
                  </a>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>

      {/* Stats Details */}
      {stats && stats.byType && Object.keys(stats.byType).length > 0 && (
        <div className={styles.detailedStats}>
          <h4>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º</h4>
          <div className={styles.statsGrid}>
            {Object.entries(stats.byType).map(([type, typeStats]: [string, any]) => (
              <div key={type} className={styles.statCard}>
                <div className={styles.statHeader}>
                  {getTypeIcon(type)} {getTypeName(type)}
                </div>
                <div className={styles.statContent}>
                  <span>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {typeStats.count}</span>
                  <span>–†–∞–∑–º–µ—Ä: {formatFileSize(typeStats.totalSize)}</span>
                  <span>–°—Ä–µ–¥–Ω–∏–π: {formatFileSize(typeStats.avgSize)}</span>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );
};
