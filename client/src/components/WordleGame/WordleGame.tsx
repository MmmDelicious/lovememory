import React, { useState, useEffect } from 'react';
import styles from './WordleGame.module.css';
interface WordleGameProps {
  gameState: any;
  user: { id: string; email: string };
  makeMove: (guess: string) => void;
  handleReturnToLobby: () => void;
}
type LetterStatus = 'correct' | 'present' | 'absent' | 'unused';
const KEYBOARD_ROWS = [
  ['–ô', '–¶', '–£', '–ö', '–ï', '–ù', '–ì', '–®', '–©', '–ó', '–•'],
  ['–§', '–´', '–í', '–ê', '–ü', '–†', '–û', '–õ', '–î', '–ñ', '–≠'],
  ['–Ø', '–ß', '–°', '–ú', '–ò', '–¢', '–¨', '–ë', '–Æ']
];
const ENGLISH_KEYBOARD_ROWS = [
  ['Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P'],
  ['A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L'],
  ['Z', 'X', 'C', 'V', 'B', 'N', 'M']
];
const WordleGame: React.FC<WordleGameProps> = ({ gameState, user, makeMove, handleReturnToLobby }) => {
  const [currentGuess, setCurrentGuess] = useState('');
  const [error, setError] = useState('');
  const [notification, setNotification] = useState('');
  const [notificationTimeoutId, setNotificationTimeoutId] = useState<NodeJS.Timeout | null>(null);
  const wordLength = gameState?.targetWordLength || 5;
  const maxAttempts = gameState?.maxAttempts || 6;
  const playerGuesses = gameState?.playerGuesses || [];
  const playerResults = gameState?.playerResults || [];
  const language = gameState?.language || 'russian';
  const keyboardRows = language === 'english' ? ENGLISH_KEYBOARD_ROWS : KEYBOARD_ROWS;
  useEffect(() => {
    }, [gameState, playerGuesses, playerResults]);
  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—á–∏—Å—Ç–∫—É currentGuess - –æ—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ö–æ–¥–∞
  const [lastSubmittedGuess, setLastSubmittedGuess] = useState<string>('');
  
  useEffect(() => {

    if (lastSubmittedGuess && currentGuess.toUpperCase() === lastSubmittedGuess && 
        playerGuesses.length > 0 && playerGuesses[playerGuesses.length - 1] === lastSubmittedGuess) {
      setCurrentGuess('');
      setLastSubmittedGuess(''); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
    }
  }, [playerGuesses, currentGuess, lastSubmittedGuess]);
  const getLetterStatus = (letter: string): LetterStatus => {
    let bestStatus: LetterStatus = 'unused';
    
    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –ø–æ–ø—ã—Ç–∫–∞–º –∏ –ø–æ–∑–∏—Ü–∏—è–º
    for (let i = playerResults.length - 1; i >= 0; i--) {
      const guess = playerGuesses[i];
      const result = playerResults[i];
      
      if (!guess || !result) continue;
      
      // –ò—Ç–µ—Ä–∏—Ä—É–µ–º –ø–æ –ø–æ–∑–∏—Ü–∏—è–º, –∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º indexOf
      for (let j = 0; j < guess.length; j++) {
        if (guess[j] === letter) {
          const status = result[j];
          
          // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: correct > present > absent > unused
          if (status === 'correct') {
            return 'correct'; // –ù–∞–∏–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
          } else if (status === 'present' && bestStatus !== 'correct') {
            bestStatus = 'present';
          } else if (status === 'absent' && bestStatus === 'unused') {
            bestStatus = 'absent';
          }
        }
      }
    }
    
    return bestStatus;
  };
  const handleKeyPress = (letter: string) => {
    if (currentGuess.length < wordLength) { // –ü–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è –¥–ª–∏–Ω–∞
      setCurrentGuess(prev => prev + letter);
      setError('');
      setNotification('');
    }
  };
  const handleBackspace = () => {
    setCurrentGuess(prev => prev.slice(0, -1));
    setError('');
    setNotification('');
  };
  const showNotification = (message: string) => {

    if (notificationTimeoutId) {
      clearTimeout(notificationTimeoutId);
    }
    
    setNotification(message);
    const timeoutId = setTimeout(() => {
      setNotification('');
      setNotificationTimeoutId(null);
    }, 3000);
    
    setNotificationTimeoutId(timeoutId);
  };
  
  
  useEffect(() => {
    return () => {
      if (notificationTimeoutId) {
        clearTimeout(notificationTimeoutId);
      }
    };
  }, [notificationTimeoutId]);
  const handleSubmit = async () => {
    if (currentGuess.length !== wordLength) {
      showNotification(`–í–≤–µ–¥–∏—Ç–µ ${wordLength} –±—É–∫–≤`);
      return;
    }
    // –£–±–∏—Ä–∞–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–ª–æ–≤–∞—Ä—è - –µ–¥–∏–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –ø—Ä–∞–≤–¥—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    // –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—ë—Ç –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å–ª–æ–≤–æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ
    try {
      // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–∞–∫ Promise, —Ç–∞–∫ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –≤—ã–∑–æ–≤—ã
      const result = makeMove(currentGuess);
      if (result && typeof result.then === 'function') {
        await result; // –û–∂–∏–¥–∞–µ–º Promise
      }
      setLastSubmittedGuess(currentGuess.toUpperCase()); // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ
      setError('');
      setNotification('');
    } catch (error: any) {
      console.error('[WordleGame] Error submitting guess:', error);
      showNotification(error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ª–æ–≤–∞');
      setError(error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ª–æ–≤–∞');
    }
  };
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      if (isWaiting) return;
      if (e.key === 'Enter') {
        handleSubmit();
      } else if (e.key === 'Backspace') {
        handleBackspace();
      } else {
        // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –≤–≤–æ–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞
        const isValidLetter = language === 'english' 
          ? /^[a-z]$/i.test(e.key) // –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã
          : /^[–∞-—è—ë]$/i.test(e.key); // –†—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã
        
        if (isValidLetter) {
          handleKeyPress(e.key.toUpperCase());
        }
      }
    };
    window.addEventListener('keydown', handleKeyDown);
    return () => window.removeEventListener('keydown', handleKeyDown);
  }, [currentGuess, gameState, isWaiting]); // –î–æ–±–∞–≤–ª—è–µ–º isWaiting –≤ deps
  if (gameState?.status === 'finished') {
    const isWinner = gameState.winner === user.id;
    const isDraw = gameState.winner === 'draw';
    let resultText = isDraw ? '–ù–∏—á—å—è!' : isWinner ? '–ü–æ–±–µ–¥–∞!' : '–ü–æ—Ä–∞–∂–µ–Ω–∏–µ';
    const userEconomyResult = gameState.economyResults?.[user.id];
    let coinsInfo = null;
    if (userEconomyResult) {
      if (userEconomyResult.type === 'winner') {
        coinsInfo = `–í—ã–∏–≥—Ä—ã—à: +${userEconomyResult.coinsChange} –º–æ–Ω–µ—Ç`;
      } else if (userEconomyResult.type === 'loser') {
        coinsInfo = `–ü–æ—Ç–µ—Ä—è–Ω–æ: ${userEconomyResult.coinsChange} –º–æ–Ω–µ—Ç`;
      } else if (userEconomyResult.type === 'draw') {
        coinsInfo = `–°—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞: +${userEconomyResult.coinsChange} –º–æ–Ω–µ—Ç`;
      }
    }
    return (
      <div className={styles.gameEndContainer}>
        <h3 className={styles.brandTitle}>Lovememory</h3>
        <h1 className={styles.gameTitle}>–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞</h1>
        <div className={styles.results}>
          <h2 className={styles.resultText}>{resultText}</h2>
          {coinsInfo && (
            <div className={styles.coinsInfo}>
              <div className={styles.coinsIcon}>üí∞</div>
              <span>{coinsInfo}</span>
            </div>
          )}
          {gameState.targetWord && (
            <div className={styles.targetWord}>
              –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: <strong>{gameState.targetWord}</strong>
            </div>
          )}
          <div className={styles.finalScores}>
            {(gameState?.players || [])
              .filter((playerId: string, index: number, array: string[]) => array.indexOf(playerId) === index) // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
              .map((playerId: string) => (
              <div key={playerId} className={styles.finalPlayerScore}>
                <span className={styles.playerName}>
                  {playerId === user.id ? '–í—ã' : '–°–æ–ø–µ—Ä–Ω–∏–∫'}
                </span>
                <span className={styles.scoreValue}>
                  {gameState?.scores?.[playerId] || 0} –æ—á–∫–æ–≤
                </span>
              </div>
            ))}
          </div>
        </div>
        <button onClick={handleReturnToLobby} className={styles.returnButton}>
          –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∏–≥—Ä–∞–º
        </button>
      </div>
    );
  }
  const isWaiting = !gameState || gameState.status === 'waiting';
  return (
    <div className={`${styles.wordleContainer} ${isWaiting ? styles.waiting : ''}`}>
      <div className={styles.gameInfo}>
        <div className={styles.round}>
          –†–∞—É–Ω–¥ {gameState?.currentRound || 1} –∏–∑ {gameState?.maxRounds || 3}
        </div>
        <div className={styles.language}>
          –Ø–∑—ã–∫: {language === 'russian' ? 'üá∑üá∫ –†—É—Å—Å–∫–∏–π' : 'üá∫üá∏ English'}
        </div>
        <div className={styles.scores}>
          {gameState?.gameFormat === '2v2' ? (
            <div className={styles.teamScores}>
              <div className={styles.teamScore}>
                <div className={styles.teamHeader}>
                  <span className={styles.teamName}>
                    {gameState?.playerTeam === 'team1' ? 'üèÜ –í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞' : '‚öîÔ∏è –ö–æ–º–∞–Ω–¥–∞ 1'}
                  </span>
                  <span className={styles.teamPoints}>{gameState?.teamScores?.team1 || 0}</span>
                </div>
                <div className={styles.teamMembers}>
                  {gameState?.teams?.team1?.map((playerId: string) => (
                    <div key={playerId} className={styles.teamMember}>
                      {playerId === user.id ? '–í—ã' : `–ò–≥—Ä–æ–∫`}
                      <span>({gameState?.scores?.[playerId] || 0})</span>
                    </div>
                  ))}
                </div>
              </div>
              <div className={styles.teamScore}>
                <div className={styles.teamHeader}>
                  <span className={styles.teamName}>
                    {gameState?.playerTeam === 'team2' ? 'üèÜ –í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞' : '‚öîÔ∏è –ö–æ–º–∞–Ω–¥–∞ 2'}
                  </span>
                  <span className={styles.teamPoints}>{gameState?.teamScores?.team2 || 0}</span>
                </div>
                <div className={styles.teamMembers}>
                  {gameState?.teams?.team2?.map((playerId: string) => (
                    <div key={playerId} className={styles.teamMember}>
                      {playerId === user.id ? '–í—ã' : `–ò–≥—Ä–æ–∫`}
                      <span>({gameState?.scores?.[playerId] || 0})</span>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          ) : (
            (gameState?.players || [])
              .filter((player: any, index: number, array: any[]) => array.findIndex(p => p.id === player.id) === index)
              .map((player: any) => (
                <div key={player.id} className={styles.playerScore}>
                  <span>{player.id === user.id ? '–í—ã' : '–°–æ–ø–µ—Ä–Ω–∏–∫'}</span>
                  <span>{gameState?.scores?.[player.id] || 0}</span>
                </div>
              ))
          )}
        </div>
      </div>
      <div className={styles.gameBoard}>
        {}
        <div className={styles.guessGrid}>
          {Array.from({ length: maxAttempts }, (_, rowIndex) => (
            <div key={rowIndex} className={styles.guessRow}>
              {Array.from({ length: wordLength }, (_, colIndex) => {
                let letter = '';
                let status = '';
                if (rowIndex < playerGuesses.length) {
                  const guess = playerGuesses[rowIndex] || '';
                  const result = (playerResults[rowIndex] || []); // –°–º—è–≥—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø
                  letter = guess[colIndex] || '';
                  status = result[colIndex] || ''; // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø
                } else if (rowIndex === playerGuesses.length) {
                  letter = currentGuess[colIndex] || '';
                }
                const cellClasses = `${styles.letterCell} ${status ? styles[status] : ''} ${
                  rowIndex === playerGuesses.length ? styles.current : ''
                }`;
                return (
                  <div
                    key={colIndex}
                    className={cellClasses}
                    title={`Row: ${rowIndex}, Col: ${colIndex}, Status: ${status}, Letter: ${letter}, GuessesCount: ${playerGuesses.length}, CurrentGuess: ${currentGuess}`}
                  >
                    {letter}
                  </div>
                );
              })}
            </div>
          ))}
        </div>
        {}
        {error && <div className={styles.error}>{error}</div>}
        {}
        {notification && <div className={styles.notification}>{notification}</div>}
        {}
        <div className={styles.keyboard}>
          {keyboardRows.map((row, rowIndex) => (
            <div key={rowIndex} className={styles.keyboardRow}>
              {rowIndex === keyboardRows.length - 1 && (
                <button
                  className={`${styles.key} ${styles.specialKey}`}
                  onClick={handleSubmit}
                  disabled={currentGuess.length !== wordLength || isWaiting}
                >
                  –í–í–û–î
                </button>
              )}
              {row.map(letter => (
                <button
                  key={letter}
                  className={`${styles.key} ${styles[getLetterStatus(letter)]}`}
                  onClick={() => handleKeyPress(letter)}
                  disabled={currentGuess.length >= wordLength || isWaiting}
                >
                  {letter}
                </button>
              ))}
              {rowIndex === keyboardRows.length - 1 && (
                <button
                  className={`${styles.key} ${styles.specialKey}`}
                  onClick={handleBackspace}
                  disabled={currentGuess.length === 0 || isWaiting}
                >
                  ‚å´
                </button>
              )}
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};
export default WordleGame;

