import React, { useState, useMemo, useEffect, Fragment } from 'react';
import PropTypes from 'prop-types';
import PlayingCard from '../PlayingCard/PlayingCard';
import Button from '../Button/Button';
import { useCurrency } from '../../context/CurrencyContext';
import styles from './PokerTable.module.css';
import avatarImage from './assets/avatar.png';
import Avatar from '../Avatar/Avatar';

const PokerTable = ({ gameState, onAction, userId }) => {
  // Early return –î–û–õ–ñ–ï–ù –±—ã—Ç—å —Å–∞–º—ã–º –ø–µ—Ä–≤—ã–º, –¥–æ –≤—Å–µ—Ö —Ö—É–∫–æ–≤
  if (!gameState) return null;

  // –í–°–ï —Ö—É–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ, –¥–æ –ª—é–±—ã—Ö conditional returns
  const [raiseAmount, setRaiseAmount] = useState(0);
  const [animatingCards, setAnimatingCards] = useState([]);
  const [dealingPhase, setDealingPhase] = useState(false);
  const [prevStage, setPrevStage] = useState(null);
  const [showRebuyModal, setShowRebuyModal] = useState(false);
  const [rebuyAmount, setRebuyAmount] = useState(100);
  
  const { coins, refreshCoins } = useCurrency();

  const { players = [], communityCards = [], pot = 0, currentPlayerId, stage, allowedActions = [], minRaiseAmount = 0, currentBet = 0, winningHandCards = [] } = gameState || {};

  // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤—Å–µ —Ö—É–∫–∏ —Å—é–¥–∞, —á—Ç–æ–±—ã –æ–Ω–∏ –≤—ã–ø–æ–ª–Ω—è–ª–∏—Å—å –≤—Å–µ–≥–¥–∞
  const currentPlayer = useMemo(() => 
    players ? players.find(p => p.id === userId) : null, 
    [players, userId]
  );
  
  const maxBet = useMemo(() => 
    players && players.length > 0 ? Math.max(...players.map(p => p.currentBet)) : 0, 
    [players]
  );
  
  const callAmount = useMemo(() => 
    currentPlayer ? Math.min(maxBet - currentPlayer.currentBet, currentPlayer.stack) : 0, 
    [currentPlayer, maxBet]
  );

  const mainPlayerStack = useMemo(() => {
    const player = players ? players.find(p => p.id === userId) : null;
    return player ? player.stack : 0;
  }, [players, userId]);

  const minRaise = minRaiseAmount || 0;
  const maxRaise = mainPlayerStack;
  const isPlayerTurn = currentPlayerId === userId;

  useEffect(() => {
    if (prevStage !== stage) {
      setPrevStage(stage);
      
      if (stage === 'pre-flop' && prevStage === null) {
        setDealingPhase(true);
        setTimeout(() => setDealingPhase(false), 2000);
      }
      
      if ((stage === 'flop' && prevStage === 'pre-flop') ||
          (stage === 'turn' && prevStage === 'flop') ||
          (stage === 'river' && prevStage === 'turn')) {
        
        const newCards = [];
        if (stage === 'flop') {
          newCards.push(0, 1, 2);
        } else if (stage === 'turn') {
          newCards.push(3);
        } else if (stage === 'river') {
          newCards.push(4);
        }
        
        setAnimatingCards(newCards);
        setTimeout(() => setAnimatingCards([]), 800);
      }
    }
  }, [stage, prevStage]);

  useEffect(() => {
    setRaiseAmount(minRaise);
  }, [minRaise]);

  // –¢–µ–ø–µ—Ä—å –≤—Å–µ conditional returns –∏–¥—É—Ç –ü–û–°–õ–ï –≤—Å–µ—Ö —Ö—É–∫–æ–≤
  if (!gameState || gameState.status === 'waiting' || gameState.stage === 'waiting' || (players && players.length < 2)) {
    return (
      <div className={styles.gameContainer}>
        <div className={styles.pokerTable}>
          <div className={styles.deckContainer}>
            <PlayingCard faceUp={false} />
          </div>
          
          <div className={styles.waitingContainer}>
            <div className={styles.waitingMessage}>
              <div className={styles.waitingIcon}>‚è≥</div>
              <div className={styles.waitingText}>
                {gameState?.message || '–û–∂–∏–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞...'}
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  }

  // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–≤—à–∏—Ö—Å—è –≤–æ –≤—Ä–µ–º—è —Ä–∞–∑–¥–∞—á–∏
  if (gameState.status === 'waiting_for_next_hand') {
    return (
      <div className={styles.gameContainer}>
        <div className={styles.pokerTable}>
          <div className={styles.deckContainer}>
            <PlayingCard faceUp={false} />
          </div>
          
          <div className={styles.waitingContainer}>
            <div className={styles.waitingMessage}>
              <div className={styles.waitingIcon}>üÉè</div>
              <div className={styles.waitingText}>
                {gameState.message || '–î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Ä–∞–∑–¥–∞—á–∏...'}
              </div>
              <div className={styles.waitingSubtext}>
                –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ –∏–≥—Ä–µ –≤ —Å–ª–µ–¥—É—é—â–µ–π —Ä–∞–∑–¥–∞—á–µ
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  }

  // –≠–∫—Ä–∞–Ω –æ–∂–∏–¥–∞–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤
  if (gameState.status === 'waiting_for_players') {
    return (
      <div className={styles.gameContainer}>
        <div className={styles.pokerTable}>
          <div className={styles.deckContainer}>
            <PlayingCard faceUp={false} />
          </div>
          
          <div className={styles.waitingContainer}>
            <div className={styles.waitingMessage}>
              <div className={styles.waitingIcon}>üë•</div>
              <div className={styles.waitingText}>
                –û–∂–∏–¥–∞–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤...
              </div>
              <div className={styles.waitingSubtext}>
                –ú–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–∑–¥–∞—á–∏
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  }

  const isWinningCard = (card) => {
    if (!winningHandCards || winningHandCards.length === 0) return false;
    return winningHandCards.some(wc => wc.rank === card.rank && wc.suit === card.suit);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞ –≤–æ–∫—Ä—É–≥ —Å—Ç–æ–ª–∞ (0-4)
  const getPlayerPosition = (playerId) => {
    if (playerId === userId) return 0; // –û—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–∫ –≤—Å–µ–≥–¥–∞ –≤ –ø–æ–∑–∏—Ü–∏–∏ 0 (–≤–Ω–∏–∑—É)
    
    const otherPlayers = (players || []).filter(p => p && p.id && p.id !== userId);
    const playerIndex = otherPlayers.findIndex(p => p.id === playerId);
    
    // –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π
    if (playerIndex === -1) {
      // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ö–µ—à –æ—Ç ID –∏–ª–∏ name –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
      const fallbackPosition = playerId 
        ? Math.abs(playerId.toString().split('').reduce((a, b) => a + b.charCodeAt(0), 0)) % 4 + 1
        : Math.floor(Math.random() * 4) + 1;
      return fallbackPosition;
    }
    
    return playerIndex + 1; // –ü–æ–∑–∏—Ü–∏–∏ 1-4 –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞  
  const getAvatarUrl = () => {
    return avatarImage;
  };

  const renderPlayerArea = (player, position) => {
    if (!player) return null;

    const isMainPlayer = player.id === userId;
    const showCards = (stage === 'showdown' && !player.inHand) || isMainPlayer || (gameState.status === 'finished');
    const isActive = player.id === currentPlayerId && gameState.status !== 'finished';

    return (
      <div key={player.id} className={`${styles.playerPosition} ${styles[`playerPosition${position}`]} ${isActive ? styles.active : ''}`}>
        {/* –ê–≤–∞—Ç–∞—Ä –∏–≥—Ä–æ–∫–∞ */}
        <Avatar
          src={getAvatarUrl()}
          alt={`${player.name}'s avatar`}
          className={styles.avatar}
          size="medium"
          variant="circle"
        />
        
        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–æ–∫–µ */}
        <div className={styles.playerInfo}>
          <div className={styles.playerName}>
            {player.name} {player.isDealer && 'üéØ'}
          </div>
          <div className={styles.playerStats}>
            <span className={styles.stack}>
              <span className={styles.chipsIcon}>ü™ô</span>
              {player.stack}
            </span>
            {player.currentBet > 0 && <span className={styles.bet}>–°—Ç–∞–≤–∫–∞: {player.currentBet}</span>}
            {!player.inHand && <span className={styles.folded}>–ü–∞—Å</span>}
          </div>
        </div>

        {/* –ö–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–∞ */}
        <div className={styles.playerCards}>
          {isMainPlayer ? (
            // –î–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã
            (player.hand && player.hand.length > 0) ? (player.hand || []).map((card, index) => (
              <div
                key={index}
                className={`${styles.cardWrapper} ${dealingPhase ? styles.cardDealing : ''}`}
                style={{ animationDelay: `${index * 0.2}s` }}
              >
                <PlayingCard 
                  suit={card.suit} 
                  rank={card.rank} 
                  faceUp={showCards} 
                  isWinning={isWinningCard(card)}
                />
              </div>
            )) : null
          ) : (
            // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º 2 —Ä—É–±–∞—à–∫–∏
            [0, 1].map((index) => (
              <div
                key={index}
                className={`${styles.cardWrapper} ${dealingPhase ? styles.cardDealing : ''}`}
                style={{ animationDelay: `${index * 0.2 + 0.1}s` }}
              >
                <PlayingCard 
                  faceUp={showCards} 
                  isWinning={false}
                />
              </div>
            ))
          )}
        </div>
      </div>
    );
  };

  const handleRaiseChange = (e) => {
    setRaiseAmount(Number(e.target.value));
  };

  const handleRebuy = async () => {
    try {
      // –ù—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å roomId –∏ socket –∏–∑ –ø—Ä–æ–ø—Å–æ–≤ –∏–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
      // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º window.pokerSocket –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
      if (window.pokerSocket && window.pokerRoomId) {
        window.pokerSocket.emit('rebuy_chips', { 
          roomId: window.pokerRoomId, 
          coinsAmount: rebuyAmount 
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ PokerPage
        setShowRebuyModal(false);
      } else {
        console.log(`Rebuy ${rebuyAmount} coins for ${rebuyAmount * 10} chips`);
        alert('–§—É–Ω–∫—Ü–∏—è –¥–æ–∫—É–ø–∫–∏ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏');
        setShowRebuyModal(false);
      }
    } catch (error) {
      console.error('Rebuy failed:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–∫—É–ø–∫–µ —Ñ–∏—à–µ–∫');
    }
  };
  
  return (
    <div className={styles.gameContainer}>
      <div className={styles.pokerTable}>
        {/* Deck container */}
        <div className={styles.deckContainer}>
          <PlayingCard faceUp={false} />
        </div>
        
        {/* Stage display */}
        <div className={styles.stageContainer}>
          <div className={styles.stage}>
            {stage === 'pre-flop' && '–ü—Ä–µ-—Ñ–ª–æ–ø'}
            {stage === 'flop' && '–§–ª–æ–ø'}
            {stage === 'turn' && '–¢—ë—Ä–Ω'}
            {stage === 'river' && '–†–∏–≤–µ—Ä'}
            {stage === 'showdown' && '–í—Å–∫—Ä—ã—Ç–∏–µ'}
          </div>
        </div>

        {/* Community Cards */}
        <div className={styles.communityCards}>
          {(communityCards || []).map((card, index) => (
            <div
              key={index}
              className={`${styles.communityCardWrapper} ${
                animatingCards.includes(index) ? styles.cardSlideIn : ''
              }`}
              style={{ animationDelay: `${index * 0.1}s` }}
            >
              <PlayingCard 
                suit={card.suit} 
                rank={card.rank} 
                faceUp={true} 
                isWinning={isWinningCard(card)}
                isCommunity={true}
              />
            </div>
          ))}
        </div>

        {/* Central BET plaque */}
        <div className={styles.bettingArea}>
          <button className={styles.betButton}>BET</button>
          <div className={styles.betAmount}>{pot}</div>
        </div>

        {/* Table chips */}
        <div className={styles.chipStack}>
          <div className={`${styles.chip} ${styles.red}`}></div>
          <div className={`${styles.chip} ${styles.blue}`}></div>
          <div className={`${styles.chip} ${styles.green}`}></div>
        </div>

        {/* –†–µ–Ω–¥–µ—Ä–∏–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –≤ –∏—Ö –ø–æ–∑–∏—Ü–∏—è—Ö –≤–æ–∫—Ä—É–≥ —Å—Ç–æ–ª–∞ */}
        {(players || []).map((player, index) => (
          <Fragment key={player.id || `player-${index}-${player.name || 'unknown'}`}>
            {renderPlayerArea(player, getPlayerPosition(player.id))}
          </Fragment>
        ))}
      </div>

      {/* Decorative elements */}
      <div className={styles.decorations}>
        <div className={`${styles.decoHeart} ${styles.heart1}`}></div>
        <div className={`${styles.decoHeart} ${styles.heart2}`}></div>
        <div className={`${styles.decoHeart} ${styles.heart3}`}></div>
        <div className={`${styles.decoHeart} ${styles.heart4}`}></div>
        <div className={`${styles.decoHeart} ${styles.heart5}`}></div>
        <div className={`${styles.decoHeart} ${styles.heart6}`}></div>
        <div className={styles.rose}>üåπ</div>
      </div>

      {/* Likes counter */}
      <div className={styles.likesCounter}>
        <span className={styles.heartIcon}>‚ô°</span>
        <span className={styles.count}>10</span>
      </div>

      {/* Coins and chips balance display */}
      <div className={styles.balanceDisplay}>
        <div className={styles.balanceItem}>
          <span className={styles.balanceIcon}>ü™ô</span>
          <span className={styles.balanceAmount}>{coins}</span>
          <span className={styles.balanceLabel}>–ú–æ–Ω–µ—Ç—ã</span>
        </div>
        <div className={styles.balanceItem}>
          <span className={styles.balanceIcon}>üé∞</span>
          <span className={styles.balanceAmount}>{mainPlayerStack}</span>
          <span className={styles.balanceLabel}>–§–∏—à–∫–∏</span>
        </div>
        {currentPlayer && currentPlayer.stack < 200 && (
          <Button 
            onClick={() => setShowRebuyModal(true)}
            variant="secondary"
            className={styles.rebuyButton}
          >
            –î–æ–∫—É–ø–∏—Ç—å —Ñ–∏—à–∫–∏
          </Button>
        )}
      </div>

      {/* Rebuy modal */}
      {showRebuyModal && (
        <div className={styles.modalOverlay}>
          <div className={styles.rebuyModal}>
            <h3 className={styles.modalTitle}>–î–æ–∫—É–ø–∫–∞ —Ñ–∏—à–µ–∫</h3>
            <p className={styles.modalText}>
              –í–∞—à —Å—Ç–µ–∫: {mainPlayerStack} —Ñ–∏—à–µ–∫. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–æ–∫—É–ø–∫–∞: 100 –º–æ–Ω–µ—Ç = 1000 —Ñ–∏—à–µ–∫
            </p>
            <div className={styles.rebuyInputGroup}>
              <label className={styles.rebuyLabel}>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç (100-500):</label>
              <div className={styles.rebuyInputWrapper}>
                <span className={styles.currencyIcon}>ü™ô</span>
                <input
                  type="number"
                  value={rebuyAmount}
                  onChange={(e) => setRebuyAmount(Math.max(100, Math.min(500, parseInt(e.target.value) || 100)))}
                  className={styles.rebuyInput}
                  min="100"
                  max="500"
                />
                <span className={styles.chipsConversion}>= {rebuyAmount * 10} —Ñ–∏—à–µ–∫</span>
              </div>
            </div>
            <div className={styles.modalActions}>
              <Button onClick={() => setShowRebuyModal(false)} variant="secondary">
                –û—Ç–º–µ–Ω–∞
              </Button>
              <Button 
                onClick={handleRebuy}
                variant="primary"
                disabled={coins < rebuyAmount}
              >
                –î–æ–∫—É–ø–∏—Ç—å –∑–∞ {rebuyAmount} ü™ô
              </Button>
            </div>
          </div>
        </div>
      )}

      {/* Action buttons */}
      {isPlayerTurn && gameState && gameState.status !== 'finished' && (
        <div className={styles.actions}>
          {(allowedActions || []).includes('fold') && <Button onClick={() => onAction('fold')}>–°–±—Ä–æ—Å–∏—Ç—å</Button>}
          {(allowedActions || []).includes('check') && <Button onClick={() => onAction('check')}>–ß–µ–∫</Button>}
          {(allowedActions || []).includes('call') && <Button onClick={() => onAction('call')}>–£—Ä–∞–≤–Ω—è—Ç—å {callAmount > 0 ? ` (${callAmount})` : ''}</Button>}
          
          {(allowedActions || []).includes('raise') && (
            <div className={styles.raiseContainer}>
              <Button onClick={() => onAction('raise', raiseAmount)} variant="primary">
                –ü–æ–≤—ã—Å–∏—Ç—å –¥–æ {raiseAmount}
              </Button>
              <input 
                type="range"
                min={minRaise}
                max={maxRaise}
                value={raiseAmount}
                onChange={handleRaiseChange}
                className={styles.raiseSlider}
              />
            </div>
          )}
        </div>
      )}
    </div>
  );
};

PokerTable.propTypes = {
  gameState: PropTypes.object,
  onAction: PropTypes.func.isRequired,
  userId: PropTypes.string.isRequired,
};

export default PokerTable; 