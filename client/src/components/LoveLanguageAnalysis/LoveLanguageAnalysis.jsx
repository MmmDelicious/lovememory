import React, { useState, useEffect } from 'react';
import styles from './LoveLanguageAnalysis.module.css';
import smartMascotService from '../../services/smartMascot.service';
import { FaHeart, FaClock, FaComments, FaHandsHelping, FaGift, FaChartPie, FaLightbulb } from 'react-icons/fa';

const LOVE_LANGUAGES = {
  physical_touch: {
    name: '–ü—Ä–∏–∫–æ—Å–Ω–æ–≤–µ–Ω–∏—è',
    icon: FaHeart,
    color: '#E91E63',
    description: '–í—ã—Ä–∞–∂–µ–Ω–∏–µ –ª—é–±–≤–∏ —á–µ—Ä–µ–∑ –æ–±—ä—è—Ç–∏—è, –ø–æ—Ü–µ–ª—É–∏ –∏ –Ω–µ–∂–Ω—ã–µ –ø—Ä–∏–∫–æ—Å–Ω–æ–≤–µ–Ω–∏—è'
  },
  quality_time: {
    name: '–í—Ä–µ–º—è –≤–º–µ—Å—Ç–µ',
    icon: FaClock,
    color: '#2196F3',
    description: '–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥—Ä—É–≥ —Å –¥—Ä—É–≥–æ–º –±–µ–∑ –æ—Ç–≤–ª–µ—á–µ–Ω–∏–π'
  },
  words_of_affirmation: {
    name: '–°–ª–æ–≤–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏',
    icon: FaComments,
    color: '#4CAF50',
    description: '–í—ã—Ä–∞–∂–µ–Ω–∏–µ —á—É–≤—Å—Ç–≤ —á–µ—Ä–µ–∑ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç—ã, —Å–ª–æ–≤–∞ –ª—é–±–≤–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏'
  },
  acts_of_service: {
    name: '–ü–æ–º–æ—â—å –∏ –∑–∞–±–æ—Ç–∞',
    icon: FaHandsHelping,
    color: '#FF9800',
    description: '–ü—Ä–æ—è–≤–ª–µ–Ω–∏–µ –∑–∞–±–æ—Ç—ã —á–µ—Ä–µ–∑ –¥–µ–π—Å—Ç–≤–∏—è –∏ –ø–æ–º–æ—â—å –≤ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã—Ö –¥–µ–ª–∞—Ö'
  },
  receiving_gifts: {
    name: '–ü–æ–¥–∞—Ä–∫–∏',
    icon: FaGift,
    color: '#9C27B0',
    description: '–í—ã—Ä–∞–∂–µ–Ω–∏–µ –ª—é–±–≤–∏ —á–µ—Ä–µ–∑ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏ –∏ —Å—é—Ä–ø—Ä–∏–∑—ã'
  }
};

const LoveLanguageAnalysis = ({ events = [], interactions = [], user = null }) => {
  const [analysis, setAnalysis] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [selectedLanguage, setSelectedLanguage] = useState(null);

  useEffect(() => {
    const performAnalysis = async () => {
      setIsLoading(true);
      try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —è–∑—ã–∫–æ–≤ –ª—é–±–≤–∏
        const loveLanguageData = smartMascotService.analyzeLoveLanguages(events, interactions);
        setAnalysis(loveLanguageData);
      } catch (error) {
        console.error('Error analyzing love languages:', error);
      } finally {
        setIsLoading(false);
      }
    };

    if (events.length > 0) {
      performAnalysis();
    } else {
      setIsLoading(false);
    }
  }, [events, interactions]);

  if (isLoading) {
    return (
      <div className={styles.container}>
        <div className={styles.header}>
          <FaChartPie className={styles.headerIcon} />
          <h3>–ê–Ω–∞–ª–∏–∑ —è–∑—ã–∫–æ–≤ –ª—é–±–≤–∏</h3>
        </div>
        <div className={styles.loadingContainer}>
          <div className={styles.loadingSpinner}></div>
          <p>–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—à–∏ —Å–ø–æ—Å–æ–±—ã –≤—ã—Ä–∞–∂–µ–Ω–∏—è –ª—é–±–≤–∏...</p>
        </div>
      </div>
    );
  }

  if (!analysis || Object.values(analysis.analysis).every(value => value === 0)) {
    return (
      <div className={styles.container}>
        <div className={styles.header}>
          <FaChartPie className={styles.headerIcon} />
          <h3>–ê–Ω–∞–ª–∏–∑ —è–∑—ã–∫–æ–≤ –ª—é–±–≤–∏</h3>
        </div>
        <div className={styles.emptyState}>
          <FaHeart className={styles.emptyIcon} />
          <p>–°–æ–∑–¥–∞–π—Ç–µ –±–æ–ª—å—à–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤–º–µ—Å—Ç–µ, —á—Ç–æ–±—ã –º—ã —Å–º–æ–≥–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à–∏ —è–∑—ã–∫–∏ –ª—é–±–≤–∏</p>
        </div>
      </div>
    );
  }

  const totalScore = Object.values(analysis.analysis).reduce((sum, value) => sum + value, 0);
  const maxScore = Math.max(...Object.values(analysis.analysis));

  return (
    <div className={styles.container}>
      <div className={styles.header}>
        <FaChartPie className={styles.headerIcon} />
        <h3>–í–∞—à–∏ —è–∑—ã–∫–∏ –ª—é–±–≤–∏</h3>
        <p>–ö–∞–∫ –≤—ã –≤—ã—Ä–∞–∂–∞–µ—Ç–µ –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ –ª—é–±–æ–≤—å</p>
      </div>

      <div className={styles.languagesGrid}>
        {Object.entries(LOVE_LANGUAGES).map(([key, language]) => {
          const score = analysis.analysis[key] || 0;
          const percentage = totalScore > 0 ? Math.round((score / totalScore) * 100) : 0;
          const isTopLanguage = score === maxScore && score > 0;
          const IconComponent = language.icon;

          return (
            <div 
              key={key}
              className={`${styles.languageCard} ${isTopLanguage ? styles.topLanguage : ''} ${selectedLanguage === key ? styles.selected : ''}`}
              onClick={() => setSelectedLanguage(selectedLanguage === key ? null : key)}
              style={{ '--language-color': language.color }}
            >
              <div className={styles.languageIcon}>
                <IconComponent />
                {isTopLanguage && <div className={styles.topBadge}>–¢–æ–ø</div>}
              </div>
              
              <div className={styles.languageInfo}>
                <h4>{language.name}</h4>
                <div className={styles.scoreBar}>
                  <div 
                    className={styles.scoreFill}
                    style={{ 
                      width: `${percentage}%`,
                      backgroundColor: language.color
                    }}
                  />
                </div>
                <span className={styles.percentage}>{percentage}%</span>
              </div>
            </div>
          );
        })}
      </div>

      {selectedLanguage && (
        <div className={styles.languageDetails}>
          <div className={styles.detailsHeader}>
            <div 
              className={styles.detailsIcon}
              style={{ backgroundColor: LOVE_LANGUAGES[selectedLanguage].color }}
            >
              {React.createElement(LOVE_LANGUAGES[selectedLanguage].icon)}
            </div>
            <h4>{LOVE_LANGUAGES[selectedLanguage].name}</h4>
          </div>
          <p>{LOVE_LANGUAGES[selectedLanguage].description}</p>
          
          <div className={styles.score}>
            <span>–í–∞—à –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å: </span>
            <strong>{analysis.analysis[selectedLanguage]} –±–∞–ª–ª–æ–≤</strong>
          </div>
        </div>
      )}

      {analysis.dominant.length > 0 && (
        <div className={styles.insights}>
          <div className={styles.insightsHeader}>
            <FaLightbulb className={styles.insightsIcon} />
            <h4>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h4>
          </div>
          
          <div className={styles.dominantLanguages}>
            <h5>–í–∞—à–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —è–∑—ã–∫–∏ –ª—é–±–≤–∏:</h5>
            <div className={styles.dominantList}>
              {analysis.dominant.slice(0, 2).map(([languageKey, score], index) => (
                <div key={languageKey} className={styles.dominantItem}>
                  <span className={styles.dominantRank}>#{index + 1}</span>
                  <span className={styles.dominantName}>
                    {LOVE_LANGUAGES[languageKey].name}
                  </span>
                  <span className={styles.dominantScore}>{score} –±–∞–ª–ª–æ–≤</span>
                </div>
              ))}
            </div>
          </div>

          {analysis.suggestions.length > 0 && (
            <div className={styles.suggestions}>
              <h5>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —É–∫—Ä–µ–ø–ª–µ–Ω–∏—è –æ—Ç–Ω–æ—à–µ–Ω–∏–π:</h5>
              <ul className={styles.suggestionsList}>
                {analysis.suggestions.map((suggestion, index) => (
                  <li key={index} className={styles.suggestionItem}>
                    {suggestion}
                  </li>
                ))}
              </ul>
            </div>
          )}
        </div>
      )}

      <div className={styles.footer}>
        <p className={styles.footerText}>
          üí° –ü–æ–Ω–∏–º–∞–Ω–∏–µ —è–∑—ã–∫–æ–≤ –ª—é–±–≤–∏ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ª—É—á—à–µ –≤—ã—Ä–∞–∂–∞—Ç—å —á—É–≤—Å—Ç–≤–∞ –∏ –ø–æ–Ω–∏–º–∞—Ç—å –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
        </p>
      </div>
    </div>
  );
};

export default LoveLanguageAnalysis;

