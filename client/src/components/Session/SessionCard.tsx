import React, { useState } from 'react';
import { Session } from '../../../types/models';
import sessionService from '../../services/session.service';
import styles from './SessionCard.module.css';

interface SessionCardProps {
  session: Session;
  onUpdate?: (session: Session) => void;
  onDelete?: (sessionId: string) => void;
  showActions?: boolean;
  compact?: boolean;
}

export const SessionCard: React.FC<SessionCardProps> = ({
  session,
  onUpdate,
  onDelete,
  showActions = true,
  compact = false
}) => {
  const [loading, setLoading] = useState(false);
  const [showDetails, setShowDetails] = useState(false);

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'active':
        return 'üî¥'; // Active/Live
      case 'paused':
        return '‚è∏Ô∏è'; // Paused
      case 'completed':
        return '‚úÖ'; // Completed
      case 'cancelled':
        return '‚ùå'; // Cancelled
      default:
        return '‚è±Ô∏è'; // Default
    }
  };

  const getSessionTypeIcon = (type: string) => {
    switch (type) {
      case 'date':
        return 'üíï';
      case 'activity':
        return 'üéØ';
      case 'conversation':
        return 'üí¨';
      case 'planning':
        return 'üìã';
      case 'reflection':
        return 'ü§î';
      case 'exercise':
        return 'üèÉ‚Äç‚ôÄÔ∏è';
      case 'learning':
        return 'üìö';
      default:
        return 'üìù';
    }
  };

  const formatDuration = (durationMinutes: number) => {
    if (!durationMinutes) return '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
    
    const hours = Math.floor(durationMinutes / 60);
    const minutes = durationMinutes % 60;
    
    if (hours > 0) {
      return `${hours}—á ${minutes}–º`;
    }
    return `${minutes}–º`;
  };

  const handleAction = async (action: string) => {
    if (loading) return;
    
    setLoading(true);
    try {
      let updatedSession;
      
      switch (action) {
        case 'pause':
          await sessionService.pauseSession(session.id);
          updatedSession = { ...session, status: 'paused' };
          break;
        case 'resume':
          await sessionService.resumeSession(session.id);
          updatedSession = { ...session, status: 'active' };
          break;
        case 'complete':
          await sessionService.completeSession(session.id);
          updatedSession = { ...session, status: 'completed', ended_at: new Date().toISOString() };
          break;
        case 'cancel':
          const reason = prompt('–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–º–µ–Ω—ã (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):');
          await sessionService.cancelSession(session.id, reason);
          updatedSession = { ...session, status: 'cancelled' };
          break;
        case 'delete':
          if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —Å–µ—Å—Å–∏—é?')) {
            onDelete?.(session.id);
          }
          return;
        default:
          return;
      }
      
      onUpdate?.(updatedSession);
    } catch (error) {
      console.error(`Error ${action} session:`, error);
      alert(`–û—à–∏–±–∫–∞ –ø—Ä–∏ ${action === 'pause' ? '–ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–µ' : action === 'resume' ? '–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏' : action === 'complete' ? '–∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏' : '–æ—Ç–º–µ–Ω–µ'} —Å–µ—Å—Å–∏–∏`);
    } finally {
      setLoading(false);
    }
  };

  const handleAddGoal = async () => {
    const goal = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–ª—å:');
    if (!goal) return;
    
    try {
      await sessionService.addGoalToSession(session.id, goal);
      const updatedSession = {
        ...session,
        goals: [...(session.goals || []), goal]
      };
      onUpdate?.(updatedSession);
    } catch (error) {
      console.error('Error adding goal:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ü–µ–ª–∏');
    }
  };

  const handleAddAchievement = async () => {
    const achievement = prompt('–í–≤–µ–¥–∏—Ç–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ:');
    if (!achievement) return;
    
    try {
      await sessionService.addAchievementToSession(session.id, achievement);
      const updatedSession = {
        ...session,
        achievements: [...(session.achievements || []), achievement]
      };
      onUpdate?.(updatedSession);
    } catch (error) {
      console.error('Error adding achievement:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è');
    }
  };

  if (compact) {
    return (
      <div className={`${styles.sessionCard} ${styles.compact}`}>
        <div className={styles.compactHeader}>
          <span className={styles.typeIcon}>
            {getSessionTypeIcon(session.session_type)}
          </span>
          <span className={styles.title}>{session.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</span>
          <span className={styles.status}>
            {getStatusIcon(session.status)}
          </span>
        </div>
        <div className={styles.compactMeta}>
          <span className={styles.duration}>
            {formatDuration(session.duration_minutes)}
          </span>
          {session.quality_rating && (
            <span className={styles.rating}>
              {'‚≠ê'.repeat(session.quality_rating)}
            </span>
          )}
        </div>
      </div>
    );
  }

  return (
    <div className={styles.sessionCard}>
      <div className={styles.header}>
        <div className={styles.titleSection}>
          <span className={styles.typeIcon}>
            {getSessionTypeIcon(session.session_type)}
          </span>
          <div>
            <h3 className={styles.title}>
              {session.title || `–°–µ—Å—Å–∏—è ${session.session_type}`}
            </h3>
            <p className={styles.description}>{session.description}</p>
          </div>
        </div>
        <div className={styles.statusSection}>
          <span className={styles.status}>
            {getStatusIcon(session.status)} {session.status}
          </span>
          {session.quality_rating && (
            <span className={styles.rating}>
              {'‚≠ê'.repeat(session.quality_rating)}
            </span>
          )}
        </div>
      </div>

      <div className={styles.details}>
        <div className={styles.timeInfo}>
          <span>üìÖ {new Date(session.started_at).toLocaleString()}</span>
          {session.ended_at && (
            <span>üèÅ {new Date(session.ended_at).toLocaleString()}</span>
          )}
          <span>‚è±Ô∏è {formatDuration(session.duration_minutes)}</span>
        </div>

        {session.participants && session.participants.length > 0 && (
          <div className={styles.participants}>
            <span>üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏: {session.participants.length}</span>
          </div>
        )}

        {(session.goals?.length > 0 || session.achievements?.length > 0) && (
          <button 
            className={styles.detailsToggle}
            onClick={() => setShowDetails(!showDetails)}
          >
            {showDetails ? 'üîº –°–∫—Ä—ã—Ç—å –¥–µ—Ç–∞–ª–∏' : 'üîΩ –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏'}
          </button>
        )}

        {showDetails && (
          <div className={styles.expandedDetails}>
            {session.goals && session.goals.length > 0 && (
              <div className={styles.goalsSection}>
                <h4>üéØ –¶–µ–ª–∏:</h4>
                <ul>
                  {session.goals.map((goal, index) => (
                    <li key={index}>{goal}</li>
                  ))}
                </ul>
              </div>
            )}

            {session.achievements && session.achievements.length > 0 && (
              <div className={styles.achievementsSection}>
                <h4>üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</h4>
                <ul>
                  {session.achievements.map((achievement, index) => (
                    <li key={index}>{achievement}</li>
                  ))}
                </ul>
              </div>
            )}

            {session.notes && (
              <div className={styles.notesSection}>
                <h4>üìù –ó–∞–º–µ—Ç–∫–∏:</h4>
                <p>{session.notes}</p>
              </div>
            )}
          </div>
        )}
      </div>

      {showActions && (
        <div className={styles.actions}>
          {session.status === 'active' && (
            <>
              <button 
                onClick={() => handleAction('pause')}
                disabled={loading}
                className={styles.pauseButton}
              >
                ‚è∏Ô∏è –ü–∞—É–∑–∞
              </button>
              <button 
                onClick={() => handleAction('complete')}
                disabled={loading}
                className={styles.completeButton}
              >
                ‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å
              </button>
            </>
          )}

          {session.status === 'paused' && (
            <>
              <button 
                onClick={() => handleAction('resume')}
                disabled={loading}
                className={styles.resumeButton}
              >
                ‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å
              </button>
              <button 
                onClick={() => handleAction('complete')}
                disabled={loading}
                className={styles.completeButton}
              >
                ‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å
              </button>
            </>
          )}

          {(session.status === 'active' || session.status === 'paused') && (
            <>
              <button 
                onClick={handleAddGoal}
                disabled={loading}
                className={styles.goalButton}
              >
                üéØ –¶–µ–ª—å
              </button>
              <button 
                onClick={handleAddAchievement}
                disabled={loading}
                className={styles.achievementButton}
              >
                üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
              </button>
              <button 
                onClick={() => handleAction('cancel')}
                disabled={loading}
                className={styles.cancelButton}
              >
                ‚ùå –û—Ç–º–µ–Ω–∏—Ç—å
              </button>
            </>
          )}

          {session.status === 'completed' && (
            <button 
              onClick={() => handleAction('delete')}
              disabled={loading}
              className={styles.deleteButton}
            >
              üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
            </button>
          )}
        </div>
      )}
    </div>
  );
};
