import React, { useState, useEffect } from 'react';
import sessionService from '../../services/session.service';
import styles from './SessionStartModal.module.css';

interface SessionStartModalProps {
  pairId: string;
  onStart: (sessionData: any) => void;
  onClose: () => void;
}

const SESSION_TYPES = [
  { value: 'date', label: 'üíï –°–≤–∏–¥–∞–Ω–∏–µ', description: '–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –≤–µ—á–µ—Ä –∏–ª–∏ –≤—Ä–µ–º—è–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –≤–º–µ—Å—Ç–µ' },
  { value: 'activity', label: 'üéØ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', description: '–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏–ª–∏ —Å–ø–æ—Ä—Ç' },
  { value: 'conversation', label: 'üí¨ –†–∞–∑–≥–æ–≤–æ—Ä', description: '–ì–ª—É–±–æ–∫–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä –∏–ª–∏ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ' },
  { value: 'planning', label: 'üìã –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', description: '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±—É–¥—É—â–∏—Ö —Å–æ–±—ã—Ç–∏–π' },
  { value: 'reflection', label: 'ü§î –†–µ—Ñ–ª–µ–∫—Å–∏—è', description: '–û–±—Å—É–∂–¥–µ–Ω–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–π –∏ —á—É–≤—Å—Ç–≤' },
  { value: 'exercise', label: 'üèÉ‚Äç‚ôÄÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞', description: '–°–æ–≤–º–µ—Å—Ç–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∏–ª–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è' },
  { value: 'learning', label: 'üìö –û–±—É—á–µ–Ω–∏–µ', description: '–ò–∑—É—á–µ–Ω–∏–µ —á–µ–≥–æ-—Ç–æ –Ω–æ–≤–æ–≥–æ –≤–º–µ—Å—Ç–µ' },
  { value: 'creative', label: 'üé® –¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ', description: '–¢–≤–æ—Ä—á–µ—Å–∫–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å' },
  { value: 'relaxation', label: 'üòå –û—Ç–¥—ã—Ö', description: '–°–ø–æ–∫–æ–π–Ω–æ–µ –≤—Ä–µ–º—è–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ' },
  { value: 'other', label: 'üìù –î—Ä—É–≥–æ–µ', description: '–î—Ä—É–≥–æ–π —Ç–∏–ø —Å–µ—Å—Å–∏–∏' }
];

export const SessionStartModal: React.FC<SessionStartModalProps> = ({
  pairId,
  onStart,
  onClose
}) => {
  const [formData, setFormData] = useState({
    session_type: 'date',
    title: '',
    description: '',
    goals: [] as string[],
    participants: [] as string[],
    metadata: {}
  });
  const [loading, setLoading] = useState(false);
  const [popularTypes, setPopularTypes] = useState<any[]>([]);
  const [currentGoal, setCurrentGoal] = useState('');

  useEffect(() => {
    loadPopularTypes();
  }, []);

  const loadPopularTypes = async () => {
    try {
      const response = await sessionService.getPopularSessionTypes(pairId);
      setPopularTypes(response.data || []);
    } catch (error) {
      console.error('Error loading popular types:', error);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!formData.session_type) {
      alert('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–µ—Å—Å–∏–∏');
      return;
    }

    setLoading(true);
    try {
      await onStart(formData);
    } catch (error) {
      console.error('Error starting session:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleInputChange = (field: string, value: any) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const addGoal = () => {
    if (currentGoal.trim()) {
      setFormData(prev => ({
        ...prev,
        goals: [...prev.goals, currentGoal.trim()]
      }));
      setCurrentGoal('');
    }
  };

  const removeGoal = (index: number) => {
    setFormData(prev => ({
      ...prev,
      goals: prev.goals.filter((_, i) => i !== index)
    }));
  };

  const getSelectedTypeInfo = () => {
    return SESSION_TYPES.find(type => type.value === formData.session_type);
  };

  const getPopularTypesForDisplay = () => {
    return popularTypes.slice(0, 3).map(pt => 
      SESSION_TYPES.find(st => st.value === pt.type)
    ).filter(Boolean);
  };

  return (
    <div className={styles.modalOverlay} onClick={onClose}>
      <div className={styles.modal} onClick={e => e.stopPropagation()}>
        <div className={styles.header}>
          <h2>‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é</h2>
          <button onClick={onClose} className={styles.closeButton}>√ó</button>
        </div>

        <form onSubmit={handleSubmit} className={styles.form}>
          {/* Session Type Selection */}
          <div className={styles.field}>
            <label className={styles.label}>–¢–∏–ø —Å–µ—Å—Å–∏–∏ *</label>
            
            {/* Popular Types Quick Select */}
            {getPopularTypesForDisplay().length > 0 && (
              <div className={styles.popularTypes}>
                <span className={styles.popularLabel}>üî• –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ:</span>
                <div className={styles.popularButtons}>
                  {getPopularTypesForDisplay().map(type => (
                    <button
                      key={type!.value}
                      type="button"
                      onClick={() => handleInputChange('session_type', type!.value)}
                      className={`${styles.popularButton} ${
                        formData.session_type === type!.value ? styles.selected : ''
                      }`}
                    >
                      {type!.label}
                    </button>
                  ))}
                </div>
              </div>
            )}

            {/* All Types Grid */}
            <div className={styles.typeGrid}>
              {SESSION_TYPES.map(type => (
                <div
                  key={type.value}
                  className={`${styles.typeCard} ${
                    formData.session_type === type.value ? styles.selected : ''
                  }`}
                  onClick={() => handleInputChange('session_type', type.value)}
                >
                  <div className={styles.typeLabel}>{type.label}</div>
                  <div className={styles.typeDescription}>{type.description}</div>
                </div>
              ))}
            </div>

            {/* Selected Type Info */}
            {getSelectedTypeInfo() && (
              <div className={styles.selectedTypeInfo}>
                <strong>{getSelectedTypeInfo()!.label}</strong>
                <span>{getSelectedTypeInfo()!.description}</span>
              </div>
            )}
          </div>

          {/* Title */}
          <div className={styles.field}>
            <label className={styles.label}>–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏</label>
            <input
              type="text"
              value={formData.title}
              onChange={(e) => handleInputChange('title', e.target.value)}
              placeholder={`–ù–∞–ø—Ä–∏–º–µ—Ä: "–ü—Ä–æ–≥—É–ª–∫–∞ –≤ –ø–∞—Ä–∫–µ" –∏–ª–∏ "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—É—Å–∫–∞"`}
              className={styles.input}
            />
            <div className={styles.hint}>
              –û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
            </div>
          </div>

          {/* Description */}
          <div className={styles.field}>
            <label className={styles.label}>–û–ø–∏—Å–∞–Ω–∏–µ</label>
            <textarea
              value={formData.description}
              onChange={(e) => handleInputChange('description', e.target.value)}
              placeholder="–ß—Ç–æ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –¥–µ–ª–∞—Ç—å –≤–æ –≤—Ä–µ–º—è —Å–µ—Å—Å–∏–∏?"
              className={styles.textarea}
              rows={3}
            />
          </div>

          {/* Goals */}
          <div className={styles.field}>
            <label className={styles.label}>üéØ –¶–µ–ª–∏ —Å–µ—Å—Å–∏–∏</label>
            <div className={styles.goalInput}>
              <input
                type="text"
                value={currentGoal}
                onChange={(e) => setCurrentGoal(e.target.value)}
                placeholder="–î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å..."
                className={styles.input}
                onKeyPress={(e) => e.key === 'Enter' && (e.preventDefault(), addGoal())}
              />
              <button
                type="button"
                onClick={addGoal}
                disabled={!currentGoal.trim()}
                className={styles.addButton}
              >
                ‚ûï
              </button>
            </div>
            
            {formData.goals.length > 0 && (
              <div className={styles.goalsList}>
                {formData.goals.map((goal, index) => (
                  <div key={index} className={styles.goalItem}>
                    <span>{goal}</span>
                    <button
                      type="button"
                      onClick={() => removeGoal(index)}
                      className={styles.removeButton}
                    >
                      ‚ùå
                    </button>
                  </div>
                ))}
              </div>
            )}
          </div>

          {/* Form Actions */}
          <div className={styles.actions}>
            <button
              type="button"
              onClick={onClose}
              className={styles.cancelButton}
              disabled={loading}
            >
              –û—Ç–º–µ–Ω–∞
            </button>
            <button
              type="submit"
              className={styles.startButton}
              disabled={loading || !formData.session_type}
            >
              {loading ? (
                <>
                  <div className={styles.spinner}></div>
                  –°–æ–∑–¥–∞–µ–º...
                </>
              ) : (
                <>
                  ‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é
                </>
              )}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};
