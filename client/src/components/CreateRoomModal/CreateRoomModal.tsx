import React, { useState } from 'react';
import { X, Users, Coins, Trophy, Clock, Shield, Target, Crown, Brain, Sparkles, Zap } from 'lucide-react';
import styles from './CreateRoomModal.module.css';

interface CreateRoomModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSubmit: (formData: any) => void;
  gameType: string;
}

interface GameSettings {
  name: string;
  icon: React.ReactNode;
  maxPlayersOptions: number[];
  defaultMaxPlayers: number;
  hasDifficulty: boolean;
  hasTimeLimit: boolean;
  hasPrivateRooms: boolean;
  minBet: number;
  maxBet: number;
  defaultBet: number;
  description: string;
  specialSettings?: {
    label: string;
    options: { value: string; label: string }[];
    default: string;
  }[];
}

const GAME_SETTINGS: Record<string, GameSettings> = {
  'tic-tac-toe': {
    name: '–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏',
    icon: <Target size={20} />,
    maxPlayersOptions: [2],
    defaultMaxPlayers: 2,
    hasDifficulty: false,
    hasTimeLimit: true,
    hasPrivateRooms: false,
    minBet: 10,
    maxBet: 500,
    defaultBet: 25,
    description: '–ë—ã—Å—Ç—Ä–∞—è –∏–≥—Ä–∞ –Ω–∞ –ª–æ–≥–∏–∫—É',
    specialSettings: [
      {
        label: '–õ–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Ö–æ–¥',
        options: [
          { value: '30', label: '30 —Å–µ–∫—É–Ω–¥' },
          { value: '60', label: '1 –º–∏–Ω—É—Ç–∞' },
          { value: '120', label: '2 –º–∏–Ω—É—Ç—ã' },
          { value: 'unlimited', label: '–ë–µ–∑ –ª–∏–º–∏—Ç–∞' }
        ],
        default: '60'
      }
    ]
  },
  'chess': {
    name: '–®–∞—Ö–º–∞—Ç—ã',
    icon: <Crown size={20} />,
    maxPlayersOptions: [2],
    defaultMaxPlayers: 2,
    hasDifficulty: true,
    hasTimeLimit: true,
    hasPrivateRooms: true,
    minBet: 50,
    maxBet: 2000,
    defaultBet: 100,
    description: '–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∞—è –±–∏—Ç–≤–∞ —É–º–æ–≤',
    specialSettings: [
      {
        label: '–ö–æ–Ω—Ç—Ä–æ–ª—å –≤—Ä–µ–º–µ–Ω–∏',
        options: [
          { value: 'blitz', label: '–ë–ª–∏—Ü (5 –º–∏–Ω)' },
          { value: 'rapid', label: '–†–∞–ø–∏–¥ (15 –º–∏–Ω)' },
          { value: 'classical', label: '–ö–ª–∞—Å—Å–∏–∫–∞ (30 –º–∏–Ω)' },
          { value: 'unlimited', label: '–ë–µ–∑ –ª–∏–º–∏—Ç–∞' }
        ],
        default: 'rapid'
      }
    ]
  },
  'quiz': {
    name: '–ö–≤–∏–∑',
    icon: <Brain size={20} />,
    maxPlayersOptions: [2, 3, 4],
    defaultMaxPlayers: 2,
    hasDifficulty: true,
    hasTimeLimit: true,
    hasPrivateRooms: true,
    minBet: 20,
    maxBet: 1000,
    defaultBet: 50,
    description: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è',
    specialSettings: [
      {
        label: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤',
        options: [
          { value: 'general', label: '–û–±—â–∏–µ –∑–Ω–∞–Ω–∏—è' },
          { value: 'science', label: '–ù–∞—É–∫–∞' },
          { value: 'history', label: '–ò—Å—Ç–æ—Ä–∏—è' },
          { value: 'sports', label: '–°–ø–æ—Ä—Ç' },
          { value: 'entertainment', label: '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è' }
        ],
        default: 'general'
      },
      {
        label: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤',
        options: [
          { value: '10', label: '10 –≤–æ–ø—Ä–æ—Å–æ–≤' },
          { value: '15', label: '15 –≤–æ–ø—Ä–æ—Å–æ–≤' },
          { value: '20', label: '20 –≤–æ–ø—Ä–æ—Å–æ–≤' }
        ],
        default: '15'
      }
    ]
  },
  'poker': {
    name: '–ü–æ–∫–µ—Ä',
    icon: <Sparkles size={20} />,
    maxPlayersOptions: [2, 3, 4, 5, 6],
    defaultMaxPlayers: 4,
    hasDifficulty: false,
    hasTimeLimit: false,
    hasPrivateRooms: true,
    minBet: 100,
    maxBet: 5000,
    defaultBet: 200,
    description: '–ö–∞—Ä—Ç–æ—á–Ω–∞—è –∏–≥—Ä–∞ –Ω–∞ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ',
    specialSettings: [
      {
        label: '–¢–∏–ø –ø–æ–∫–µ—Ä–∞',
        options: [
          { value: 'texas', label: '–¢–µ—Ö–∞—Å—Å–∫–∏–π –•–æ–ª–¥–µ–º' },
          { value: 'omaha', label: '–û–º–∞—Ö–∞' },
          { value: 'stud', label: '–°—Ç–∞–¥ –ø–æ–∫–µ—Ä' }
        ],
        default: 'texas'
      },
      {
        label: '–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–ª–∞–π–Ω–¥–æ–≤',
        options: [
          { value: 'fixed', label: '–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ' },
          { value: 'increasing', label: '–†–∞—Å—Ç—É—â–∏–µ' }
        ],
        default: 'fixed'
      }
    ]
  },
  'memory': {
    name: '–ú–µ–º–æ—Ä–∏',
    icon: <Zap size={20} />,
    maxPlayersOptions: [2, 3, 4],
    defaultMaxPlayers: 2,
    hasDifficulty: true,
    hasTimeLimit: true,
    hasPrivateRooms: false,
    minBet: 15,
    maxBet: 300,
    defaultBet: 30,
    description: '–¢—Ä–µ–Ω–∏—Ä—É–π—Ç–µ –ø–∞–º—è—Ç—å',
    specialSettings: [
      {
        label: '–†–∞–∑–º–µ—Ä –ø–æ–ª—è',
        options: [
          { value: '4x4', label: '4√ó4 (16 –∫–∞—Ä—Ç)' },
          { value: '6x6', label: '6√ó6 (36 –∫–∞—Ä—Ç)' },
          { value: '8x8', label: '8√ó8 (64 –∫–∞—Ä—Ç—ã)' }
        ],
        default: '4x4'
      }
    ]
  }
};

const CreateRoomModal: React.FC<CreateRoomModalProps> = ({
  isOpen,
  onClose,
  onSubmit,
  gameType
}) => {
  const gameSettings = GAME_SETTINGS[gameType] || GAME_SETTINGS['tic-tac-toe'];
  
  const [formData, setFormData] = useState({
    bet: gameSettings.defaultBet,
    maxPlayers: gameSettings.defaultMaxPlayers,
    difficulty: 'medium' as 'easy' | 'medium' | 'hard',
    isPrivate: false,
    timeLimit: gameSettings.specialSettings?.[0]?.default || '',
    specialSettings: gameSettings.specialSettings?.reduce((acc, setting) => {
      acc[setting.label] = setting.default;
      return acc;
    }, {} as Record<string, string>) || {}
  });

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    onSubmit(formData);
  };

  const updateFormData = (key: string, value: any) => {
    setFormData(prev => ({ ...prev, [key]: value }));
  };

  const updateSpecialSetting = (label: string, value: string) => {
    setFormData(prev => ({
      ...prev,
      specialSettings: {
        ...prev.specialSettings,
        [label]: value
      }
    }));
  };

  if (!isOpen) return null;

  return (
    <div className={styles.overlay} onClick={onClose}>
      <div className={styles.modal} onClick={e => e.stopPropagation()}>
        <div className={styles.header}>
          <div className={styles.gameInfo}>
            <div className={styles.gameIcon}>
              {gameSettings.icon}
            </div>
            <div>
              <h2 className={styles.title}>–°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É</h2>
              <p className={styles.gameTitle}>{gameSettings.name}</p>
            </div>
          </div>
          <button onClick={onClose} className={styles.closeButton}>
            <X size={20} />
          </button>
        </div>

        <div className={styles.gameDescription}>
          <p>{gameSettings.description}</p>
        </div>

        <form onSubmit={handleSubmit} className={styles.form}>
          {/* –°—Ç–∞–≤–∫–∞ */}
          <div className={styles.field}>
            <label className={styles.label}>
              <Coins size={16} />
              –°—Ç–∞–≤–∫–∞
            </label>
            <div className={styles.inputWrapper}>
              <input
                type="number"
                min={gameSettings.minBet}
                max={gameSettings.maxBet}
                step="10"
                value={formData.bet}
                onChange={e => updateFormData('bet', Number(e.target.value))}
                className={styles.input}
              />
              <span className={styles.inputHint}>
                {gameSettings.minBet} - {gameSettings.maxBet} –º–æ–Ω–µ—Ç
              </span>
            </div>
          </div>

          {/* –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ */}
          <div className={styles.field}>
            <label className={styles.label}>
              <Users size={16} />
              –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤
            </label>
            <div className={styles.playerOptions}>
              {gameSettings.maxPlayersOptions.map(count => (
                <button
                  key={count}
                  type="button"
                  className={`${styles.playerOption} ${formData.maxPlayers === count ? styles.active : ''}`}
                  onClick={() => updateFormData('maxPlayers', count)}
                >
                  <Users size={16} />
                  <span>{count} {count === 2 ? '–∏–≥—Ä–æ–∫–∞' : count <= 4 ? '–∏–≥—Ä–æ–∫–∞' : '–∏–≥—Ä–æ–∫–æ–≤'}</span>
                </button>
              ))}
            </div>
          </div>

          {/* –°–ª–æ–∂–Ω–æ—Å—Ç—å (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è) */}
          {gameSettings.hasDifficulty && (
            <div className={styles.field}>
              <label className={styles.label}>
                <Trophy size={16} />
                –°–ª–æ–∂–Ω–æ—Å—Ç—å
              </label>
              <div className={styles.difficultyOptions}>
                {[
                  { value: 'easy', label: 'üü¢ –õ–µ–≥–∫–æ', description: '–î–ª—è –Ω–æ–≤–∏—á–∫–æ–≤' },
                  { value: 'medium', label: 'üü° –°—Ä–µ–¥–Ω–µ', description: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∏–≥—Ä–∞' },
                  { value: 'hard', label: 'üî¥ –°–ª–æ–∂–Ω–æ', description: '–î–ª—è –æ–ø—ã—Ç–Ω—ã—Ö' }
                ].map(option => (
                  <label key={option.value} className={styles.difficultyLabel}>
                    <input
                      type="radio"
                      name="difficulty"
                      value={option.value}
                      checked={formData.difficulty === option.value}
                      onChange={e => updateFormData('difficulty', e.target.value)}
                      className={styles.radioInput}
                    />
                    <div className={styles.difficultyCard}>
                      <span className={styles.difficultyEmoji}>{option.label}</span>
                      <span className={styles.difficultyDescription}>{option.description}</span>
                    </div>
                  </label>
                ))}
              </div>
            </div>
          )}

          {/* –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∏–≥—Ä—ã */}
          {gameSettings.specialSettings?.map(setting => (
            <div key={setting.label} className={styles.field}>
              <label className={styles.label}>
                <Clock size={16} />
                {setting.label}
              </label>
              <select
                value={formData.specialSettings[setting.label] || setting.default}
                onChange={e => updateSpecialSetting(setting.label, e.target.value)}
                className={styles.select}
              >
                {setting.options.map(option => (
                  <option key={option.value} value={option.value}>
                    {option.label}
                  </option>
                ))}
              </select>
            </div>
          ))}

          {/* –ü—Ä–∏–≤–∞—Ç–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞ (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è) */}
          {gameSettings.hasPrivateRooms && (
            <div className={styles.field}>
              <label className={styles.checkboxLabel}>
                <input
                  type="checkbox"
                  checked={formData.isPrivate}
                  onChange={e => updateFormData('isPrivate', e.target.checked)}
                  className={styles.checkbox}
                />
                <div className={styles.checkboxCustom}>
                  <Shield size={14} />
                </div>
                <div className={styles.checkboxText}>
                  <span>–ü—Ä–∏–≤–∞—Ç–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞</span>
                  <span className={styles.checkboxDescription}>
                    –¢–æ–ª—å–∫–æ –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é
                  </span>
                </div>
              </label>
            </div>
          )}

          <div className={styles.actions}>
            <button type="button" onClick={onClose} className={styles.cancelButton}>
              –û—Ç–º–µ–Ω–∞
            </button>
            <button type="submit" className={styles.submitButton}>
              <span>–°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É</span>
              <Coins size={16} />
              <span>{formData.bet}</span>
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default CreateRoomModal;