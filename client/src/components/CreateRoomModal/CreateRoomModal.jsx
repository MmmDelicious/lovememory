import React, { useState } from 'react';
import PropTypes from 'prop-types';
import Modal from '../Modal/Modal';
import Button from '../Button/Button';
import styles from './CreateRoomModal.module.css';

const CreateRoomModal = ({ isOpen, onClose, onSubmit, gameType }) => {
  const [bet, setBet] = useState(10);
  const [error, setError] = useState('');
  const [selectedTable, setSelectedTable] = useState('standard'); // standard, premium, elite

  const handleSubmit = () => {
    if (bet <= 0) {
      setError('–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.');
      return;
    }
    
    // –î–ª—è –ø–æ–∫–µ—Ä–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–π-–∏–Ω
    if (gameType === '–ü–æ–∫–µ—Ä' && bet < 100) {
      setError('–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–π-–∏–Ω –¥–ª—è –ø–æ–∫–µ—Ä–∞: 100 –º–æ–Ω–µ—Ç.');
      return;
    }
    
    setError('');
    onSubmit({ bet, tableType: selectedTable });
  };

  const getTableInfo = (tableType) => {
    switch (tableType) {
      case 'standard':
        return { blinds: '5/10', minBuyIn: 100, maxBuyIn: 500, name: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å—Ç–æ–ª' };
      case 'premium':
        return { blinds: '25/50', minBuyIn: 250, maxBuyIn: 1000, name: '–ü—Ä–µ–º–∏—É–º —Å—Ç–æ–ª' };
      case 'elite':
        return { blinds: '100/200', minBuyIn: 1000, maxBuyIn: 2000, name: '–≠–ª–∏—Ç–Ω—ã–π —Å—Ç–æ–ª' };
      default:
        return { blinds: '5/10', minBuyIn: 100, maxBuyIn: 500, name: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å—Ç–æ–ª' };
    }
  };

  const renderGameSpecificFields = () => {
    if (gameType === '–ü–æ–∫–µ—Ä') {
      const tableInfo = getTableInfo(selectedTable);
      
      return (
        <div className={styles.fieldGroup}>
          {/* –í—ã–±–æ—Ä —Ç–∏–ø–∞ —Å—Ç–æ–ª–∞ */}
          <label className={styles.label}>–¢–∏–ø —Å—Ç–æ–ª–∞:</label>
          <div className={styles.tableSelector}>
            {['standard', 'premium', 'elite'].map((type) => {
              const info = getTableInfo(type);
              return (
                <div
                  key={type}
                  className={`${styles.tableOption} ${selectedTable === type ? styles.selected : ''}`}
                  onClick={() => {
                    setSelectedTable(type);
                    setBet(info.minBuyIn); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–π-–∏–Ω
                  }}
                >
                  <div className={styles.tableName}>{info.name}</div>
                  <div className={styles.tableBlinds}>–ë–ª–∞–π–Ω–¥—ã: {info.blinds}</div>
                  <div className={styles.tableBuyIn}>
                    –ë–∞–π-–∏–Ω: {info.minBuyIn}-{info.maxBuyIn} ü™ô
                  </div>
                </div>
              );
            })}
          </div>

          {/* –í—ã–±–æ—Ä –±–∞–π-–∏–Ω–∞ */}
          <label htmlFor="bet-input" className={styles.label}>
            –í–∞—à –±–∞–π-–∏–Ω ({tableInfo.minBuyIn}-{tableInfo.maxBuyIn} –º–æ–Ω–µ—Ç):
          </label>
          <div className={styles.inputWrapper}>
            <span className={styles.currencyIcon}>ü™ô</span>
            <input
              id="bet-input"
              type="number"
              value={bet}
              onChange={(e) => setBet(parseInt(e.target.value, 10))}
              className={styles.input}
              min={tableInfo.minBuyIn}
              max={tableInfo.maxBuyIn}
              placeholder={`–û—Ç ${tableInfo.minBuyIn} –¥–æ ${tableInfo.maxBuyIn}`}
            />
            <span className={styles.chipsConversion}>= {bet * 10} —Ñ–∏—à–µ–∫</span>
          </div>
          {error && <p className={styles.errorText}>{error}</p>}
        </div>
      );
    }
    
    // –î–ª—è –¥—Ä—É–≥–∏—Ö –∏–≥—Ä –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    return (
      <div className={styles.fieldGroup}>
        <label htmlFor="bet-input" className={styles.label}>
          –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞:
        </label>
        <div className={styles.inputWrapper}>
          <span className={styles.currencyIcon}>ü™ô</span>
          <input
            id="bet-input"
            type="number"
            value={bet}
            onChange={(e) => setBet(parseInt(e.target.value, 10))}
            className={styles.input}
            min="1"
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä, 10"
          />
        </div>
        {error && <p className={styles.errorText}>{error}</p>}
      </div>
    );
  };

  return (
    <Modal isOpen={isOpen} onClose={onClose} title={`–°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É: ${gameType}`}>
      <div className={styles.content}>
        {renderGameSpecificFields()}
        <div className={styles.actions}>
          <Button onClick={onClose} variant="secondary">
            –û—Ç–º–µ–Ω–∞
          </Button>
          <Button onClick={handleSubmit} variant="primary">
            –°–æ–∑–¥–∞—Ç—å
          </Button>
        </div>
      </div>
    </Modal>
  );
};

CreateRoomModal.propTypes = {
  isOpen: PropTypes.bool.isRequired,
  onClose: PropTypes.func.isRequired,
  onSubmit: PropTypes.func.isRequired,
  gameType: PropTypes.string.isRequired,
};

export default CreateRoomModal; 