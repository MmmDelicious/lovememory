import React, { useState, useEffect, useCallback } from 'react';
import { useUser } from '../../store/hooks';
import { usePairing } from '../../hooks/usePairing';
import api from '../../services/api';
import styles from './ActivityTracker.module.css';

interface ActivityData {
  steps: number;
  calories: number;
  activeMinutes: number;
  distance: number;
}

interface TrackerStats {
  current: {
    steps: number;
    calories: number;
    activeMinutes: number;
    distance: number;
    goalProgress: number;
  };
  goals: {
    daily: number;
    weekly: number;
  };
  streaks: {
    current: number;
    longest: number;
    totalDays: number;
  };
  achievements: string[];
  trends: {
    trend: string;
    change: number;
    changePercent: number;
    direction: string;
  };
  weeklyActivity: Array<{
    date: string;
    steps: number;
    goalAchieved: boolean;
  }>;
}

const ActivityTracker: React.FC = () => {
  const user = useUser();
  const { pairing } = usePairing(user);
  const [stats, setStats] = useState<TrackerStats | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [showManualInput, setShowManualInput] = useState(false);
  const [manualData, setManualData] = useState<ActivityData>({
    steps: 0,
    calories: 0,
    activeMinutes: 0,
    distance: 0
  });

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    if (user) {
      loadStats();
    }
  }, [user]);

  const loadStats = useCallback(async () => {
    if (!user) return;
    
    setIsLoading(true);
    try {
      const response = await api.get('/activity-tracker/stats');
      setStats(response.data.data);
    } catch (error) {
      console.error('Failed to load activity stats:', error);
    } finally {
      setIsLoading(false);
    }
  }, [user]);

  const updateActivity = useCallback(async (activityData: ActivityData) => {
    if (!user) return;
    
    setIsLoading(true);
    try {
      const response = await api.post('/activity-tracker/activity', activityData);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö
      if (response.data.data.newAchievements.length > 0) {
        alert(response.data.data.message);
      }
      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      await loadStats();
      setShowManualInput(false);
      setManualData({ steps: 0, calories: 0, activeMinutes: 0, distance: 0 });
    } catch (error) {
      console.error('Failed to update activity:', error);
    } finally {
      setIsLoading(false);
    }
  }, [user, loadStats]);

  const handleManualSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (manualData.steps > 0) {
      updateActivity(manualData);
    }
  };

  const handleQuickUpdate = (steps: number) => {
    updateActivity({
      steps,
      calories: Math.round(steps * 0.04), // –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç –∫–∞–ª–æ—Ä–∏–π
      activeMinutes: Math.round(steps / 100), // –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∏–Ω—É—Ç
      distance: Math.round((steps * 0.0008) * 100) / 100 // –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –≤ –∫–º
    });
  };

  const updateGoals = useCallback(async (dailyGoal: number, weeklyGoal: number) => {
    if (!user) return;
    
    try {
      await api.put('/activity-tracker/goals', { dailyGoal, weeklyGoal });
      await loadStats();
    } catch (error) {
      console.error('Failed to update goals:', error);
    }
  }, [user, loadStats]);

  if (!user) return null;

  if (isLoading && !stats) {
    return (
      <div className={styles.container}>
        <div className={styles.loading}>–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏...</div>
      </div>
    );
  }

  return (
    <div className={styles.container}>
      <div className={styles.header}>
        <h2>üéØ –¢—Ä–µ–∫–µ—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</h2>
        <p>–û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Å–≤–æ–∏ —à–∞–≥–∏ –∏ —É–∫—Ä–µ–ø–ª—è–π—Ç–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</p>
      </div>

      {stats ? (
        <>
          {/* –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ */}
          <div className={styles.metricsGrid}>
            <div className={styles.metricCard}>
              <div className={styles.metricIcon}>üë£</div>
              <div className={styles.metricValue}>{stats.current.steps.toLocaleString()}</div>
              <div className={styles.metricLabel}>–®–∞–≥–∏ —Å–µ–≥–æ–¥–Ω—è</div>
              <div className={styles.progressBar}>
                <div 
                  className={styles.progressFill} 
                  style={{ width: `${Math.min(stats.current.goalProgress, 100)}%` }}
                />
              </div>
              <div className={styles.goalText}>
                {stats.current.goalProgress}% –æ—Ç —Ü–µ–ª–∏ ({stats.goals.daily.toLocaleString()})
              </div>
            </div>

            <div className={styles.metricCard}>
              <div className={styles.metricIcon}>üî•</div>
              <div className={styles.metricValue}>{stats.current.calories}</div>
              <div className={styles.metricLabel}>–ö–∞–ª–æ—Ä–∏–∏</div>
            </div>

            <div className={styles.metricCard}>
              <div className={styles.metricIcon}>‚è∞</div>
              <div className={styles.metricValue}>{stats.current.activeMinutes}</div>
              <div className={styles.metricLabel}>–ê–∫—Ç–∏–≤–Ω—ã–µ –º–∏–Ω—É—Ç—ã</div>
            </div>

            <div className={styles.metricCard}>
              <div className={styles.metricIcon}>üìè</div>
              <div className={styles.metricValue}>{stats.current.distance} –∫–º</div>
              <div className={styles.metricLabel}>–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ</div>
            </div>
          </div>

          {/* –°–µ—Ä–∏–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è */}
          <div className={styles.statsRow}>
            <div className={styles.statsCard}>
              <h3>üî• –°–µ—Ä–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</h3>
              <div className={styles.streakInfo}>
                <div className={styles.streakItem}>
                  <span className={styles.streakLabel}>–¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è:</span>
                  <span className={styles.streakValue}>{stats.streaks.current} –¥–Ω–µ–π</span>
                </div>
                <div className={styles.streakItem}>
                  <span className={styles.streakLabel}>–õ—É—á—à–∞—è —Å–µ—Ä–∏—è:</span>
                  <span className={styles.streakValue}>{stats.streaks.longest} –¥–Ω–µ–π</span>
                </div>
                <div className={styles.streakItem}>
                  <span className={styles.streakLabel}>–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–Ω–µ–π:</span>
                  <span className={styles.streakValue}>{stats.streaks.totalDays}</span>
                </div>
              </div>
            </div>

            <div className={styles.statsCard}>
              <h3>üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</h3>
              <div className={styles.achievementsList}>
                {stats.achievements.length > 0 ? (
                  stats.achievements.map((achievement, index) => (
                    <div key={index} className={styles.achievement}>
                      <span className={styles.achievementIcon}>üéñÔ∏è</span>
                      <span className={styles.achievementText}>{achievement}</span>
                    </div>
                  ))
                ) : (
                  <p className={styles.noAchievements}>–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π. –î–æ—Å—Ç–∏–≥–∞–π—Ç–µ —Ü–µ–ª–µ–π!</p>
                )}
              </div>
            </div>
          </div>

          {/* –¢—Ä–µ–Ω–¥—ã */}
          <div className={styles.trendsCard}>
            <h3>üìà –¢—Ä–µ–Ω–¥—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</h3>
            <div className={styles.trendInfo}>
              <div className={`${styles.trendIndicator} ${styles[stats.trends.direction]}`}>
                {stats.trends.direction === 'up' && '‚ÜóÔ∏è'}
                {stats.trends.direction === 'down' && '‚ÜòÔ∏è'}
                {stats.trends.direction === 'stable' && '‚Üí'}
              </div>
              <div className={styles.trendDetails}>
                <span className={styles.trendLabel}>
                  {stats.trends.trend === 'increasing' && '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–∞—Å—Ç–µ—Ç!'}
                  {stats.trends.trend === 'decreasing' && '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–Ω–∏–∂–∞–µ—Ç—Å—è'}
                  {stats.trends.trend === 'stable' && '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω–∞'}
                </span>
                <span className={styles.trendChange}>
                  {stats.trends.change > 0 && '+'}
                  {stats.trends.change} —à–∞–≥–æ–≤ ({stats.trends.changePercent}%)
                </span>
              </div>
            </div>
          </div>

          {/* –ù–µ–¥–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å */}
          <div className={styles.weeklyCard}>
            <h3>üìÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –Ω–µ–¥–µ–ª—é</h3>
            <div className={styles.weeklyChart}>
              {stats.weeklyActivity.map((day, index) => (
                <div key={index} className={styles.weekDay}>
                  <div className={styles.dayLabel}>
                    {new Date(day.date).toLocaleDateString('ru-RU', { weekday: 'short' })}
                  </div>
                  <div className={styles.dayBar}>
                    <div 
                      className={`${styles.barFill} ${day.goalAchieved ? styles.goalAchieved : ''}`}
                      style={{ 
                        height: `${Math.min((day.steps / stats.goals.daily) * 100, 100)}%` 
                      }}
                    />
                  </div>
                  <div className={styles.daySteps}>{day.steps.toLocaleString()}</div>
                </div>
              ))}
            </div>
          </div>
        </>
      ) : (
        <div className={styles.noData}>
          <p>–¢—Ä–µ–∫–µ—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!</p>
        </div>
      )}

      {/* –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
      <div className={styles.quickActions}>
        <h3>‚ö° –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</h3>
        <div className={styles.actionButtons}>
          <button 
            className={styles.actionBtn}
            onClick={() => handleQuickUpdate(5000)}
            disabled={isLoading}
          >
            +5,000 —à–∞–≥–æ–≤
          </button>
          <button 
            className={styles.actionBtn}
            onClick={() => handleQuickUpdate(10000)}
            disabled={isLoading}
          >
            +10,000 —à–∞–≥–æ–≤
          </button>
          <button 
            className={styles.actionBtn}
            onClick={() => handleQuickUpdate(15000)}
            disabled={isLoading}
          >
            +15,000 —à–∞–≥–æ–≤
          </button>
          <button 
            className={`${styles.actionBtn} ${styles.primary}`}
            onClick={() => setShowManualInput(!showManualInput)}
          >
            üìù –†—É—á–Ω–æ–π –≤–≤–æ–¥
          </button>
        </div>
      </div>

      {/* –†—É—á–Ω–æ–π –≤–≤–æ–¥ */}
      {showManualInput && (
        <div className={styles.manualInput}>
          <h3>üìù –†—É—á–Ω–æ–π –≤–≤–æ–¥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</h3>
          <form onSubmit={handleManualSubmit}>
            <div className={styles.inputGroup}>
              <label htmlFor="steps">–®–∞–≥–∏:</label>
              <input
                type="number"
                id="steps"
                value={manualData.steps}
                onChange={(e) => setManualData(prev => ({ ...prev, steps: parseInt(e.target.value) || 0 }))}
                placeholder="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤"
                min="0"
              />
            </div>
            
            <div className={styles.inputGroup}>
              <label htmlFor="calories">–ö–∞–ª–æ—Ä–∏–∏:</label>
              <input
                type="number"
                id="calories"
                value={manualData.calories}
                onChange={(e) => setManualData(prev => ({ ...prev, calories: parseInt(e.target.value) || 0 }))}
                placeholder="–°–æ–∂–∂–µ–Ω–Ω—ã–µ –∫–∞–ª–æ—Ä–∏–∏"
                min="0"
              />
            </div>
            
            <div className={styles.inputGroup}>
              <label htmlFor="activeMinutes">–ê–∫—Ç–∏–≤–Ω—ã–µ –º–∏–Ω—É—Ç—ã:</label>
              <input
                type="number"
                id="activeMinutes"
                value={manualData.activeMinutes}
                onChange={(e) => setManualData(prev => ({ ...prev, activeMinutes: parseInt(e.target.value) || 0 }))}
                placeholder="–ê–∫—Ç–∏–≤–Ω—ã–µ –º–∏–Ω—É—Ç—ã"
                min="0"
              />
            </div>
            
            <div className={styles.inputGroup}>
              <label htmlFor="distance">–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–∫–º):</label>
              <input
                type="number"
                id="distance"
                value={manualData.distance}
                onChange={(e) => setManualData(prev => ({ ...prev, distance: parseFloat(e.target.value) || 0 }))}
                placeholder="–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–º"
                min="0"
                step="0.01"
              />
            </div>
            
            <div className={styles.formActions}>
              <button 
                type="submit" 
                className={styles.submitBtn}
                disabled={isLoading || manualData.steps === 0}
              >
                {isLoading ? '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...' : '–û–±–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'}
              </button>
              <button 
                type="button" 
                className={styles.cancelBtn}
                onClick={() => setShowManualInput(false)}
              >
                –û—Ç–º–µ–Ω–∞
              </button>
            </div>
          </form>
        </div>
      )}

      {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–ª—è–º–∏ */}
      <div className={styles.goalsSection}>
        <h3>üéØ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–ª—è–º–∏</h3>
        <div className={styles.goalsForm}>
          <div className={styles.goalInput}>
            <label htmlFor="dailyGoal">–î–Ω–µ–≤–Ω–∞—è —Ü–µ–ª—å (—à–∞–≥–∏):</label>
            <input
              type="number"
              id="dailyGoal"
              defaultValue={stats?.goals.daily || 10000}
              min="1000"
              step="1000"
            />
          </div>
          
          <div className={styles.goalInput}>
            <label htmlFor="weeklyGoal">–ù–µ–¥–µ–ª—å–Ω–∞—è —Ü–µ–ª—å (—à–∞–≥–∏):</label>
            <input
              type="number"
              id="weeklyGoal"
              defaultValue={stats?.goals.weekly || 70000}
              min="7000"
              step="1000"
            />
          </div>
          
          <button 
            className={styles.updateGoalsBtn}
            onClick={() => {
              const dailyGoal = parseInt((document.getElementById('dailyGoal') as HTMLInputElement).value);
              const weeklyGoal = parseInt((document.getElementById('weeklyGoal') as HTMLInputElement).value);
              if (dailyGoal && weeklyGoal) {
                updateGoals(dailyGoal, weeklyGoal);
              }
            }}
            disabled={isLoading}
          >
            –û–±–Ω–æ–≤–∏—Ç—å —Ü–µ–ª–∏
          </button>
        </div>
      </div>
    </div>
  );
};

export default ActivityTracker;
