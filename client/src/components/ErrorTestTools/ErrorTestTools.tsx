import React from 'react';
import { useNavigate } from 'react-router-dom';
import { useHaptics } from '../../hooks/useHaptics';
import { 
  showError, 
  showNetworkError, 
  showServerError, 
  showNotFoundError, 
  showAuthError, 
  showPermissionError 
} from '../../utils/errorHandler';
import styles from './ErrorTestTools.module.css';

interface ErrorTestToolsProps {
  mode?: 'test' | 'demo';
  title?: string;
  showBackButton?: boolean;
}

const ErrorTestTools: React.FC<ErrorTestToolsProps> = ({ 
  mode = 'test', 
  title,
  showBackButton = true 
}) => {
  const navigate = useNavigate();
  const { ctaHaptic, errorHaptic } = useHaptics();

  const isDemo = mode === 'demo';
  const displayTitle = title || (isDemo ? '–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫' : '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫');

  const handleError = (type: string) => {
    // Haptic feedback –¥–ª—è –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π —Å –æ—à–∏–±–∫–∞–º–∏
    errorHaptic();
    
    const prefix = isDemo ? '–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è' : '–¢–µ—Å—Ç–æ–≤–∞—è';
    
    switch (type) {
      case 'network':
        showNetworkError();
        break;
      case 'server':
        showServerError({
          message: `${prefix} –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞`,
          type: `${mode} Server Error`,
          details: isDemo ? '–≠—Ç–æ –ø—Ä–∏–º–µ—Ä –æ—à–∏–±–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ —Å –¥–µ—Ç–∞–ª—è–º–∏' : '–≠—Ç–æ —Å–∏–º—É–ª—è—Ü–∏—è –æ—à–∏–±–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞'
        });
        break;
      case 'notfound':
        showNotFoundError(isDemo ? '–¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–µ—Å—É—Ä—Å' : '–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ—Å—É—Ä—Å');
        break;
      case 'auth':
        showAuthError();
        break;
      case 'permission':
        showPermissionError();
        break;
      case 'custom':
        showError(418, '–Ø —á–∞–π–Ω–∏–∫!', {
          message: `–≠—Ç–æ ${prefix.toLowerCase()} –∫–∞—Å—Ç–æ–º–Ω–∞—è –æ—à–∏–±–∫–∞`,
          type: `${mode} Custom Error`,
          timestamp: new Date().toISOString(),
          details: isDemo ? '–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫' : undefined
        });
        break;
      case 'javascript':
        throw new Error(`${prefix} JavaScript –æ—à–∏–±–∫–∞`);
      case 'promise':
        Promise.reject(new Error(`${prefix} –æ—à–∏–±–∫–∞ –ø—Ä–æ–º–∏—Å–∞`));
        break;
      default:
        break;
    }
  };

  const errorButtons = [
    { key: 'javascript', label: 'JavaScript –æ—à–∏–±–∫–∞', emoji: '‚ö°' },
    { key: 'promise', label: '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞', emoji: 'üîÑ' },
    { key: 'custom', label: '–ö–∞—Å—Ç–æ–º–Ω–∞—è –æ—à–∏–±–∫–∞ (418)', emoji: 'ü´ñ' },
    { key: 'network', label: '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏', emoji: 'üì°' },
    { key: 'server', label: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (500)', emoji: 'üî•' },
    { key: 'notfound', label: '–ù–µ –Ω–∞–π–¥–µ–Ω–æ (404)', emoji: 'üîç' },
    { key: 'auth', label: '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (401)', emoji: 'üîí' },
    { key: 'permission', label: '–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ (403)', emoji: '‚õî' }
  ];

  return (
    <div className={styles.container}>
      <div className={styles.header}>
        <h1 className={styles.title}>{displayTitle}</h1>
        <p className={styles.subtitle}>
          {isDemo 
            ? '–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫ —Å–∏—Å—Ç–µ–º—ã' 
            : '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫'
          }
        </p>
      </div>

      <div className={styles.buttonGrid}>
        {errorButtons.map(({ key, label, emoji }) => (
          <button 
            key={key}
            onClick={() => handleError(key)} 
            className={`${styles.errorButton} ${styles[`${key}Button`]} pressable stagger-item`}
          >
            <span className={styles.emoji}>{emoji}</span>
            <span className={styles.label}>{label}</span>
          </button>
        ))}
      </div>

      <div className={styles.warning}>
        <p className={styles.warningText}>
          ‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –≠—Ç–∏ –∫–Ω–æ–ø–∫–∏ –≤—ã–∑—ã–≤–∞—é—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏ –¥–ª—è {isDemo ? '–¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏' : '—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'} —Å–∏—Å—Ç–µ–º—ã!
        </p>
      </div>

      {showBackButton && (
        <div className={styles.actions}>
          <button 
            onClick={() => {
              ctaHaptic();
              navigate('/dashboard');
            }} 
            className={`${styles.backButton} btn btn-secondary`}
          >
            ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
          </button>
          {!isDemo && (
            <button 
              onClick={() => {
                ctaHaptic();
                navigate('/error-demo');
              }} 
              className={`${styles.demoButton} btn btn-primary`}
            >
              üéØ –î–µ–º–æ-—Å—Ç—Ä–∞–Ω–∏—Ü–∞
            </button>
          )}
        </div>
      )}
    </div>
  );
};

export default ErrorTestTools;
