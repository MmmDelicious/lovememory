import React, { useState, useRef, useEffect } from 'react';
import { Bell, Check, X, Trash2 } from 'lucide-react';
import styles from './NotificationDropdown.module.css';

interface Notification {
  id: string;
  title: string;
  message: string;
  type: 'info' | 'success' | 'warning' | 'error';
  isRead: boolean;
  createdAt: string;
}

interface NotificationDropdownProps {
  notifications?: Notification[];
}

// Mock —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
const mockNotifications: Notification[] = [
  {
    id: '1',
    title: '–ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ',
    message: '–í–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä –¥–æ–±–∞–≤–∏–ª —Å–æ–±—ã—Ç–∏–µ "–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —É–∂–∏–Ω"',
    type: 'info',
    isRead: false,
    createdAt: '2 –º–∏–Ω –Ω–∞–∑–∞–¥'
  },
  {
    id: '2',
    title: '–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
    message: '–ü–∞—Ä—Ç–∏—è –≤ —à–∞—Ö–º–∞—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—ã –ø–æ–±–µ–¥–∏–ª–∏!',
    type: 'success',
    isRead: false,
    createdAt: '1 —á–∞—Å –Ω–∞–∑–∞–¥'
  },
  {
    id: '3',
    title: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ',
    message: '–°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞',
    type: 'warning',
    isRead: true,
    createdAt: '2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥'
  }
];

const NotificationDropdown: React.FC<NotificationDropdownProps> = ({ 
  notifications = mockNotifications 
}) => {
  const [isOpen, setIsOpen] = useState(false);
  const [notificationList, setNotificationList] = useState(notifications);
  const dropdownRef = useRef<HTMLDivElement>(null);

  const unreadCount = notificationList.filter(n => !n.isRead).length;

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {
        setIsOpen(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  const markAsRead = (id: string) => {
    setNotificationList(prev => 
      prev.map(n => n.id === id ? { ...n, isRead: true } : n)
    );
  };

  const markAllAsRead = () => {
    setNotificationList(prev => 
      prev.map(n => ({ ...n, isRead: true }))
    );
  };

  const removeNotification = (id: string) => {
    setNotificationList(prev => 
      prev.filter(n => n.id !== id)
    );
  };

  const getNotificationIcon = (type: string) => {
    switch (type) {
      case 'success': return '‚úÖ';
      case 'warning': return '‚ö†Ô∏è';
      case 'error': return '‚ùå';
      default: return 'üì¢';
    }
  };

  return (
    <div className={styles.notificationDropdown} ref={dropdownRef}>
      <button 
        className={styles.notificationButton}
        onClick={() => setIsOpen(!isOpen)}
        aria-label="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
      >
        <Bell size={20} />
        {unreadCount > 0 && (
          <span className={styles.notificationBadge}>{unreadCount}</span>
        )}
      </button>

      {isOpen && (
        <div className={styles.dropdown}>
          <div className={styles.header}>
            <h3>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h3>
            {unreadCount > 0 && (
              <button 
                className={styles.markAllRead}
                onClick={markAllAsRead}
              >
                <Check size={16} />
                –û—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ
              </button>
            )}
          </div>

          <div className={styles.notificationsList}>
            {notificationList.length === 0 ? (
              <div className={styles.emptyState}>
                <Bell size={24} />
                <p>–ù–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</p>
              </div>
            ) : (
              notificationList.map((notification) => (
                <div 
                  key={notification.id}
                  className={`${styles.notificationItem} ${!notification.isRead ? styles.unread : ''}`}
                  onClick={() => markAsRead(notification.id)}
                >
                  <div className={styles.notificationIcon}>
                    {getNotificationIcon(notification.type)}
                  </div>
                  
                  <div className={styles.notificationContent}>
                    <div className={styles.notificationTitle}>
                      {notification.title}
                    </div>
                    <div className={styles.notificationMessage}>
                      {notification.message}
                    </div>
                    <div className={styles.notificationTime}>
                      {notification.createdAt}
                    </div>
                  </div>

                  <button 
                    className={styles.removeButton}
                    onClick={(e) => {
                      e.stopPropagation();
                      removeNotification(notification.id);
                    }}
                  >
                    <X size={14} />
                  </button>
                </div>
              ))
            )}
          </div>

          {notificationList.length > 0 && (
            <div className={styles.footer}>
              <button className={styles.clearAll}>
                <Trash2 size={16} />
                –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ
              </button>
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default NotificationDropdown;
