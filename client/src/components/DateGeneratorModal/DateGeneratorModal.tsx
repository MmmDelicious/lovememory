import React, { useState, useEffect, useCallback } from 'react';
import { X, Calendar, Clock, DollarSign, MapPin, Star, Check, Bug } from 'lucide-react';
import dateGeneratorService from '../../services/dateGenerator.service';
import styles from './DateGeneratorModal.module.css';
import DebugDataViewer from '../DebugDataViewer/DebugDataViewer';

import type { DateOption, DateScheduleItem } from '../../../types/common';

interface ReasoningStep {
  text: string;
  timestamp: Date;
}

interface DateGeneratorModalProps {
  isOpen: boolean;
  onClose: () => void;
  onEventCreated?: (event: any) => void;
}

const DateGeneratorModal: React.FC<DateGeneratorModalProps> = ({
  isOpen,
  onClose,
  onEventCreated
}) => {
  const [step, setStep] = useState<'reasoning' | 'options' | 'calendar'>('reasoning');
  const [reasoningSteps, setReasoningSteps] = useState<ReasoningStep[]>([]);
  const [dateOptions, setDateOptions] = useState<DateOption[]>([]);
  const [selectedOption, setSelectedOption] = useState<DateOption | null>(null);
  const [selectedDate, setSelectedDate] = useState<string>('');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [showDebugData, setShowDebugData] = useState(false);
  const [userLocation, setUserLocation] = useState<{ city: string; coordinates?: { latitude: number; longitude: number } } | null>(null);

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–∏–¥–∞–Ω–∏–π –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  useEffect(() => {
    if (isOpen) {
      generateDateOptions();
    } else {
      // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
      setStep('reasoning');
      setReasoningSteps([]);
      setDateOptions([]);
      setSelectedOption(null);
      setSelectedDate('');
      setError(null);
    }
  }, [isOpen]);

  const generateDateOptions = async () => {
    setIsLoading(true);
    setError(null);
    
    try {
      // –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await dateGeneratorService.analyzeUserData();
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è –ø–æ —à–∞–≥–∞–º
      const steps = dateGeneratorService.getReasoningSteps();
      
      for (let i = 0; i < steps.length; i++) {
        await new Promise(resolve => setTimeout(resolve, 1500)); // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —à–∞–≥–∞–º–∏
        setReasoningSteps(prev => [...prev, steps[i]]);
      }
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–≤–∏–¥–∞–Ω–∏–π
      await new Promise(resolve => setTimeout(resolve, 1000));
      const result = await dateGeneratorService.generateDateOptions();
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      if (result.userLocation) {
        setUserLocation(result.userLocation);
      }
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —à–∞–≥–∏ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π
      const finalSteps = dateGeneratorService.getReasoningSteps().slice(steps.length);
      for (const step of finalSteps) {
        await new Promise(resolve => setTimeout(resolve, 800));
        setReasoningSteps(prev => [...prev, step]);
      }
      
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ result.options —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —ç—Ç–æ –º–∞—Å—Å–∏–≤
      if (result && result.options && Array.isArray(result.options)) {
        setDateOptions(result.options);
        console.log('Date options set:', result.options);
      } else {
        console.error('Invalid date options received:', result);
        setDateOptions([]); // —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∫–∞–∫ fallback
        setError('–ü–æ–ª—É—á–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      }
      
      setStep('options');
      
    } catch (err) {
      console.error('Error generating date options:', err);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–≤–∏–¥–∞–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    } finally {
      setIsLoading(false);
    }
  };

  const handleOptionSelect = (option: DateOption) => {
    setSelectedOption(option);
    setStep('calendar');
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    setSelectedDate(tomorrow.toISOString().split('T')[0]);
  };

  const handleCreateEvent = async () => {
    if (!selectedOption || !selectedDate) return;
    
    setIsLoading(true);
    try {
      const event = await dateGeneratorService.createDateEvent(selectedOption, selectedDate);
      
      if (onEventCreated) {
        onEventCreated(event);
      }
      
      onClose();
    } catch (err) {
      console.error('Error creating event:', err);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    } finally {
      setIsLoading(false);
    }
  };

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('ru-RU', {
      style: 'currency',
      currency: 'RUB',
      minimumFractionDigits: 0
    }).format(amount);
  };

  const getAtmosphereEmoji = (atmosphere: string) => {
    switch (atmosphere) {
      case 'romantic': return 'üíï';
      case 'fun': return 'üéâ';
      default: return '‚ú®';
    }
  };

  const getAtmosphereLabel = (atmosphere: string) => {
    switch (atmosphere) {
      case 'romantic': return '–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è';
      case 'fun': return '–í–µ—Å–µ–ª–∞—è';
      default: return '–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è';
    }
  };

  const getTypeLabel = (type: string) => {
    switch (type) {
      case 'entertainment': return 'üé™ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ';
      case 'cultural': return 'üé≠ –ö—É–ª—å—Ç—É—Ä–∞';
      case 'outdoor': return 'üå≥ –ü—Ä–æ–≥—É–ª–∫–∞';
      case 'active': return 'üèÉ‚Äç‚ôÇÔ∏è –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å';
      case 'food': return 'üçΩÔ∏è –ï–¥–∞';
      case 'restaurant': return 'üçΩÔ∏è –†–µ—Å—Ç–æ—Ä–∞–Ω';
      case 'cafe': return '‚òï –ö–∞—Ñ–µ';
      default: return 'üìç –ú–µ—Å—Ç–æ';
    }
  };

  if (!isOpen) return null;

  return (
    <div className={styles.modalOverlay}>
      <div className={styles.modalContainer}>
        <div className={styles.modalHeader}>
          <h2 className={styles.modalTitle}>
            {step === 'reasoning' && 'ü§î –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ...'}
            {step === 'options' && 'üíï –í–∞—Ä–∏–∞–Ω—Ç—ã —Å–≤–∏–¥–∞–Ω–∏–π'}
            {step === 'calendar' && 'üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É'}
          </h2>
          <div className={styles.headerButtons}>
            {userLocation && (
              <button 
                onClick={() => setShowDebugData(true)} 
                className={styles.debugButton}
                title="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"
              >
                <Bug size={20} />
              </button>
            )}
            <button className={styles.closeButton} onClick={onClose}>
              <X size={24} />
            </button>
          </div>
        </div>

        <div className={styles.modalContent}>
          {/* –≠—Ç–∞–ø —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π */}
          {step === 'reasoning' && (
            <div className={styles.reasoningContainer}>
              <div className={styles.reasoningSteps}>
                {reasoningSteps.map((step, index) => (
                  <div
                    key={index}
                    className={styles.reasoningStep}
                    style={{ animationDelay: `${index * 0.2}s` }}
                  >
                    <div className={styles.stepBubble}>{step.text}</div>
                  </div>
                ))}
              </div>
              
              {isLoading && (
                <div className={styles.loadingIndicator}>
                  <div className={styles.loadingSpinner}></div>
                  <p>–î—É–º–∞—é –Ω–∞–¥ –∏–¥–µ–∞–ª—å–Ω—ã–º —Å–≤–∏–¥–∞–Ω–∏–µ–º...</p>
                </div>
              )}
            </div>
          )}

          {/* –≠—Ç–∞–ø –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ */}
          {step === 'options' && (
            <div className={styles.optionsContainer}>
              <p className={styles.optionsDescription}>
                –í–æ—Ç —á—Ç–æ —è –ø–æ–¥–æ–±—Ä–∞–ª —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å! –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–π—Å—è –≤–∞—Ä–∏–∞–Ω—Ç:
              </p>
              
              <div className={styles.optionsList}>
                {Array.isArray(dateOptions) && dateOptions.length > 0 ? (
                  dateOptions.map((option, index) => (
                  <div
                    key={option.id}
                    className={styles.optionCard}
                    onClick={() => handleOptionSelect(option)}
                  >
                    <div className={styles.optionHeader}>
                      <h3 className={styles.optionTitle}>
                        {getAtmosphereEmoji(option.atmosphere)} –í–∞—Ä–∏–∞–Ω—Ç {index + 1}
                      </h3>
                      <div className={styles.optionMeta}>
                        <span className={styles.atmosphere}>
                          {getAtmosphereLabel(option.atmosphere)}
                        </span>
                      </div>
                    </div>
                    
                    <div className={styles.optionContent}>
                      <div className={styles.optionInfo}>
                        <div className={styles.infoItem}>
                          <MapPin size={16} />
                          <span>{option.activity.name}</span>
                          {option.isRealData && (
                            <span className={styles.realDataBadge}>LIVE</span>
                          )}
                          {option.activity.isEvent && (
                            <span className={styles.eventBadge}>–°–û–ë–´–¢–ò–ï</span>
                          )}
                        </div>
                        {option.activity.description && (
                          <div className={styles.placeDescription}>
                            {option.activity.description}
                          </div>
                        )}
                        <div className={styles.infoItem}>
                          <Clock size={16} />
                          <span>{Math.round(option.duration * 10) / 10}—á</span>
                        </div>
                        <div className={styles.infoItem}>
                          <DollarSign size={16} />
                          <span>{formatCurrency(option.estimatedCost)}</span>
                        </div>
                        {option.isRealData && option.activity.rating && (
                          <div className={styles.infoItem}>
                            <Star size={16} />
                            <span>{option.activity.rating}‚òÖ</span>
                          </div>
                        )}
                        {option.activitiesCount && (
                          <div className={styles.infoItem}>
                            <Calendar size={16} />
                            <span>{option.activitiesCount} –º–µ—Å—Ç</span>
                          </div>
                        )}
                      </div>
                      
                      <div className={styles.optionSchedule}>
                        {option.schedule.map((item, idx) => (
                          <div key={idx} className={styles.scheduleItem}>
                            <div className={styles.scheduleHeader}>
                              <span className={styles.scheduleTime}>
                                {item.time} - {item.endTime}
                              </span>
                              <span className={styles.scheduleType}>
                                {getTypeLabel(item.type)}
                              </span>
                            </div>
                            <span className={styles.scheduleActivity}>
                              {item.activity}
                            </span>
                            <span className={styles.scheduleDescription}>
                              {item.description}
                            </span>
                            {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–∞ –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å */}
                            {item.placeDescription && (
                              <div className={styles.schedulePlaceDescription}>
                                üí° {item.placeDescription}
                              </div>
                            )}
                            {item.location && item.location !== '–õ–æ–∫–∞—Ü–∏—è —É—Ç–æ—á–Ω—è–µ—Ç—Å—è' && (
                              <span className={styles.scheduleLocation}>
                                üìç {item.location}
                              </span>
                            )}
                          </div>
                        ))}
                      </div>
                      
                      <p className={styles.optionReasoning}>
                        {option.reasoning}
                        {option.isRealData && (
                          <span className={styles.realDataNote}>
                            üí´ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞
                          </span>
                        )}
                      </p>
                    </div>
                  </div>
                  ))
                ) : (
                  <div className={styles.noOptionsMessage}>
                    <p>ü§î –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!</p>
                  </div>
                )}
              </div>
            </div>
          )}

          {/* –≠—Ç–∞–ø –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã */}
          {step === 'calendar' && selectedOption && (
            <div className={styles.calendarContainer}>
              <div className={styles.selectedOptionSummary}>
                <h3>–í—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:</h3>
                <div className={styles.summaryCard}>
                  <h4>{getAtmosphereEmoji(selectedOption.atmosphere)} {selectedOption.title}</h4>
                  <div className={styles.summaryDetails}>
                    <div className={styles.summaryItem}>
                      <Clock size={16} />
                      <span>{Math.round(selectedOption.duration * 10) / 10}—á</span>
                    </div>
                    <div className={styles.summaryItem}>
                      <DollarSign size={16} />
                      <span>{formatCurrency(selectedOption.estimatedCost)}</span>
                    </div>
                  </div>
                </div>
              </div>
              
              <div className={styles.dateSelector}>
                <label htmlFor="eventDate" className={styles.dateLabel}>
                  <Calendar size={20} />
                  –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Å–≤–∏–¥–∞–Ω–∏—è:
                </label>
                <input
                  id="eventDate"
                  type="date"
                  value={selectedDate}
                  onChange={(e) => setSelectedDate(e.target.value)}
                  min={new Date().toISOString().split('T')[0]}
                  className={styles.dateInput}
                />
              </div>
              
              <div className={styles.actionButtons}>
                <button
                  className={styles.backButton}
                  onClick={() => setStep('options')}
                >
                  –ù–∞–∑–∞–¥ –∫ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º
                </button>
                <button
                  className={styles.createButton}
                  onClick={handleCreateEvent}
                  disabled={!selectedDate || isLoading}
                >
                  {isLoading ? (
                    <>
                      <div className={styles.buttonSpinner}></div>
                      –°–æ–∑–¥–∞—é...
                    </>
                  ) : (
                    <>
                      <Check size={20} />
                      –°–æ–∑–¥–∞—Ç—å —Å–≤–∏–¥–∞–Ω–∏–µ
                    </>
                  )}
                </button>
              </div>
            </div>
          )}

          {/* –û—à–∏–±–∫–∞ */}
          {error && (
            <div className={styles.errorContainer}>
              <p className={styles.errorMessage}>{error}</p>
              <button
                className={styles.retryButton}
                onClick={() => {
                  setError(null);
                  if (step === 'reasoning') {
                    generateDateOptions();
                  }
                }}
              >
                –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑
              </button>
            </div>
          )}
        </div>
      </div>
      
      {/* –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫ –¥–∞–Ω–Ω—ã—Ö */}
      {showDebugData && userLocation && (
        <DebugDataViewer
          isOpen={showDebugData}
          onClose={() => setShowDebugData(false)}
          city={userLocation.city}
          coordinates={userLocation.coordinates}
        />
      )}
    </div>
  );
};

export default DateGeneratorModal;
