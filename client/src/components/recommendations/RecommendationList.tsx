import React, { useState, useEffect } from 'react';
import RecommendationCard from './RecommendationCard';
import { recommendationsAPI } from '@api/recommendations';
import './RecommendationList.css';

interface RecommendationItem {
  item_id: string;
  title: string;
  category: string;
  score: number;
  reasons: string[];
  price: number;
  location?: [number, number];
}

interface RecommendationListProps {
  pairId: string;
  topK?: number;
  userLocation?: { lat: number; lon: number };
}

const RecommendationList: React.FC<RecommendationListProps> = ({ 
  pairId, 
  topK = 10, 
  userLocation 
}) => {
  const [recommendations, setRecommendations] = useState<RecommendationItem[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [selectedItem, setSelectedItem] = useState<RecommendationItem | null>(null);

  useEffect(() => {
    loadRecommendations();
  }, [pairId, topK, userLocation]);

  const loadRecommendations = async () => {
    try {
      setLoading(true);
      setError(null);
      
      const response = await recommendationsAPI.getRecommendations(
        pairId, 
        topK, 
        userLocation
      );
      
      setRecommendations(response || []);
    } catch (err) {
      console.error('Error loading recommendations:', err);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏');
    } finally {
      setLoading(false);
    }
  };

  const handleItemClick = async (item: RecommendationItem) => {
    try {
      setSelectedItem(item);
      
      // –õ–æ–≥–∏—Ä—É–µ–º –∫–ª–∏–∫
      await recommendationsAPI.logRecommendationClick(pairId, item);
      
      console.log('Selected recommendation:', item);
    } catch (err) {
      console.error('Error logging click:', err);
    }
  };

  const handleRefresh = () => {
    loadRecommendations();
  };

  if (loading) {
    return (
      <div className="recommendation-list">
        <div className="recommendation-list-header">
          <h2>üéØ AI –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h2>
        </div>
        <div className="loading-container">
          <div className="loading-spinner"></div>
          <p>–ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="recommendation-list">
        <div className="recommendation-list-header">
          <h2>üéØ AI –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h2>
        </div>
        <div className="error-container">
          <div className="error-icon">‚ö†Ô∏è</div>
          <p>{error}</p>
          <button onClick={handleRefresh} className="retry-button">
            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
          </button>
        </div>
      </div>
    );
  }

  if (recommendations.length === 0) {
    return (
      <div className="recommendation-list">
        <div className="recommendation-list-header">
          <h2>üéØ AI –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h2>
        </div>
        <div className="empty-container">
          <div className="empty-icon">ü§î</div>
          <p>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
          <button onClick={handleRefresh} className="retry-button">
            –û–±–Ω–æ–≤–∏—Ç—å
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="recommendation-list">
      <div className="recommendation-list-header">
        <h2>üéØ AI –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h2>
        <div className="recommendation-actions">
          <button onClick={handleRefresh} className="refresh-button">
            üîÑ –û–±–Ω–æ–≤–∏—Ç—å
          </button>
        </div>
      </div>

      <div className="recommendation-stats">
        <div className="stat-item">
          <span className="stat-label">–ù–∞–π–¥–µ–Ω–æ:</span>
          <span className="stat-value">{recommendations.length}</span>
        </div>
        <div className="stat-item">
          <span className="stat-label">–ú–æ–¥–µ–ª—å:</span>
          <span className="stat-value">Content-Based v1</span>
        </div>
      </div>

      {selectedItem && (
        <div className="selected-item-notification">
          <div className="notification-content">
            <span className="notification-icon">‚úÖ</span>
            <span>–í—ã–±—Ä–∞–Ω–æ: {selectedItem.title}</span>
          </div>
        </div>
      )}

      <div className="recommendations-grid">
        {recommendations.map((item, index) => (
          <RecommendationCard
            key={item.item_id}
            item={item}
            index={index}
            onItemClick={handleItemClick}
          />
        ))}
      </div>

      <div className="recommendation-footer">
        <p className="disclaimer">
          üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ –≤–∞—à–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö, –±—é–¥–∂–µ—Ç–µ –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö
        </p>
      </div>
    </div>
  );
};

export default RecommendationList;
