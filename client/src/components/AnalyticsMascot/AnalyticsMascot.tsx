import React, { useState, useEffect } from 'react';
import Lottie from 'lottie-react';
import { Brain, TrendingUp, Heart, Sparkles, X } from 'lucide-react';
import styles from './AnalyticsMascot.module.css';
import aiAnimationData from '../../assets/AI.json';

interface AnalyticsMascotProps {
  isPremium: boolean;
  onFirstLogin?: boolean;
  onDismiss?: () => void;
  userName?: string;
}

const AnalyticsMascot: React.FC<AnalyticsMascotProps> = ({ 
  isPremium, 
  onFirstLogin = false, 
  onDismiss,
  userName = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
}) => {
  const [showWelcome, setShowWelcome] = useState(onFirstLogin);
  const [currentMessageIndex, setCurrentMessageIndex] = useState(0);
  const [isVisible, setIsVisible] = useState(isPremium);

  const welcomeMessages = [
    {
      text: `–ü—Ä–∏–≤–µ—Ç, ${userName}! üéâ –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫!`,
      icon: <Sparkles className={styles.messageIcon} />,
      duration: 4000
    },
    {
      text: "–í –≤–∞—à—É –ø–∞—Ä—É —Ç–µ–ø–µ—Ä—å –≤—Å—Ç—Ä–æ–µ–Ω–∞ —É–º–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è AI –º–æ–¥–µ–ª—å, –∫–æ—Ç–æ—Ä–∞—è –∏–∑—É—á–∞–µ—Ç –≤–∞—à–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è 24/7",
      icon: <Brain className={styles.messageIcon} />,
      duration: 5000
    },
    {
      text: "–Ø –±—É–¥—É –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à–µ –æ–±—â–µ–Ω–∏–µ, —Å–æ–≤–º–µ—Å—Ç–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
      icon: <TrendingUp className={styles.messageIcon} />,
      duration: 5000
    },
    {
      text: "–ú–æ—è —Ü–µ–ª—å - –ø–æ–º–æ—á—å –≤–∞–º —Å—Ç—Ä–æ–∏—Ç—å –±–æ–ª–µ–µ –∫—Ä–µ–ø–∫–∏–µ –∏ —Å—á–∞—Å—Ç–ª–∏–≤—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è! ‚ù§Ô∏è",
      icon: <Heart className={styles.messageIcon} />,
      duration: 4000
    }
  ];

  const regularMessages = [
    "–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ –≤–∞—à –≥—Ä–∞—Ñ–∏–∫ –≥–∞—Ä–º–æ–Ω–∏–∏! üìà",
    "–£ –≤–∞—Å –æ—Ç–ª–∏—á–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏! üíñ",
    "–†–µ–∫–æ–º–µ–Ω–¥—É—é –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –≤–º–µ—Å—Ç–µ üåü",
    "–í–∞—à–∏ —è–∑—ã–∫–∏ –ª—é–±–≤–∏ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ –¥–æ–ø–æ–ª–Ω—è—é—Ç –¥—Ä—É–≥ –¥—Ä—É–≥–∞! üíï"
  ];

  useEffect(() => {
    if (!showWelcome || !isVisible) return;

    const timer = setTimeout(() => {
      if (currentMessageIndex < welcomeMessages.length - 1) {
        setCurrentMessageIndex(prev => prev + 1);
      } else {
        // –ó–∞–∫–æ–Ω—á–∏–ª–∏ –ø–æ–∫–∞–∑ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        setTimeout(() => {
          setShowWelcome(false);
          if (onDismiss) onDismiss();
        }, 2000);
      }
    }, welcomeMessages[currentMessageIndex].duration);

    return () => clearTimeout(timer);
  }, [currentMessageIndex, showWelcome, isVisible, welcomeMessages, onDismiss]);

  const handleDismiss = () => {
    setIsVisible(false);
    if (onDismiss) onDismiss();
  };

  if (!isPremium || !isVisible) return null;

  const currentMessage = showWelcome 
    ? welcomeMessages[currentMessageIndex]
    : { 
        text: regularMessages[Math.floor(Math.random() * regularMessages.length)],
        icon: <Brain className={styles.messageIcon} />,
        duration: 3000
      };

  return (
    <div className={styles.mascotContainer}>
      <div className={styles.mascotWrapper}>
        <div className={styles.lottieContainer}>
          <Lottie 
            animationData={aiAnimationData} 
            loop={true}
            className={styles.lottieAnimation}
          />
          <div className={styles.premiumBadge}>
            <Sparkles size={12} />
            AI
          </div>
        </div>
        
        <div className={`${styles.speechBubble} ${showWelcome ? styles.welcomeBubble : styles.regularBubble}`}>
          <button className={styles.closeButton} onClick={handleDismiss}>
            <X size={14} />
          </button>
          
          <div className={styles.messageHeader}>
            {currentMessage.icon}
            <span className={styles.mascotTitle}>–í–∞—à AI –ê–Ω–∞–ª–∏—Ç–∏–∫</span>
          </div>
          
          <p className={styles.messageText}>
            {currentMessage.text}
          </p>
          
          {showWelcome && (
            <div className={styles.progressDots}>
              {welcomeMessages.map((_, index) => (
                <div 
                  key={index}
                  className={`${styles.dot} ${index === currentMessageIndex ? styles.activeDot : ''} ${index < currentMessageIndex ? styles.completedDot : ''}`}
                />
              ))}
            </div>
          )}
          
          <div className={styles.bubbleTail} />
        </div>
      </div>
    </div>
  );
};

export default AnalyticsMascot;
