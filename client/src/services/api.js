import axios from 'axios';

// –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π URL —Å fallback
// –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏ Vite, –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ - –ø–æ–ª–Ω—ã–π URL
const baseURL = import.meta.env.VITE_API_BASE_URL || (import.meta.env.DEV ? '/api' : 'http://localhost:5000/api');

const api = axios.create({
  baseURL,
  withCredentials: true,
  timeout: 30000, // 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
  headers: {
    'Content-Type': 'application/json',
  },
});

// –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
let isRefreshing = false;
let failedQueue = [];

const processQueue = (error, token = null) => {
  failedQueue.forEach(prom => {
    if (error) {
      prom.reject(error);
    } else {
      prom.resolve(token);
    }
  });
  
  failedQueue = [];
};

api.interceptors.request.use(
  (config) => {
    // –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º Authorization header - –ø–æ–ª–∞–≥–∞–µ–º—Å—è –Ω–∞ httpOnly cookies
    // –∫–æ—Ç–æ—Ä—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ withCredentials: true
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// –ü–æ—Å–∫–æ–ª—å–∫—É —Ç–æ–∫–µ–Ω —Ç–µ–ø–µ—Ä—å –≤ httpOnly cookie, –º—ã –Ω–µ –º–æ–∂–µ–º –µ–≥–æ —á–∏—Ç–∞—Ç—å –∏–∑ JS
// –≠—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –Ω–æ –æ–Ω–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ —Å localStorage
const getAuthToken = () => {
  try {
    return localStorage.getItem('authToken');
  } catch (error) {
    console.warn('Failed to get auth token from localStorage:', error);
    return null;
  }
};

// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ localStorage –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä –¥–ª—è –¥—Ä—É–≥–∏—Ö API –≤—ã–∑–æ–≤–æ–≤)
const setAuthToken = (token) => {
  try {
    if (token) {
      localStorage.setItem('authToken', token);
    } else {
      localStorage.removeItem('authToken');
    }
  } catch (error) {
    console.warn('Failed to set auth token in localStorage:', error);
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ç–æ–∫–µ–Ω–∞ - –æ—á–∏—â–∞–µ–º localStorage –∏ –ø—Ä–æ—Å–∏–º —Å–µ—Ä–≤–µ—Ä –æ—á–∏—Å—Ç–∏—Ç—å cookie
const clearAuthToken = () => {
  try {
    localStorage.removeItem('authToken');
    // –ù–µ –º–æ–∂–µ–º –Ω–∞–ø—Ä—è–º—É—é –æ—á–∏—Å—Ç–∏—Ç—å httpOnly cookie - —Å–µ—Ä–≤–µ—Ä –¥–æ–ª–∂–µ–Ω —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å
  } catch (error) {
    console.warn('Failed to clear auth token:', error);
  }
};
api.interceptors.response.use(
  (response) => {
    return response;
  },
  async (error) => {
    const originalRequest = error.config;

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ —Ç–æ–ª—å–∫–æ –≤ dev —Ä–µ–∂–∏–º–µ
    if (import.meta.env.DEV) {
      console.group('API ERROR');
      console.error('Request URL:', error.config?.url);
      console.error('Request Method:', error.config?.method);
      console.error('Response Status:', error.response?.status);
      console.error('Response Data:', error.response?.data);
      console.error('Timestamp:', new Date().toISOString());
      console.groupEnd();
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ 401 –æ—à–∏–±–æ–∫ - —Å—Ä–∞–∑—É –Ω–∞ –ª–æ–≥–∏–Ω (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    if (error.response?.status === 401) {
      console.log('üü° API: Got 401 error, but skipping redirect for debugging');
      clearAuthToken();
      return Promise.reject(error);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö –æ—à–∏–±–æ–∫ (5xx)
    if (error.response?.status >= 500) {
      console.log('üü° API: Got 5xx error, but skipping redirect for debugging');
      return Promise.reject(error);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫
    if (!error.response && error.code !== 'ERR_CANCELED') {
      console.log('üü° API: Got network error, but skipping redirect for debugging');
      return Promise.reject(error);
    }

    return Promise.reject(error);
  }
);

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º API –∏ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–∫–µ–Ω–∞–º–∏
export { getAuthToken, setAuthToken, clearAuthToken };
export default api;
