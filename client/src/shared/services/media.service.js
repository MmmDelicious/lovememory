import api from './api';

/**
 * Сервис для работы с медиафайлами и их производными
 */

// Получить все производные для медиафайла
const getMediaDerivatives = async (mediaId, derivativeType = null) => {
  const params = derivativeType ? { type: derivativeType } : {};
  const response = await api.get(`/media/${mediaId}/derivatives`, { params });
  return response.data;
};

// Получить конкретный тип производного файла
const getMediaDerivative = async (mediaId, derivativeType) => {
  const response = await api.get(`/media/${mediaId}/derivatives/${derivativeType}`);
  return response.data;
};

// Создать производный файл (загрузка и обработка)
const createMediaDerivative = async (mediaId, derivativeType, file, options = {}) => {
  const formData = new FormData();
  formData.append('file', file);
  formData.append('derivative_type', derivativeType);
  
  // Добавляем опции как JSON
  if (Object.keys(options).length > 0) {
    formData.append('options', JSON.stringify(options));
  }
  
  const response = await api.post(`/media/${mediaId}/derivatives`, formData, {
    headers: {
      'Content-Type': 'multipart/form-data',
    },
  });
  return response.data;
};

// Создать thumbnail
const createThumbnail = async (mediaId, file, width = 150, height = 150, options = {}) => {
  return await createMediaDerivative(mediaId, 'thumbnail', file, {
    width,
    height,
    format: 'jpeg',
    quality: 80,
    ...options
  });
};

// Создать preview
const createPreview = async (mediaId, file, width = 800, height = 600, options = {}) => {
  return await createMediaDerivative(mediaId, 'preview', file, {
    width,
    height,
    format: 'jpeg',
    quality: 90,
    ...options
  });
};

// Создать оптимизированную версию
const createOptimized = async (mediaId, file, options = {}) => {
  return await createMediaDerivative(mediaId, 'optimized', file, {
    format: 'jpeg',
    quality: 85,
    optimization_level: 'medium',
    ...options
  });
};

// Создать WebP версию
const createWebP = async (mediaId, file, options = {}) => {
  return await createMediaDerivative(mediaId, 'webp', file, {
    format: 'webp',
    quality: 80,
    ...options
  });
};

// Создать blur hash
const generateBlurHash = async (mediaId, options = {}) => {
  const response = await api.post(`/media/${mediaId}/blur-hash`, {
    components_x: 4,
    components_y: 3,
    ...options
  });
  return response.data;
};

// Массовое создание производных
const bulkCreateDerivatives = async (mediaId, derivatives) => {
  const response = await api.post(`/media/${mediaId}/derivatives/bulk`, {
    derivatives
  });
  return response.data;
};

// Удалить производный файл
const deleteMediaDerivative = async (derivativeId) => {
  const response = await api.delete(`/media/derivatives/${derivativeId}`);
  return response.data;
};

// Удалить все производные для медиафайла
const deleteAllDerivatives = async (mediaId) => {
  const response = await api.delete(`/media/${mediaId}/derivatives`);
  return response.data;
};

// Получить URL для производного файла
const getDerivativeUrl = (derivative, baseUrl = '/uploads') => {
  if (derivative.derivative_type === 'blur_hash') {
    return derivative.file_path; // blur hash - это строка, не файл
  }
  return `${baseUrl}/${derivative.file_path}`;
};

// Получить оптимальный производный файл для отображения
const getBestDerivativeForDisplay = async (mediaId, preferredWidth = 800) => {
  const derivatives = await getMediaDerivatives(mediaId);
  
  // Логика выбора лучшего производного файла
  const webp = derivatives.find(d => d.derivative_type === 'webp');
  const optimized = derivatives.find(d => d.derivative_type === 'optimized');
  const preview = derivatives.find(d => d.derivative_type === 'preview');
  
  // Приоритет: WebP -> optimized -> preview
  return webp || optimized || preview || null;
};

// Получить thumbnail для отображения в списках
const getThumbnailForDisplay = async (mediaId) => {
  const derivatives = await getMediaDerivatives(mediaId, 'thumbnail');
  return derivatives.length > 0 ? derivatives[0] : null;
};

// Получить blur hash для мгновенной загрузки
const getBlurHash = async (mediaId) => {
  const derivatives = await getMediaDerivatives(mediaId, 'blur_hash');
  return derivatives.length > 0 ? derivatives[0].metadata.blur_hash : null;
};

// Проверить, нужно ли создавать производные файлы
const checkDerivativesStatus = async (mediaId) => {
  const derivatives = await getMediaDerivatives(mediaId);
  
  const requiredTypes = ['thumbnail', 'preview', 'optimized', 'webp', 'blur_hash'];
  const existingTypes = derivatives.map(d => d.derivative_type);
  const missingTypes = requiredTypes.filter(type => !existingTypes.includes(type));
  
  return {
    hasAll: missingTypes.length === 0,
    missing: missingTypes,
    existing: existingTypes,
    total: derivatives.length
  };
};

// Автоматически создать все стандартные производные
const autoGenerateDerivatives = async (mediaId) => {
  const response = await api.post(`/media/${mediaId}/auto-generate`);
  return response.data;
};

// Получить статистику по размерам файлов
const getDerivativeStats = async (mediaId) => {
  const derivatives = await getMediaDerivatives(mediaId);
  
  const stats = {
    totalDerivatives: derivatives.length,
    totalSize: derivatives.reduce((sum, d) => sum + (d.size_bytes || 0), 0),
    byType: {}
  };
  
  derivatives.forEach(d => {
    if (!stats.byType[d.derivative_type]) {
      stats.byType[d.derivative_type] = {
        count: 0,
        totalSize: 0,
        avgSize: 0
      };
    }
    
    stats.byType[d.derivative_type].count++;
    stats.byType[d.derivative_type].totalSize += d.size_bytes || 0;
    stats.byType[d.derivative_type].avgSize = 
      stats.byType[d.derivative_type].totalSize / stats.byType[d.derivative_type].count;
  });
  
  return stats;
};

const mediaService = {
  getMediaDerivatives,
  getMediaDerivative,
  createMediaDerivative,
  createThumbnail,
  createPreview,
  createOptimized,
  createWebP,
  generateBlurHash,
  bulkCreateDerivatives,
  deleteMediaDerivative,
  deleteAllDerivatives,
  getDerivativeUrl,
  getBestDerivativeForDisplay,
  getThumbnailForDisplay,
  getBlurHash,
  checkDerivativesStatus,
  autoGenerateDerivatives,
  getDerivativeStats,
};

export default mediaService;
