import React, { useState, useEffect } from 'react';
import { useNavigate, useParams } from 'react-router-dom';
import styles from './GameLobbyPage.module.css';
import gameService from '../../services/game.service';
import { useCurrency } from '../../context/CurrencyContext';
import CreateRoomModal from '../../components/CreateRoomModal/CreateRoomModal';

// –ò–ó–ú–ï–ù–ï–ù–ò–ï: –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏–π –∏–≥—Ä. –õ–µ–≥–∫–æ —Ä–∞—Å—à–∏—Ä—è—Ç—å.
const GAME_DISPLAY_NAMES = {
  'tic-tac-toe': '–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏',
  'chess': '–®–∞—Ö–º–∞—Ç—ã',
  'poker': '–ü–æ–∫–µ—Ä',
  'quiz': '–ö–≤–∏–∑',
};

const GameLobbyPage = ({ gameType: gameTypeProp }) => {
  const { gameType: gameTypeParam } = useParams();
  const gameType = gameTypeProp || gameTypeParam;
  
  const [rooms, setRooms] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const navigate = useNavigate();
  const { refreshCoins } = useCurrency();

  useEffect(() => {
    const fetchRooms = async () => {
      if (!gameType) return;
      try {
        setIsLoading(true);
        const fetchedRooms = await gameService.getRooms(gameType);
        if (Array.isArray(fetchedRooms)) {
          setRooms(fetchedRooms);
        } else {
          setRooms([]);
        }
      } catch (error) {
        console.error("Failed to fetch rooms:", error);
        setRooms([]);
      } finally {
        setIsLoading(false);
      }
    };

    fetchRooms();
  }, [gameType]);

  const handleCreateRoom = async (formData) => {
    const { bet } = formData;
    if (!bet || bet <= 0) {
      alert("–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.");
      return;
    }

    try {
      const newRoom = await gameService.createRoom(bet, gameType);
      await refreshCoins();
      setIsModalOpen(false); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É –ø–æ—Å–ª–µ —É—Å–ø–µ—Ö–∞
      const path = gameType === 'poker' ? `/love-vegas/poker/${newRoom.id}` : `/games/room/${newRoom.id}`;
      navigate(path);
    } catch (error) {
      const errorMessage = error.response?.data?.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É.';
      alert(`–û—à–∏–±–∫–∞: ${errorMessage}`);
    }
  };

  const handleJoinRoom = (roomId) => {
    const path = gameType === 'poker' ? `/love-vegas/poker/${roomId}` : `/games/room/${roomId}`;
    navigate(path);
  };

  // –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –∏–º—è –∏–∑ —Å–ª–æ–≤–∞—Ä—è.
  // –ï—Å–ª–∏ –∏–≥—Ä–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç.
  const gameName = GAME_DISPLAY_NAMES[gameType] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∏–≥—Ä–∞';

  return (
    <div className={styles.pageContainer}>
      <div className={styles.header}>
        <h1 className={styles.title}>{gameName}</h1>
        <button onClick={() => setIsModalOpen(true)} className={styles.createButton}>
          –°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É
        </button>
      </div>
      <p className={styles.subtitle}>–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–æ–º–Ω–∞—Ç–µ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é.</p>
      
      {isLoading ? (
        <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–Ω–∞—Ç...</p>
      ) : (
        <div className={styles.roomsList}>
          {rooms.length > 0 ? (
            rooms.map(room => (
              <div key={room.id} className={styles.roomCard}>
                <h3>–ö–æ–º–Ω–∞—Ç–∞ #{room.id.substring(0, 8)}</h3>
                <div className={styles.roomInfo}>
                  <span>–•–æ—Å—Ç: <strong>{room.Host?.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</strong></span>
                  <span>–°—Ç–∞–≤–∫–∞: <strong>{room.bet} ü™ô</strong></span>
                  <span>–ò–≥—Ä–æ–∫–∏: <strong>{(room.players || []).length} / 2</strong></span>
                </div>
                <button 
                  onClick={() => handleJoinRoom(room.id)} 
                  className={styles.joinButton}
                  disabled={(room.players || []).length >= 2}
                >
                  {(room.players || []).length >= 2 ? '–ó–∞–ø–æ–ª–Ω–µ–Ω–æ' : '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è'}
                </button>
              </div>
            ))
          ) : (
            <p className={styles.noRooms}>–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç –Ω–µ—Ç. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é!</p>
          )}
        </div>
      )}
      
      <CreateRoomModal
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        onSubmit={handleCreateRoom}
        gameType={gameName}
      />
    </div>
  );
};

export default GameLobbyPage;