interface ErrorDetails {
  message?: string;
  stack?: string;
  type?: string;
  timestamp?: string;
  details?: string;
  resource?: string;
  [key: string]: any;
}
export const setupGlobalErrorHandler = () => {
  window.addEventListener('error', (event) => {
    if (event.target && event.target.tagName) {
      console.error('Resource loading error:', event.target.src || event.target.href);
      if (event.target.tagName === 'SCRIPT' || event.target.tagName === 'LINK') {
        const resourceError = new Error(`Failed to load resource: ${event.target.src || event.target.href}`);
        logError(resourceError, 'Resource loading');
        if (event.target.tagName === 'SCRIPT') {
          const errorInfo = encodeURIComponent(JSON.stringify({
            errorCode: 500,
            errorMessage: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Å—É—Ä—Å–∞',
            errorDetails: {
              message: resourceError.message,
              resource: event.target.src || event.target.href,
              type: 'Resource Loading Error'
            }
          }));
          window.location.href = `/error?error=${errorInfo}`;
        }
      }
    } else {
      console.group('üö® UNHANDLED ERROR üö®');
      console.error('Error:', event.error);
      console.error('Message:', event.error?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      console.error('Stack:', event.error?.stack);
      console.error('File:', event.filename);
      console.error('Line:', event.lineno, 'Column:', event.colno);
      console.error('Timestamp:', new Date().toISOString());
      console.error('URL:', window.location.href);
      console.groupEnd();
      logError(event.error, 'Global error handler');
      setTimeout(() => {
        const errorInfo = encodeURIComponent(JSON.stringify({
          errorCode: 500,
          errorMessage: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏',
          errorDetails: {
            message: event.error?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
            stack: event.error?.stack,
            filename: event.filename,
            lineno: event.lineno,
            colno: event.colno
          }
        }));
        window.location.href = `/error?error=${errorInfo}`;
      }, 2000); // 2 —Å–µ–∫—É–Ω–¥—ã –∑–∞–¥–µ—Ä–∂–∫–∏
    }
  }, true);
  window.addEventListener('unhandledrejection', (event) => {
    console.group('üö® UNHANDLED PROMISE REJECTION üö®');
    console.error('Reason:', event.reason);
    console.error('Message:', event.reason?.message || '–û—à–∏–±–∫–∞ –ø—Ä–æ–º–∏—Å–∞');
    console.error('Stack:', event.reason?.stack);
    console.error('Type:', typeof event.reason);
    console.error('Timestamp:', new Date().toISOString());
    console.error('URL:', window.location.href);
    if (event.reason?.response) {
      console.error('HTTP Response:', event.reason.response);
      console.error('Status:', event.reason.response?.status);
      console.error('Data:', event.reason.response?.data);
    }
    console.groupEnd();
    event.preventDefault();
    logError(event.reason, 'Unhandled promise rejection');
    setTimeout(() => {
      const errorInfo = encodeURIComponent(JSON.stringify({
        errorCode: 500,
        errorMessage: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏',
        errorDetails: {
          message: event.reason?.message || '–û—à–∏–±–∫–∞ –ø—Ä–æ–º–∏—Å–∞',
          stack: event.reason?.stack,
          type: 'Promise Rejection'
        }
      }));
      window.location.href = `/error?error=${errorInfo}`;
    }, 2000);
  });
  window.addEventListener('offline', () => {
    console.error('Network is offline');
    const errorInfo = encodeURIComponent(JSON.stringify({
      errorCode: 0,
      errorMessage: '–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É',
      errorDetails: {
        message: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É',
        type: 'Network Error',
        timestamp: new Date().toISOString()
      }
    }));
    window.location.href = `/error?error=${errorInfo}`;
  });
  window.addEventListener('beforeunload', (event) => {
    console.log('Page is unloading');
  });
};
export const logError = (error: any, context: string = '') => {
  const errorInfo = {
    message: error.message,
    stack: error.stack,
    context,
    timestamp: new Date().toISOString(),
    userAgent: navigator.userAgent,
    url: window.location.href
  };
  console.error('Error logged:', errorInfo);
};
export const showError = (errorCode: number, errorMessage: string, errorDetails: ErrorDetails | null = null) => {
  const errorInfo = encodeURIComponent(JSON.stringify({
    errorCode,
    errorMessage,
    errorDetails
  }));
  window.location.href = `/error?error=${errorInfo}`;
};
export const showNetworkError = () => {
  showError(0, '–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É', {
    message: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞',
    type: 'Network Error',
    timestamp: new Date().toISOString()
  });
};
export const showServerError = (details: ErrorDetails | null = null) => {
  showError(500, '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', details);
};
export const showNotFoundError = (resource: string = '–°—Ç—Ä–∞–Ω–∏—Ü–∞') => {
  showError(404, `${resource} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`, {
    message: `–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–π —Ä–µ—Å—É—Ä—Å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`,
    type: 'Not Found',
    resource
  });
};
export const showAuthError = () => {
  showError(401, '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', {
    message: '–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–µ—Å—É—Ä—Å—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É',
    type: 'Authentication Required'
  });
};
export const showPermissionError = () => {
  showError(403, '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω', {
    message: '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–µ—Å—É—Ä—Å—É',
    type: 'Permission Denied'
  });
}; 
