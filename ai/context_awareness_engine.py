"""
üå°Ô∏è Context Awareness Engine –¥–ª—è LoveMemory AI
–§–∞–∑–∞ 2.2: –ö–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω–∞—è –û—Å–≤–µ–¥–æ–º–ª–µ–Ω–Ω–æ—Å—Ç—å

–°–∏—Å—Ç–µ–º–∞ –ø–æ–Ω–∏–º–∞–µ—Ç –ú–û–ú–ï–ù–¢ –∏ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
- –í—Ä–µ–º—è –¥–Ω—è, –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, —Å–µ–∑–æ–Ω
- –ü–æ–≥–æ–¥–∞ (—á–µ—Ä–µ–∑ API) 
- –ú–µ—Å—Ç–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∏ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏
- –ë—é–¥–∂–µ—Ç–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- –î–µ—Ç–µ–∫—Ç–æ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –ø–æ –ø–æ–≤–µ–¥–µ–Ω–∏—é

–¶–µ–ª—å: –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å "–ß—Ç–æ –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å —ç—Ç–æ–π –ø–∞—Ä–µ –∏–º–µ–Ω–Ω–æ –°–ï–ô–ß–ê–°?"
"""

import requests
import json
import os
from datetime import datetime, timedelta
from typing import Dict, List, Tuple, Optional, Any
import random
import calendar
import numpy as np
from dataclasses import dataclass, asdict
from enum import Enum

@dataclass
class WeatherContext:
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–≥–æ–¥—ã"""
    temperature: float  # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –¶–µ–ª—å—Å–∏—è—Ö
    condition: str  # –°–æ—Å—Ç–æ—è–Ω–∏–µ: sunny, rainy, cloudy, snowy
    humidity: float  # –í–ª–∞–∂–Ω–æ—Å—Ç—å (0-1)
    wind_speed: float  # –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ –∫–º/—á
    feels_like: float  # –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫
    is_good_weather: bool  # –•–æ—Ä–æ—à–∞—è –ª–∏ –ø–æ–≥–æ–¥–∞ –¥–ª—è –ø—Ä–æ–≥—É–ª–æ–∫
    
    def to_dict(self) -> Dict[str, Any]:
        return asdict(self)

@dataclass
class TemporalContext:
    """–í—Ä–µ–º–µ–Ω–Ω–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç"""
    hour: int  # –ß–∞—Å –¥–Ω—è (0-23)
    day_of_week: int  # –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (0-6)
    day_of_month: int  # –î–µ–Ω—å –º–µ—Å—è—Ü–∞
    month: int  # –ú–µ—Å—è—Ü (1-12)
    season: str  # –°–µ–∑–æ–Ω: spring, summer, autumn, winter
    is_weekend: bool
    is_holiday: bool
    time_of_day: str  # morning, afternoon, evening, night
    is_prime_time: bool  # –ü–∏–∫–æ–≤–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
    
    def to_dict(self) -> Dict[str, Any]:
        return asdict(self)

@dataclass
class UserMoodContext:
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    mood_type: str  # adventurous, comfortable, social, romantic, budget_conscious
    confidence: float  # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è (0-1)
    mood_factors: List[str]  # –§–∞–∫—Ç–æ—Ä—ã, –ø–æ–≤–ª–∏—è–≤—à–∏–µ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    budget_signal: str  # luxury, normal, budget
    activity_energy: str  # high, medium, low
    
    def to_dict(self) -> Dict[str, Any]:
        return asdict(self)

@dataclass
class LocalEventsContext:
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç –º–µ—Å—Ç–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π"""
    nearby_events: List[Dict]  # –ë–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è
    traffic_level: str  # low, medium, high
    popular_areas: List[str]  # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ä–∞–π–æ–Ω—ã —Å–µ–≥–æ–¥–Ω—è
    special_offers: List[Dict]  # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    
    def to_dict(self) -> Dict[str, Any]:
        return asdict(self)

@dataclass
class CompleteContext:
    """–ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –º–æ–º–µ–Ω—Ç–∞"""
    weather: WeatherContext
    temporal: TemporalContext
    user_mood: UserMoodContext
    local_events: LocalEventsContext
    context_score: float  # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ—Å—Ç–∏ –º–æ–º–µ–Ω—Ç–∞ (0-1)
    
    def to_dict(self) -> Dict[str, Any]:
        return {
            'weather': self.weather.to_dict(),
            'temporal': self.temporal.to_dict(),
            'user_mood': self.user_mood.to_dict(),
            'local_events': self.local_events.to_dict(),
            'context_score': self.context_score
        }

class ContextAwarenessEngine:
    """
    –î–≤–∏–∂–æ–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω–æ–π –æ—Å–≤–µ–¥–æ–º–ª–µ–Ω–Ω–æ—Å—Ç–∏
    
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç –∏ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ–¥ —Å–∏—Ç—É–∞—Ü–∏—é.
    –î–µ–ª–∞–µ—Ç AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∂–∏–≤—ã–º–∏ –∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏.
    """
    
    def __init__(self, weather_api_key: Optional[str] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–∏–∂–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω–æ–π –æ—Å–≤–µ–¥–æ–º–ª–µ–Ω–Ω–æ—Å—Ç–∏
        
        Args:
            weather_api_key: API –∫–ª—é—á –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–≥–æ–¥—ã (OpenWeatherMap)
        """
        self.weather_api_key = weather_api_key or os.getenv('OPENWEATHER_API_KEY')
        
        # –ö—ç—à –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
        self.weather_cache = {}
        self.events_cache = {}
        self.cache_ttl = 3600  # 1 —á–∞—Å
        
        # –ú–æ—Å–∫–æ–≤—Å–∫–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ –∏ —Å–æ–±—ã—Ç–∏—è (—Å–∏–º—É–ª—è—Ü–∏—è)
        self.moscow_holidays = self._load_moscow_holidays()
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        self.time_activity_patterns = {
            'morning': {
                'suitable_categories': ['cafe', 'activity', 'fitness'],
                'energy_level': 'medium',
                'social_factor': 0.6,
                'boost_keywords': ['–∑–∞–≤—Ç—Ä–∞–∫', '–∫–æ—Ñ–µ', '—É—Ç—Ä–µ–Ω–Ω–∏–π', '—Å–≤–µ–∂–∏–π', '—ç–Ω–µ—Ä–≥–∏—è']
            },
            'afternoon': {
                'suitable_categories': ['restaurant', 'museum', 'shopping', 'entertainment'],
                'energy_level': 'high', 
                'social_factor': 0.8,
                'boost_keywords': ['–æ–±–µ–¥', '–ø—Ä–æ–≥—É–ª–∫–∞', '–∫—É–ª—å—Ç—É—Ä–∞', '–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å']
            },
            'evening': {
                'suitable_categories': ['restaurant', 'theater', 'entertainment', 'bar'],
                'energy_level': 'high',
                'social_factor': 0.9,
                'boost_keywords': ['—É–∂–∏–Ω', '—Ä–æ–º–∞–Ω—Ç–∏–∫–∞', '—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', '–≤–µ—á–µ—Ä–Ω–∏–π']
            },
            'night': {
                'suitable_categories': ['bar', 'club', 'late_cafe'],
                'energy_level': 'medium',
                'social_factor': 0.7,
                'boost_keywords': ['–ø–æ–∑–¥–Ω–∏–π', '–Ω–æ—á–Ω–æ–π', '–±–∞—Ä', '–∫–ª—É–±']
            }
        }
        
        # –ü–æ–≥–æ–¥–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        self.weather_activity_patterns = {
            'sunny': {
                'boost_categories': ['activity', 'outdoor', 'park'],
                'boost_keywords': ['—Ç–µ—Ä—Ä–∞—Å–∞', '–æ—Ç–∫—Ä—ã—Ç—ã–π', '–ø—Ä–æ–≥—É–ª–∫–∞', '–ø–∞—Ä–∫', '–ø—Ä–∏—Ä–æ–¥–∞'],
                'penalty_keywords': ['–¥–æ–º–∞—à–Ω–∏–π', '–∑–∞–∫—Ä—ã—Ç—ã–π']
            },
            'rainy': {
                'boost_categories': ['restaurant', 'cafe', 'entertainment', 'museum'],
                'boost_keywords': ['—É—é—Ç–Ω—ã–π', '–∫—Ä—ã—Ç—ã–π', '—Ç–µ–ø–ª—ã–π', '–¥–æ–º–∞—à–Ω–∏–π', '–∫–æ–º—Ñ–æ—Ä—Ç'],
                'penalty_keywords': ['–æ—Ç–∫—Ä—ã—Ç—ã–π', '—Ç–µ—Ä—Ä–∞—Å–∞', '–ø–∞—Ä–∫']
            },
            'snowy': {
                'boost_categories': ['cafe', 'restaurant', 'entertainment'],
                'boost_keywords': ['–≥–æ—Ä—è—á–∏–π', '—Ç–µ–ø–ª—ã–π', '—É—é—Ç–Ω—ã–π', '–∑–∏–º–Ω–∏–π'],
                'penalty_keywords': ['–ø—Ä–æ—Ö–ª–∞–¥–Ω—ã–π', '–æ—Ç–∫—Ä—ã—Ç—ã–π']
            },
            'cloudy': {
                'boost_categories': ['museum', 'cafe', 'entertainment'],
                'boost_keywords': ['–∫—Ä—ã—Ç—ã–π', '–∫—É–ª—å—Ç—É—Ä–∞', '—Å–ø–æ–∫–æ–π–Ω—ã–π'],
                'neutral_penalty': 0.1
            }
        }
        
        print("üå°Ô∏è Context Awareness Engine –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _load_moscow_holidays(self) -> Dict[str, List[str]]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å –º–æ—Å–∫–æ–≤—Å–∫–∏—Ö –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –∏ —Å–æ–±—ã—Ç–∏–π"""
        return {
            '01': ['–ù–æ–≤—ã–π –≥–æ–¥', '–†–æ–∂–¥–µ—Å—Ç–≤–æ', '–ö–∞–Ω–∏–∫—É–ª—ã'],
            '02': ['–î–µ–Ω—å –∑–∞—â–∏—Ç–Ω–∏–∫–∞ –û—Ç–µ—á–µ—Å—Ç–≤–∞', '–ú–∞—Å–ª–µ–Ω–∏—Ü–∞'],
            '03': ['8 –º–∞—Ä—Ç–∞', '–í–µ—Å–µ–Ω–Ω–∏–µ –∫–∞–Ω–∏–∫—É–ª—ã'],
            '04': ['–ü–∞—Å—Ö–∞', '–î–µ–Ω—å –∫–æ—Å–º–æ–Ω–∞–≤—Ç–∏–∫–∏'],
            '05': ['1 –º–∞—è', '9 –º–∞—è', '–ú–∞–π—Å–∫–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏'],
            '06': ['–î–µ–Ω—å –†–æ—Å—Å–∏–∏', '–ë–µ–ª—ã–µ –Ω–æ—á–∏'],
            '07': ['–õ–µ—Ç–æ', '–§–µ—Å—Ç–∏–≤–∞–ª–∏'],
            '08': ['–õ–µ—Ç–æ', '–û—Ç–ø—É—Å–∫–Ω–æ–π —Å–µ–∑–æ–Ω'],
            '09': ['–î–µ–Ω—å –∑–Ω–∞–Ω–∏–π', '–ù–∞—á–∞–ª–æ —É—á–µ–±–Ω–æ–≥–æ –≥–æ–¥–∞'],
            '10': ['–û—Å–µ–Ω—å', '–ö—É–ª—å—Ç—É—Ä–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞'],
            '11': ['–î–µ–Ω—å –Ω–∞—Ä–æ–¥–Ω–æ–≥–æ –µ–¥–∏–Ω—Å—Ç–≤–∞'],
            '12': ['–ù–æ–≤—ã–π –≥–æ–¥ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è', '–ü—Ä–µ–¥–Ω–æ–≤–æ–≥–æ–¥–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏']
        }
    
    def get_weather_context(self, lat: float = 55.7558, lon: float = 37.6176) -> WeatherContext:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–≥–æ–¥—ã
        
        Args:
            lat, lon: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ú–æ—Å–∫–≤–∞)
            
        Returns:
            WeatherContext —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–≥–æ–¥–µ
        """
        cache_key = f"weather_{lat}_{lon}"
        now = datetime.now()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if cache_key in self.weather_cache:
            cached_data, timestamp = self.weather_cache[cache_key]
            if (now - timestamp).seconds < self.cache_ttl:
                return cached_data
        
        if self.weather_api_key:
            try:
                # –†–µ–∞–ª—å–Ω—ã–π API –∑–∞–ø—Ä–æ—Å –∫ OpenWeatherMap
                url = f"http://api.openweathermap.org/data/2.5/weather"
                params = {
                    'lat': lat,
                    'lon': lon,
                    'appid': self.weather_api_key,
                    'units': 'metric',
                    'lang': 'ru'
                }
                
                response = requests.get(url, params=params, timeout=5)
                if response.status_code == 200:
                    data = response.json()
                    
                    weather_context = WeatherContext(
                        temperature=data['main']['temp'],
                        condition=self._normalize_weather_condition(data['weather'][0]['main']),
                        humidity=data['main']['humidity'] / 100.0,
                        wind_speed=data.get('wind', {}).get('speed', 0) * 3.6,  # –º/—Å –≤ –∫–º/—á
                        feels_like=data['main']['feels_like'],
                        is_good_weather=self._is_good_weather(data)
                    )
                    
                    # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    self.weather_cache[cache_key] = (weather_context, now)
                    return weather_context
                    
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã –æ—Ç API: {e}")
        
        # –§–æ–ª–±—ç–∫: —Å–∏–º—É–ª—è—Ü–∏—è –ø–æ–≥–æ–¥—ã
        return self._simulate_weather_context()
    
    def _normalize_weather_condition(self, condition: str) -> str:
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —É—Å–ª–æ–≤–∏—è –ø–æ–≥–æ–¥—ã –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
        condition_mapping = {
            'Clear': 'sunny',
            'Clouds': 'cloudy',
            'Rain': 'rainy',
            'Drizzle': 'rainy',
            'Thunderstorm': 'rainy',
            'Snow': 'snowy',
            'Mist': 'cloudy',
            'Fog': 'cloudy'
        }
        return condition_mapping.get(condition, 'cloudy')
    
    def _is_good_weather(self, weather_data: Dict) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Ö–æ—Ä–æ—à–∞—è –ª–∏ –ø–æ–≥–æ–¥–∞ –¥–ª—è –ø—Ä–æ–≥—É–ª–æ–∫"""
        temp = weather_data['main']['temp']
        condition = weather_data['weather'][0]['main']
        
        # –ö–æ–º—Ñ–æ—Ä—Ç–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∏ —Ö–æ—Ä–æ—à–∏–µ —É—Å–ª–æ–≤–∏—è
        temp_ok = -5 <= temp <= 30
        condition_ok = condition in ['Clear', 'Clouds']
        
        return temp_ok and condition_ok
    
    def _simulate_weather_context(self) -> WeatherContext:
        """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–≥–æ–¥—ã (—Ñ–æ–ª–±—ç–∫)"""
        # –ü—Ä–æ—Å—Ç–∞—è —Å–∏–º—É–ª—è—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–µ–∑–æ–Ω–∞
        month = datetime.now().month
        
        if month in [12, 1, 2]:  # –ó–∏–º–∞
            temp = random.uniform(-15, 5)
            conditions = ['snowy', 'cloudy', 'cloudy', 'sunny']
        elif month in [3, 4, 5]:  # –í–µ—Å–Ω–∞
            temp = random.uniform(5, 20)
            conditions = ['rainy', 'cloudy', 'sunny', 'sunny']
        elif month in [6, 7, 8]:  # –õ–µ—Ç–æ
            temp = random.uniform(15, 30)
            conditions = ['sunny', 'sunny', 'cloudy', 'rainy']
        else:  # –û—Å–µ–Ω—å
            temp = random.uniform(0, 15)
            conditions = ['rainy', 'cloudy', 'cloudy', 'sunny']
        
        condition = random.choice(conditions)
        
        return WeatherContext(
            temperature=round(temp, 1),
            condition=condition,
            humidity=random.uniform(0.4, 0.8),
            wind_speed=random.uniform(0, 15),
            feels_like=temp + random.uniform(-3, 3),
            is_good_weather=(condition == 'sunny' and 5 <= temp <= 25)
        )
    
    def get_temporal_context(self, target_datetime: Optional[datetime] = None) -> TemporalContext:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        
        Args:
            target_datetime: –¶–µ–ª–µ–≤–æ–µ –≤—Ä–µ–º—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—É—â–µ–µ)
            
        Returns:
            TemporalContext —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        """
        dt = target_datetime or datetime.now()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ–∑–æ–Ω
        month = dt.month
        if month in [12, 1, 2]:
            season = 'winter'
        elif month in [3, 4, 5]:
            season = 'spring'
        elif month in [6, 7, 8]:
            season = 'summer'
        else:
            season = 'autumn'
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –¥–Ω—è
        hour = dt.hour
        if 6 <= hour < 12:
            time_of_day = 'morning'
        elif 12 <= hour < 17:
            time_of_day = 'afternoon'
        elif 17 <= hour < 22:
            time_of_day = 'evening'
        else:
            time_of_day = 'night'
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–∑–¥–Ω–∏–∫–∏
        month_str = f"{month:02d}"
        is_holiday = any(holiday in self.moscow_holidays.get(month_str, []) 
                        for holiday in self.moscow_holidays.get(month_str, []))
        
        # –ü–∏–∫–æ–≤–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
        is_prime_time = (
            (dt.weekday() < 5 and 18 <= hour <= 21) or  # –ë—É–¥–Ω–∏–µ –≤–µ—á–µ—Ä–∞
            (dt.weekday() >= 5 and 12 <= hour <= 22)    # –í—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏
        )
        
        return TemporalContext(
            hour=hour,
            day_of_week=dt.weekday(),
            day_of_month=dt.day,
            month=month,
            season=season,
            is_weekend=dt.weekday() >= 5,
            is_holiday=is_holiday,
            time_of_day=time_of_day,
            is_prime_time=is_prime_time
        )
    
    def detect_user_mood(self, recent_activity: List[Dict], 
                        session_data: Optional[Dict] = None) -> UserMoodContext:
        """
        –î–µ—Ç–µ–∫—Ç–æ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è
        
        Args:
            recent_activity: –ù–µ–¥–∞–≤–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            session_data: –î–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
            
        Returns:
            UserMoodContext —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º
        """
        mood_factors = []
        mood_scores = {
            'adventurous': 0.2,
            'comfortable': 0.3,
            'social': 0.2,
            'romantic': 0.2,
            'budget_conscious': 0.1
        }
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–µ–¥–∞–≤–Ω—é—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        if recent_activity:
            for activity in recent_activity[-5:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –¥–µ–π—Å—Ç–≤–∏–π
                
                # –ü–æ–∏—Å–∫ –¥–æ—Ä–æ–≥–∏—Ö –º–µ—Å—Ç ‚Üí budget_conscious
                if 'price' in activity and activity['price'] > 3000:
                    if activity.get('action') == 'viewed':
                        mood_scores['budget_conscious'] -= 0.1
                        mood_factors.append('viewing_expensive_items')
                
                # –ü—Ä–æ—Å–º–æ—Ç—Ä –º–Ω–æ–≥–æ –º–µ—Å—Ç ‚Üí adventurous
                if activity.get('action') == 'recommendation_shown':
                    mood_scores['adventurous'] += 0.05
                
                # –ë—ã—Å—Ç—Ä—ã–µ –∫–ª–∏–∫–∏ ‚Üí –Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–µ
                if activity.get('action') == 'recommendation_clicked':
                    mood_scores['comfortable'] += 0.1
                    
                # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
                category = activity.get('product_category', '')
                if category in ['restaurant', 'romantic']:
                    mood_scores['romantic'] += 0.1
                elif category in ['entertainment', 'activity']:
                    mood_scores['social'] += 0.1
                elif category in ['cafe', 'home']:
                    mood_scores['comfortable'] += 0.1
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        if session_data:
            # –í—Ä–µ–º—è —Å–µ—Å—Å–∏–∏
            session_duration = session_data.get('duration_minutes', 5)
            if session_duration > 15:  # –î–æ–ª–≥–∞—è —Å–µ—Å—Å–∏—è
                mood_scores['adventurous'] += 0.1
                mood_factors.append('long_session')
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –º–µ—Å—Ç
            items_viewed = session_data.get('items_viewed', 0)
            if items_viewed > 10:
                mood_scores['adventurous'] += 0.15
                mood_factors.append('many_items_viewed')
            elif items_viewed < 3:
                mood_scores['comfortable'] += 0.1
                mood_factors.append('few_items_viewed')
            
            # –ë—é–¥–∂–µ—Ç–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
            budget_filters = session_data.get('budget_filters_used', False)
            if budget_filters:
                mood_scores['budget_conscious'] += 0.2
                mood_factors.append('budget_filters_used')
            
            # –ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            categories_searched = session_data.get('categories_searched', [])
            if 'luxury' in categories_searched:
                mood_scores['budget_conscious'] -= 0.1
            if 'adventure' in categories_searched:
                mood_scores['adventurous'] += 0.2
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±—é–¥–∂–µ—Ç–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
        budget_signal = 'normal'
        if mood_scores['budget_conscious'] > 0.3:
            budget_signal = 'budget'
        elif mood_scores['budget_conscious'] < 0.1:
            budget_signal = 'luxury'
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏
        activity_energy = 'medium'
        adventure_social_score = mood_scores['adventurous'] + mood_scores['social']
        if adventure_social_score > 0.5:
            activity_energy = 'high'
        elif adventure_social_score < 0.2:
            activity_energy = 'low'
        
        # –í—ã–±–∏—Ä–∞–µ–º –¥–æ–º–∏–Ω–∏—Ä—É—é—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
        dominant_mood = max(mood_scores.items(), key=lambda x: x[1])[0]
        confidence = mood_scores[dominant_mood]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å –¥–ª—è —Ä–µ–∞–ª–∏–∑–º–∞
        if random.random() < 0.1:  # 10% —à–∞–Ω—Å –Ω–∞ —Å–ª—É—á–∞–π–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
            dominant_mood = random.choice(list(mood_scores.keys()))
            confidence *= 0.6
            mood_factors.append('random_variation')
        
        return UserMoodContext(
            mood_type=dominant_mood,
            confidence=min(1.0, confidence),
            mood_factors=mood_factors,
            budget_signal=budget_signal,
            activity_energy=activity_energy
        )
    
    def get_local_events_context(self, lat: float = 55.7558, lon: float = 37.6176) -> LocalEventsContext:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –º–µ—Å—Ç–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
        
        Args:
            lat, lon: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            
        Returns:
            LocalEventsContext —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ–±—ã—Ç–∏—è—Ö
        """
        # –°–∏–º—É–ª—è—Ü–∏—è –º–µ—Å—Ç–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ - API –∫ —Å–æ–±—ã—Ç–∏–π–Ω—ã–º —Å–µ—Ä–≤–∏—Å–∞–º)
        current_time = datetime.now()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        event_types = [
            '–ö–æ–Ω—Ü–µ—Ä—Ç', '–í—ã—Å—Ç–∞–≤–∫–∞', '–§–µ—Å—Ç–∏–≤–∞–ª—å', '–°–ø–æ—Ä—Ç–∏–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ',
            '–¢–µ–∞—Ç—Ä–∞–ª—å–Ω–∞—è –ø—Ä–µ–º—å–µ—Ä–∞', '–ö—É–ª–∏–Ω–∞—Ä–Ω—ã–π —Ñ–µ—Å—Ç–∏–≤–∞–ª—å', '–Ø—Ä–º–∞—Ä–∫–∞'
        ]
        
        nearby_events = []
        for i in range(random.randint(2, 5)):
            event = {
                'title': f"{random.choice(event_types)} –≤ —Ü–µ–Ω—Ç—Ä–µ –≥–æ—Ä–æ–¥–∞",
                'distance_km': random.uniform(1, 10),
                'start_time': (current_time + timedelta(hours=random.randint(1, 48))).isoformat(),
                'category': random.choice(['culture', 'entertainment', 'food', 'sports']),
                'impact_on_traffic': random.choice(['low', 'medium', 'high'])
            }
            nearby_events.append(event)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–∞—Ñ–∏–∫–∞
        hour = current_time.hour
        is_weekend = current_time.weekday() >= 5
        
        if is_weekend:
            if 12 <= hour <= 20:
                traffic_level = 'high'
            else:
                traffic_level = 'medium'
        else:
            if hour in [8, 9, 18, 19, 20]:
                traffic_level = 'high'
            elif 10 <= hour <= 17:
                traffic_level = 'medium'
            else:
                traffic_level = 'low'
        
        # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ä–∞–π–æ–Ω—ã
        popular_areas = ['–¶–µ–Ω—Ç—Ä', '–ê—Ä–±–∞—Ç', '–°–æ–∫–æ–ª—å–Ω–∏–∫–∏', '–ü–∞—Ä–∫ –ì–æ—Ä—å–∫–æ–≥–æ']
        if is_weekend:
            popular_areas.extend(['–í–î–ù–•', '–ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å'])
        
        # –°–ø–µ—Ü–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (—Å–∏–º—É–ª—è—Ü–∏—è)
        special_offers = [
            {
                'type': 'discount',
                'description': '–°–∫–∏–¥–∫–∞ 20% –Ω–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã',
                'category': 'restaurant',
                'valid_until': (current_time + timedelta(hours=12)).isoformat()
            },
            {
                'type': 'happy_hour',
                'description': 'Happy hour –≤ –±–∞—Ä–∞—Ö 17:00-19:00',
                'category': 'bar',
                'valid_until': (current_time + timedelta(hours=4)).isoformat()
            }
        ]
        
        return LocalEventsContext(
            nearby_events=nearby_events,
            traffic_level=traffic_level,
            popular_areas=popular_areas,
            special_offers=special_offers
        )
    
    def get_complete_context(self, lat: float = 55.7558, lon: float = 37.6176,
                           recent_activity: List[Dict] = None,
                           session_data: Dict = None,
                           target_datetime: datetime = None) -> CompleteContext:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞
        
        Args:
            lat, lon: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            recent_activity: –ù–µ–¥–∞–≤–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            session_data: –î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
            target_datetime: –¶–µ–ª–µ–≤–æ–µ –≤—Ä–µ–º—è
            
        Returns:
            CompleteContext —Å–æ –≤—Å–µ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        """
        print("üå°Ô∏è –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –º–æ–º–µ–Ω—Ç–∞...")
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        weather = self.get_weather_context(lat, lon)
        temporal = self.get_temporal_context(target_datetime)
        user_mood = self.detect_user_mood(recent_activity or [], session_data)
        local_events = self.get_local_events_context(lat, lon)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é –æ—Ü–µ–Ω–∫—É –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ—Å—Ç–∏ –º–æ–º–µ–Ω—Ç–∞
        context_score = self._calculate_context_score(weather, temporal, user_mood, local_events)
        
        complete_context = CompleteContext(
            weather=weather,
            temporal=temporal,
            user_mood=user_mood,
            local_events=local_events,
            context_score=context_score
        )
        
        print(f"‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–±—Ä–∞–Ω: {weather.condition}, {temporal.time_of_day}, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {user_mood.mood_type}")
        return complete_context
    
    def _calculate_context_score(self, weather: WeatherContext, temporal: TemporalContext,
                                user_mood: UserMoodContext, local_events: LocalEventsContext) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –æ–±—â—É—é –æ—Ü–µ–Ω–∫—É –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ—Å—Ç–∏ –º–æ–º–µ–Ω—Ç–∞"""
        score = 0.5  # –ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
        
        # –ü–æ–≥–æ–¥–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä
        if weather.is_good_weather:
            score += 0.2
        elif weather.condition == 'rainy':
            score -= 0.1
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ–π —Ñ–∞–∫—Ç–æ—Ä
        if temporal.is_prime_time:
            score += 0.15
        if temporal.is_weekend:
            score += 0.1
        if temporal.is_holiday:
            score += 0.05
        
        # –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_mood.confidence > 0.7:
            score += 0.1
        
        # –ú–µ—Å—Ç–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        high_impact_events = len([e for e in local_events.nearby_events 
                                if e.get('impact_on_traffic') == 'high'])
        if high_impact_events > 2:
            score -= 0.1  # –ú–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏–π –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å —Ç–æ–ª–ø—ã
        elif high_impact_events == 1:
            score += 0.05  # –û–¥–Ω–æ —Å–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª—è–µ—Ç –∞—Ç–º–æ—Å—Ñ–µ—Ä—É
        
        return max(0.0, min(1.0, score))
    
    def apply_context_filters(self, recommendations: List[Dict], 
                            context: CompleteContext) -> List[Dict]:
        """
        –ü—Ä–∏–º–µ–Ω—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º
        
        Args:
            recommendations: –°–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            context: –ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            
        Returns:
            –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π –∏ –≤–∑–≤–µ—à–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        """
        print(f"üéØ –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã...")
        
        enhanced_recommendations = []
        
        for rec in recommendations:
            enhanced_rec = rec.copy()
            context_boost = 1.0
            context_reasons = []
            
            # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
            time_boost = self._apply_temporal_filters(rec, context.temporal)
            context_boost *= time_boost['multiplier']
            if time_boost['reasons']:
                context_reasons.extend(time_boost['reasons'])
            
            # –ü–æ–≥–æ–¥–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
            weather_boost = self._apply_weather_filters(rec, context.weather)
            context_boost *= weather_boost['multiplier']
            if weather_boost['reasons']:
                context_reasons.extend(weather_boost['reasons'])
            
            # –§–∏–ª—å—Ç—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
            mood_boost = self._apply_mood_filters(rec, context.user_mood)
            context_boost *= mood_boost['multiplier']
            if mood_boost['reasons']:
                context_reasons.extend(mood_boost['reasons'])
            
            # –§–∏–ª—å—Ç—Ä—ã —Å–æ–±—ã—Ç–∏–π
            events_boost = self._apply_events_filters(rec, context.local_events)
            context_boost *= events_boost['multiplier']
            if events_boost['reasons']:
                context_reasons.extend(events_boost['reasons'])
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã–π boost
            original_score = enhanced_rec.get('final_score', enhanced_rec.get('multi_objective_score', 0))
            enhanced_rec['context_boosted_score'] = original_score * context_boost
            enhanced_rec['context_boost_factor'] = context_boost
            enhanced_rec['context_reasons'] = context_reasons
            enhanced_rec['context_applied'] = True
            
            enhanced_recommendations.append(enhanced_rec)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω–æ —É–ª—É—á—à–µ–Ω–Ω–æ–º—É score
        enhanced_recommendations.sort(key=lambda x: x['context_boosted_score'], reverse=True)
        
        print(f"‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫ {len(enhanced_recommendations)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º")
        return enhanced_recommendations
    
    def _apply_temporal_filters(self, recommendation: Dict, temporal: TemporalContext) -> Dict:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã"""
        multiplier = 1.0
        reasons = []
        
        category = recommendation.get('category', '')
        tags = recommendation.get('tags', [])
        title = recommendation.get('title', '').lower()
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –≤—Ä–µ–º–µ–Ω–∏ –¥–Ω—è
        time_pattern = self.time_activity_patterns.get(temporal.time_of_day, {})
        
        # –ü–æ–¥—Ö–æ–¥—è—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –¥–Ω—è
        suitable_categories = time_pattern.get('suitable_categories', [])
        if category in suitable_categories:
            multiplier *= 1.3
            reasons.append(f"–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è {temporal.time_of_day}")
        
        # Boost keywords –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏
        boost_keywords = time_pattern.get('boost_keywords', [])
        for keyword in boost_keywords:
            if any(keyword in tag.lower() for tag in tags) or keyword in title:
                multiplier *= 1.15
                reasons.append(f"–ê–∫—Ç—É–∞–ª—å–Ω–æ —Å–µ–π—á–∞—Å ({keyword})")
                break
        
        # –í—ã—Ö–æ–¥–Ω—ã–µ vs –±—É–¥–Ω–∏
        if temporal.is_weekend:
            if category in ['entertainment', 'activity', 'bar']:
                multiplier *= 1.2
                reasons.append("–û—Ç–ª–∏—á–Ω–æ –¥–ª—è –≤—ã—Ö–æ–¥–Ω—ã—Ö")
        else:
            if category in ['cafe', 'restaurant'] and temporal.time_of_day in ['morning', 'afternoon']:
                multiplier *= 1.1
                reasons.append("–ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è")
        
        # –ü—Ä–∞–∑–¥–Ω–∏–∫–∏
        if temporal.is_holiday:
            if category in ['restaurant', 'entertainment', 'gift']:
                multiplier *= 1.25
                reasons.append("–ü—Ä–∞–∑–¥–Ω–∏—á–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ")
        
        # –ü–æ–∑–¥–Ω–∏–µ —á–∞—Å—ã
        if temporal.hour > 22:
            if category not in ['bar', 'club', 'late_cafe']:
                multiplier *= 0.7  # –®—Ç—Ä–∞—Ñ –∑–∞ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–µ–µ –≤—Ä–µ–º—è
            else:
                multiplier *= 1.2
                reasons.append("–†–∞–±–æ—Ç–∞–µ—Ç –¥–æ–ø–æ–∑–¥–Ω–∞")
        
        return {'multiplier': multiplier, 'reasons': reasons}
    
    def _apply_weather_filters(self, recommendation: Dict, weather: WeatherContext) -> Dict:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø–æ–≥–æ–¥–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã"""
        multiplier = 1.0
        reasons = []
        
        category = recommendation.get('category', '')
        tags = recommendation.get('tags', [])
        title = recommendation.get('title', '').lower()
        
        weather_pattern = self.weather_activity_patterns.get(weather.condition, {})
        
        # –ü–æ–¥—Ö–æ–¥—è—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–æ–≥–æ–¥—ã
        boost_categories = weather_pattern.get('boost_categories', [])
        if category in boost_categories:
            multiplier *= 1.3
            reasons.append(f"–û—Ç–ª–∏—á–Ω–æ –≤ {weather.condition} –ø–æ–≥–æ–¥—É")
        
        # Boost keywords
        boost_keywords = weather_pattern.get('boost_keywords', [])
        for keyword in boost_keywords:
            if any(keyword in tag.lower() for tag in tags) or keyword in title:
                multiplier *= 1.2
                reasons.append(f"–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø–æ–≥–æ–¥—ã ({keyword})")
                break
        
        # Penalty keywords
        penalty_keywords = weather_pattern.get('penalty_keywords', [])
        for keyword in penalty_keywords:
            if any(keyword in tag.lower() for tag in tags) or keyword in title:
                multiplier *= 0.8
                reasons.append(f"–ù–µ –æ—á–µ–Ω—å –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø–æ–≥–æ–¥—ã")
                break
        
        # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
        if weather.temperature < 0:  # –û—á–µ–Ω—å —Ö–æ–ª–æ–¥–Ω–æ
            if any(keyword in title for keyword in ['–æ—Ç–∫—Ä—ã—Ç—ã–π', '—Ç–µ—Ä—Ä–∞—Å–∞', '–ø–∞—Ä–∫']):
                multiplier *= 0.6
            elif any(keyword in title for keyword in ['—Ç–µ–ø–ª—ã–π', '—É—é—Ç–Ω—ã–π', '–≥–æ—Ä—è—á–∏–π']):
                multiplier *= 1.3
                reasons.append("–°–æ–≥—Ä–µ–µ—Ç –≤ —Ö–æ–ª–æ–¥")
        
        elif weather.temperature > 25:  # –ñ–∞—Ä–∫–æ
            if any(keyword in title for keyword in ['–ø—Ä–æ—Ö–ª–∞–¥–Ω—ã–π', '–∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä', '—Ö–æ–ª–æ–¥–Ω—ã–π']):
                multiplier *= 1.25
                reasons.append("–ü—Ä–æ—Ö–ª–∞–¥–∞ –≤ –∂–∞—Ä—É")
        
        # –•–æ—Ä–æ—à–∞—è –ø–æ–≥–æ–¥–∞ –¥–ª—è –ø—Ä–æ–≥—É–ª–æ–∫
        if weather.is_good_weather and category in ['activity', 'park']:
            multiplier *= 1.4
            reasons.append("–û—Ç–ª–∏—á–Ω–∞—è –ø–æ–≥–æ–¥–∞ –¥–ª—è –ø—Ä–æ–≥—É–ª–æ–∫")
        
        return {'multiplier': multiplier, 'reasons': reasons}
    
    def _apply_mood_filters(self, recommendation: Dict, user_mood: UserMoodContext) -> Dict:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"""
        multiplier = 1.0
        reasons = []
        
        category = recommendation.get('category', '')
        price = recommendation.get('price', 1000)
        tags = recommendation.get('tags', [])
        
        # –ë—é–¥–∂–µ—Ç–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
        if user_mood.budget_signal == 'budget':
            if price < 1000:
                multiplier *= 1.3
                reasons.append("–î–æ—Å—Ç—É–ø–Ω–∞—è —Ü–µ–Ω–∞")
            elif price > 2500:
                multiplier *= 0.7
        elif user_mood.budget_signal == 'luxury':
            if price > 3000:
                multiplier *= 1.2
                reasons.append("–ü—Ä–µ–º–∏—É–º —É—Ä–æ–≤–µ–Ω—å")
        
        # –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        mood_type = user_mood.mood_type
        
        if mood_type == 'adventurous':
            novelty = recommendation.get('novelty', 0.5)
            if novelty > 0.7:
                multiplier *= 1.4
                reasons.append("–ù–æ–≤–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ")
            if category in ['activity', 'entertainment']:
                multiplier *= 1.2
        
        elif mood_type == 'comfortable':
            if any(keyword in tag.lower() for tag in tags for keyword in ['—É—é—Ç–Ω—ã–π', '–¥–æ–º–∞—à–Ω–∏–π', '—Å–ø–æ–∫–æ–π–Ω—ã–π']):
                multiplier *= 1.3
                reasons.append("–ö–æ–º—Ñ–æ—Ä—Ç–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞")
            if category in ['cafe', 'restaurant']:
                multiplier *= 1.15
        
        elif mood_type == 'social':
            if category in ['entertainment', 'bar', 'restaurant']:
                multiplier *= 1.25
                reasons.append("–î–ª—è –æ–±—â–µ–Ω–∏—è")
        
        elif mood_type == 'romantic':
            if any(keyword in tag.lower() for tag in tags for keyword in ['—Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π', '–∏–Ω—Ç–∏–º–Ω—ã–π']):
                multiplier *= 1.4
                reasons.append("–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞")
            if category == 'restaurant':
                multiplier *= 1.2
        
        # –£—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏
        if user_mood.activity_energy == 'high':
            if category in ['activity', 'entertainment']:
                multiplier *= 1.2
        elif user_mood.activity_energy == 'low':
            if category in ['cafe', 'spa']:
                multiplier *= 1.15
                reasons.append("–°–ø–æ–∫–æ–π–Ω—ã–π –æ—Ç–¥—ã—Ö")
        
        return {'multiplier': multiplier, 'reasons': reasons}
    
    def _apply_events_filters(self, recommendation: Dict, local_events: LocalEventsContext) -> Dict:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã –º–µ—Å—Ç–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π"""
        multiplier = 1.0
        reasons = []
        
        category = recommendation.get('category', '')
        
        # –í—ã—Å–æ–∫–∏–π —Ç—Ä–∞—Ñ–∏–∫ - —à—Ç—Ä–∞—Ñ –¥–ª—è –¥–∞–ª–µ–∫–∏—Ö –º–µ—Å—Ç
        if local_events.traffic_level == 'high':
            # –°–∏–º—É–ª—è—Ü–∏—è: —à—Ç—Ä–∞—Ñ—É–µ–º –º–µ—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –≤ –ø—Ä–æ–±–∫–∞—Ö
            if category in ['activity', 'entertainment']:
                multiplier *= 0.9
            
            # –ë–æ–Ω—É—Å –¥–ª—è –±–ª–∏–∑–∫–∏—Ö –º–µ—Å—Ç
            if category in ['cafe', 'restaurant']:
                multiplier *= 1.1
                reasons.append("–ë–ª–∏–∑–∫–æ, –∏–∑–±–µ–∂–∏—Ç–µ –ø—Ä–æ–±–æ–∫")
        
        # –°–ø–µ—Ü–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        for offer in local_events.special_offers:
            if offer['category'] == category:
                multiplier *= 1.3
                reasons.append(f"–°–ø–µ—Ü–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: {offer['description']}")
                break
        
        # –°–æ–±—ã—Ç–∏—è —Ä—è–¥–æ–º
        relevant_events = [e for e in local_events.nearby_events 
                          if e['category'] == category or e['distance_km'] < 2]
        
        if relevant_events:
            multiplier *= 1.15
            reasons.append("–†—è–¥–æ–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è")
        
        return {'multiplier': multiplier, 'reasons': reasons}

def main():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Context Awareness Engine"""
    print("üå°Ô∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Context Awareness Engine - –§–∞–∑–∞ 2.2")
    print("üéØ –ö–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω–∞—è –æ—Å–≤–µ–¥–æ–º–ª–µ–Ω–Ω–æ—Å—Ç—å: –≤—Ä–µ–º—è + –ø–æ–≥–æ–¥–∞ + –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–≤–∏–∂–æ–∫
    engine = ContextAwarenessEngine()
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    recent_activity = [
        {'action': 'recommendation_shown', 'product_category': 'restaurant', 'price': 2000},
        {'action': 'recommendation_clicked', 'product_category': 'entertainment', 'price': 1500},
        {'action': 'viewed', 'product_category': 'cafe', 'price': 800},
    ]
    
    session_data = {
        'duration_minutes': 12,
        'items_viewed': 8,
        'budget_filters_used': True,
        'categories_searched': ['restaurant', 'cafe']
    }
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    print("\nüå°Ô∏è –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç...")
    context = engine.get_complete_context(
        recent_activity=recent_activity,
        session_data=session_data
    )
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print(f"\nüìä –ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –º–æ–º–µ–Ω—Ç–∞:")
    print(f"  üå§Ô∏è  –ü–æ–≥–æ–¥–∞: {context.weather.condition}, {context.weather.temperature}¬∞C")
    print(f"  üïê –í—Ä–µ–º—è: {context.temporal.time_of_day}, {'–≤—ã—Ö–æ–¥–Ω–æ–π' if context.temporal.is_weekend else '–±—É–¥–Ω–∏–π –¥–µ–Ω—å'}")
    print(f"  üòä –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {context.user_mood.mood_type} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {context.user_mood.confidence:.2f})")
    print(f"  üí∞ –ë—é–¥–∂–µ—Ç: {context.user_mood.budget_signal}")
    print(f"  ‚ö° –≠–Ω–µ—Ä–≥–∏—è: {context.user_mood.activity_energy}")
    print(f"  üéâ –°–æ–±—ã—Ç–∏—è —Ä—è–¥–æ–º: {len(context.local_events.nearby_events)}")
    print(f"  üìà –û–±—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç-score: {context.context_score:.3f}")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    print(f"\nüéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã...")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    test_recommendations = [
        {
            'title': '–†–µ—Å—Ç–æ—Ä–∞–Ω "–ò—Ç–∞–ª—å—è–Ω–µ—Ü"',
            'category': 'restaurant',
            'price': 2500,
            'tags': ['–ò—Ç–∞–ª—å—è–Ω—Å–∫–∞—è –∫—É—Ö–Ω—è', '–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π'],
            'final_score': 0.8,
            'novelty': 0.3
        },
        {
            'title': '–ü–∞—Ä–∫ "–°–æ–∫–æ–ª—å–Ω–∏–∫–∏"',
            'category': 'activity',
            'price': 0,
            'tags': ['–ü—Ä–∏—Ä–æ–¥–∞', '–ü—Ä–æ–≥—É–ª–∫–∏', '–û—Ç–∫—Ä—ã—Ç—ã–π'],
            'final_score': 0.7,
            'novelty': 0.2
        },
        {
            'title': '–ö–æ—Ñ–µ–π–Ω—è "–£—é—Ç–Ω–∞—è"',
            'category': 'cafe',
            'price': 500,
            'tags': ['–ö–æ—Ñ–µ', '–£—é—Ç–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞', '–¢–µ–ø–ª—ã–π'],
            'final_score': 0.6,
            'novelty': 0.1
        }
    ]
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    enhanced_recs = engine.apply_context_filters(test_recommendations, context)
    
    print(f"\nüìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏:")
    for i, rec in enumerate(enhanced_recs, 1):
        boost_factor = rec['context_boost_factor']
        reasons = rec['context_reasons']
        
        print(f"{i}. {rec['title']}")
        print(f"   –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π score: {rec['final_score']:.3f}")
        print(f"   –ö–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã–π boost: x{boost_factor:.2f}")
        print(f"   –ò—Ç–æ–≥–æ–≤—ã–π score: {rec['context_boosted_score']:.3f}")
        if reasons:
            print(f"   –ü—Ä–∏—á–∏–Ω—ã: {', '.join(reasons[:2])}")
        print()
    
    print(f"üéâ Context Awareness Engine –≥–æ—Ç–æ–≤!")
    print(f"‚úÖ –§–∞–∑–∞ 2.2 (–ö–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω–∞—è –æ—Å–≤–µ–¥–æ–º–ª–µ–Ω–Ω–æ—Å—Ç—å) –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

if __name__ == "__main__":
    main()
