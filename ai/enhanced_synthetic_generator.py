"""
üöÄ Enhanced Synthetic Data Generator –¥–ª—è LoveMemory AI
–í–µ—Ä—Å–∏—è 2.0 —Å –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–º–∏ —É–ª—É—á—à–µ–Ω–∏—è–º–∏

–§–∞–∑–∞ 1: –§—É–Ω–¥–∞–º–µ–Ω—Ç ‚Äî –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ –¶–∏—Ñ—Ä–æ–≤–æ–≥–æ –î–≤–æ–π–Ω–∏–∫–∞
1.1 ‚úÖ Deep Personality Model (OCEAN - –ë–æ–ª—å—à–∞—è –ü—è—Ç—ë—Ä–∫–∞)
1.2 ‚úÖ Dynamic Interest Profile (–¥—Ä–µ–π—Ñ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ + passion scores)
1.3 ‚úÖ Relationship Dynamics Engine (–≥–∞—Ä–º–æ–Ω–∏—è + —Ä—É—Ç–∏–Ω–∞)

–°–æ–∑–¥–∞–µ—Ç —Å–∞–º—ã–π –ø—Ä–æ—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –≤ –∏–Ω–¥—É—Å—Ç—Ä–∏–∏ —Å–∏–º—É–ª—è—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
"""

import random
import uuid
import json
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from typing import Dict, List, Tuple, Optional
import os
from dataclasses import dataclass

from personality_engine import PersonalityEngine, PersonalityProfile

@dataclass
class DynamicInterest:
    """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä–µ—Å —Å –¥—Ä–µ–π—Ñ–æ–º"""
    name: str
    intensity: float  # –¢–µ–∫—É—â–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å (0-10)
    passion_score: float  # –£—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–∞—Å—Ç–∏ (0-1) - –Ω–∞—Å–∫–æ–ª—å–∫–æ —ç—Ç–æ –∫–ª—é—á–µ–≤–æ–µ —Ö–æ–±–±–∏
    decay_rate: float  # –°–∫–æ—Ä–æ—Å—Ç—å –∑–∞—Ç—É—Ö–∞–Ω–∏—è –±–µ–∑ –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–∏—è
    discovery_date: datetime  # –ö–æ–≥–¥–∞ –∏–Ω—Ç–µ—Ä–µ—Å –±—ã–ª –æ—Ç–∫—Ä—ã—Ç
    last_interaction: datetime  # –ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
    
    def update_intensity(self, interaction_boost: float = 0, days_passed: float = 0):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–∞ —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π"""
        # –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –∑–∞—Ç—É—Ö–∞–Ω–∏–µ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º
        decay = self.decay_rate * days_passed * 0.01
        self.intensity = max(0, self.intensity - decay)
        
        # Boost –æ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
        if interaction_boost > 0:
            boost = interaction_boost * (1 + self.passion_score)  # –°—Ç—Ä–∞—Å—Ç—å —É—Å–∏–ª–∏–≤–∞–µ—Ç boost
            self.intensity = min(10, self.intensity + boost)
            self.last_interaction = datetime.now()

@dataclass
class RelationshipState:
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–π –ø–∞—Ä—ã"""
    harmony_index: float  # –ò–Ω–¥–µ–∫—Å –≥–∞—Ä–º–æ–Ω–∏–∏ (0-1) - –≤—Ä–æ–∂–¥–µ–Ω–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
    routine_index: float  # –ò–Ω–¥–µ–∫—Å —Ä—É—Ç–∏–Ω—ã (0-1) - –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–∞—è –ø—Ä–∏–≤—ã—á–Ω–æ—Å—Ç—å
    adventure_appetite: float  # –ê–ø–ø–µ—Ç–∏—Ç –∫ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è–º (0-1)
    last_novel_experience: datetime  # –ü–æ—Å–ª–µ–¥–Ω–∏–π –Ω–æ–≤—ã–π –æ–ø—ã—Ç
    shared_memories: List[Dict]  # –°–ø–∏—Å–æ–∫ –æ–±—â–∏—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π
    
    def update_routine(self, activity_novelty: float):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω–¥–µ–∫—Å —Ä—É—Ç–∏–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–≤–∏–∑–Ω—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        if activity_novelty > 0.7:  # –ù–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            self.routine_index = max(0, self.routine_index - 0.1)
            self.last_novel_experience = datetime.now()
            self.adventure_appetite = min(1.0, self.adventure_appetite + 0.05)
        elif activity_novelty < 0.3:  # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            self.routine_index = min(1.0, self.routine_index + 0.05)
            self.adventure_appetite = max(0, self.adventure_appetite - 0.02)

class EnhancedSyntheticGenerator:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å commercial-grade —Ä–µ–∞–ª–∏–∑–º–æ–º"""
    
    def __init__(self):
        self.personality_engine = PersonalityEngine()
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ (—Ç–µ–ø–µ—Ä—å 75 –ø–æ–∑–∏—Ü–∏–π –ø—Ä–æ—Ç–∏–≤ 12)
        self.enhanced_product_catalog = self._create_enhanced_catalog()
        
        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        self.temporal_patterns = {
            'morning': {'weight': 0.15, 'suitable_activities': ['fitness', 'cafe', 'park']},
            'afternoon': {'weight': 0.25, 'suitable_activities': ['museum', 'shopping', 'lunch']},
            'evening': {'weight': 0.45, 'suitable_activities': ['restaurant', 'theater', 'movies']},
            'night': {'weight': 0.15, 'suitable_activities': ['bar', 'club', 'late_cafe']}
        }
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –∏–Ω—Ç–µ—Ä–µ—Å–∞ (–¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ –¥—Ä–µ–π—Ñ–∞)
        self.interest_patterns = {
            'seasonal': ['skiing', 'beach', 'outdoor_sports', 'gardening'],
            'trending': ['new_cuisine', 'latest_movies', 'viral_activities'],
            'stable': ['family_time', 'reading', 'basic_fitness'],
            'social_influenced': ['restaurants', 'events', 'experiences']
        }
    
    def _create_enhanced_catalog(self) -> List[Dict]:
        """–°–æ–∑–¥–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ —Å 75 –ø–æ–∑–∏—Ü–∏—è–º–∏"""
        catalog = []
        
        # –†–µ—Å—Ç–æ—Ä–∞–Ω—ã (20 –ø–æ–∑–∏—Ü–∏–π) - —Ä–∞–∑–Ω—ã–µ —Ü–µ–Ω–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∫—É—Ö–Ω–∏
        restaurants = [
            # –ü—Ä–µ–º–∏—É–º (3000-5000 —Ä—É–±)
            {'title': '–†–µ—Å—Ç–æ—Ä–∞–Ω "–ß–µ—Ä–Ω–∞—è –ò–∫—Ä–∞"', 'category': 'restaurant', 'price': 4500, 'novelty': 0.8,
             'tags': ['–†—É—Å—Å–∫–∞—è –∫—É—Ö–Ω—è', '–ü—Ä–µ–º–∏—É–º', '–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π'], 'love_language': 'quality_time'},
            {'title': '–ú–∏—à–ª–µ–Ω–æ–≤—Å–∫–∏–π "Le Bernardin"', 'category': 'restaurant', 'price': 5000, 'novelty': 0.9,
             'tags': ['–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∞—è –∫—É—Ö–Ω—è', '–ú–∏—à–ª–µ–Ω', '–ò–∑—ã—Å–∫–∞–Ω–Ω—ã–π'], 'love_language': 'receiving_gifts'},
            {'title': '–Ø–ø–æ–Ω—Å–∫–∏–π "Nobu Moscow"', 'category': 'restaurant', 'price': 4200, 'novelty': 0.7,
             'tags': ['–Ø–ø–æ–Ω—Å–∫–∞—è –∫—É—Ö–Ω—è', '–°—É—à–∏', '–ü—Ä–µ–º–∏—É–º'], 'love_language': 'quality_time'},
            
            # –°—Ä–µ–¥–Ω–∏–π —Å–µ–≥–º–µ–Ω—Ç (1500-3000 —Ä—É–±)
            {'title': '–†–µ—Å—Ç–æ—Ä–∞–Ω "–ò—Ç–∞–ª—å—è–Ω–µ—Ü"', 'category': 'restaurant', 'price': 2500, 'novelty': 0.4,
             'tags': ['–ò—Ç–∞–ª—å—è–Ω—Å–∫–∞—è –∫—É—Ö–Ω—è', '–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π'], 'love_language': 'quality_time'},
            {'title': '–°—É—à–∏-–±–∞—Ä "–¢–æ–∫–∏–æ"', 'category': 'restaurant', 'price': 1800, 'novelty': 0.3,
             'tags': ['–Ø–ø–æ–Ω—Å–∫–∞—è –∫—É—Ö–Ω—è', '–°–≤–µ–∂–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã'], 'love_language': 'acts_of_service'},
            {'title': '–°—Ç–µ–π–∫-—Ö–∞—É—Å "–ú—è—Å–æ"', 'category': 'restaurant', 'price': 2800, 'novelty': 0.2,
             'tags': ['–ú—è—Å–æ', '–ì—Ä–∏–ª—å'], 'love_language': 'acts_of_service'},
            {'title': '–ì—Ä—É–∑–∏–Ω—Å–∫–∏–π "–¢–±–∏–ª–∏—Å–∏"', 'category': 'restaurant', 'price': 2000, 'novelty': 0.3,
             'tags': ['–ì—Ä—É–∑–∏–Ω—Å–∫–∞—è –∫—É—Ö–Ω—è', '–•–∞—á–∞–ø—É—Ä–∏'], 'love_language': 'quality_time'},
            {'title': '–¢–∞–π—Å–∫–∏–π "–ë–∞–Ω–≥–∫–æ–∫"', 'category': 'restaurant', 'price': 2200, 'novelty': 0.5,
             'tags': ['–¢–∞–π—Å–∫–∞—è –∫—É—Ö–Ω—è', '–û—Å—Ç—Ä—ã–π'], 'love_language': 'quality_time'},
            {'title': '–ú–µ–∫—Å–∏–∫–∞–Ω—Å–∫–∏–π "–¢–µ–∫–∏–ª–∞"', 'category': 'restaurant', 'price': 1700, 'novelty': 0.4,
             'tags': ['–ú–µ–∫—Å–∏–∫–∞–Ω—Å–∫–∞—è –∫—É—Ö–Ω—è', '–û—Å—Ç—Ä—ã–π'], 'love_language': 'quality_time'},
            {'title': '–ò–Ω–¥–∏–π—Å–∫–∏–π "–ë–æ–º–±–µ–π"', 'category': 'restaurant', 'price': 1800, 'novelty': 0.6,
             'tags': ['–ò–Ω–¥–∏–π—Å–∫–∞—è –∫—É—Ö–Ω—è', '–°–ø–µ—Ü–∏–∏'], 'love_language': 'quality_time'},
            
            # –ë—é–¥–∂–µ—Ç–Ω—ã–π —Å–µ–≥–º–µ–Ω—Ç (500-1500 —Ä—É–±)
            {'title': '–ü–∏—Ü—Ü–µ—Ä–∏—è "–ú–∞–º–∞ –ú–∏—è"', 'category': 'restaurant', 'price': 1200, 'novelty': 0.1,
             'tags': ['–ü–∏—Ü—Ü–∞', '–ò—Ç–∞–ª—å—è–Ω—Å–∫–∞—è –∫—É—Ö–Ω—è'], 'love_language': 'quality_time'},
            {'title': '–†–µ—Å—Ç–æ—Ä–∞–Ω "–ì—Ä–∏–Ω"', 'category': 'restaurant', 'price': 1600, 'novelty': 0.7,
             'tags': ['–í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∏–π', '–ó–¥–æ—Ä–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ'], 'love_language': 'acts_of_service'},
            {'title': '–†–µ—Å—Ç–æ—Ä–∞–Ω "–ú–æ—Ä–µ"', 'category': 'restaurant', 'price': 2600, 'novelty': 0.3,
             'tags': ['–ú–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã', '–°–≤–µ–∂–∏–π'], 'love_language': 'acts_of_service'},
            {'title': '–ö–æ—Ä–µ–π—Å–∫–∏–π "–°–µ—É–ª"', 'category': 'restaurant', 'price': 1900, 'novelty': 0.8,
             'tags': ['–ö–æ—Ä–µ–π—Å–∫–∞—è –∫—É—Ö–Ω—è', 'K-BBQ'], 'love_language': 'quality_time'},
            {'title': '–†–µ—Å—Ç–æ—Ä–∞–Ω "–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω"', 'category': 'restaurant', 'price': 1500, 'novelty': 0.3,
             'tags': ['–£–∑–±–µ–∫—Å–∫–∞—è –∫—É—Ö–Ω—è', '–ü–ª–æ–≤'], 'love_language': 'quality_time'},
            {'title': '–ö–∏—Ç–∞–π—Å–∫–∏–π "–ü–µ–∫–∏–Ω"', 'category': 'restaurant', 'price': 1800, 'novelty': 0.4,
             'tags': ['–ö–∏—Ç–∞–π—Å–∫–∞—è –∫—É—Ö–Ω—è', '–£—Ç–∫–∞'], 'love_language': 'quality_time'},
            {'title': '–õ–∏–≤–∞–Ω—Å–∫–∏–π "–ë–µ–π—Ä—É—Ç"', 'category': 'restaurant', 'price': 2100, 'novelty': 0.9,
             'tags': ['–õ–∏–≤–∞–Ω—Å–∫–∞—è –∫—É—Ö–Ω—è', '–•—É–º—É—Å'], 'love_language': 'quality_time'},
            {'title': '–ë—Ä–∞–∑–∏–ª—å—Å–∫–∏–π "–†–∏–æ"', 'category': 'restaurant', 'price': 2400, 'novelty': 0.9,
             'tags': ['–ë—Ä–∞–∑–∏–ª—å—Å–∫–∞—è –∫—É—Ö–Ω—è', '–®—É—Ä–∞—Å–∫–æ'], 'love_language': 'quality_time'},
            {'title': '–ù–µ–º–µ—Ü–∫–∏–π "–ë–∞–≤–∞—Ä–∏—è"', 'category': 'restaurant', 'price': 2300, 'novelty': 0.2,
             'tags': ['–ù–µ–º–µ—Ü–∫–∞—è –∫—É—Ö–Ω—è', '–ü–∏–≤–æ'], 'love_language': 'quality_time'},
            {'title': '–ê—Ä–º—è–Ω—Å–∫–∏–π "–ï—Ä–µ–≤–∞–Ω"', 'category': 'restaurant', 'price': 2100, 'novelty': 0.2,
             'tags': ['–ê—Ä–º—è–Ω—Å–∫–∞—è –∫—É—Ö–Ω—è', '–®–∞—à–ª—ã–∫'], 'love_language': 'quality_time'},
        ]
        
        # –ö–∞—Ñ–µ –∏ –±–∞—Ä—ã (15 –ø–æ–∑–∏—Ü–∏–π)
        cafes = [
            {'title': '–ö–æ—Ñ–µ–π–Ω—è "–ê—Ä–æ–º–∞—Ç"', 'category': 'cafe', 'price': 500, 'novelty': 0.2,
             'tags': ['–ö–æ—Ñ–µ', '–£—é—Ç–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞'], 'love_language': 'quality_time'},
            {'title': '–ö–∞—Ñ–µ "–õ–æ—Ñ—Ç"', 'category': 'cafe', 'price': 700, 'novelty': 0.6,
             'tags': ['–ö–æ—Ñ–µ', '–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω'], 'love_language': 'quality_time'},
            {'title': '–ö–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–∞—è "–°–ª–∞–¥–æ—Å—Ç—å"', 'category': 'cafe', 'price': 600, 'novelty': 0.3,
             'tags': ['–î–µ—Å–µ—Ä—Ç—ã', '–í—ã–ø–µ—á–∫–∞'], 'love_language': 'receiving_gifts'},
            {'title': '–ß–∞–π–Ω–∞—è "–í–æ—Å—Ç–æ–∫"', 'category': 'cafe', 'price': 450, 'novelty': 0.4,
             'tags': ['–ß–∞–π', '–í–æ—Å—Ç–æ—á–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞'], 'love_language': 'quality_time'},
            {'title': '–ö–∞—Ñ–µ "–ë—É–∫"', 'category': 'cafe', 'price': 550, 'novelty': 0.5,
             'tags': ['–ö–æ—Ñ–µ', '–ö–Ω–∏–≥–∏'], 'love_language': 'quality_time'},
            {'title': '–°–º—É–∑–∏-–±–∞—Ä "–§—Ä–µ—à"', 'category': 'cafe', 'price': 400, 'novelty': 0.7,
             'tags': ['–°–º—É–∑–∏', '–ó–¥–æ—Ä–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ'], 'love_language': 'acts_of_service'},
            {'title': '–í–∏–Ω–Ω—ã–π –±–∞—Ä "–ö—å—è–Ω—Ç–∏"', 'category': 'bar', 'price': 1200, 'novelty': 0.6,
             'tags': ['–í–∏–Ω–æ', '–î–µ–≥—É—Å—Ç–∞—Ü–∏—è'], 'love_language': 'quality_time'},
            {'title': '–ö–æ–∫—Ç–µ–π–ª—å–Ω—ã–π –±–∞—Ä "–ú–æ—Ö–∏—Ç–æ"', 'category': 'bar', 'price': 1500, 'novelty': 0.4,
             'tags': ['–ö–æ–∫—Ç–µ–π–ª–∏', '–ê—Ç–º–æ—Å—Ñ–µ—Ä–∞'], 'love_language': 'quality_time'},
            {'title': '–ö–æ—Ñ–µ-—Ö–∞—É—Å "–≠—Å–ø—Ä–µ—Å—Å–æ"', 'category': 'cafe', 'price': 480, 'novelty': 0.3,
             'tags': ['–ö–æ—Ñ–µ', '–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π'], 'love_language': 'quality_time'},
            {'title': '–ü–µ–∫–∞—Ä–Ω—è "–•–ª–µ–±"', 'category': 'cafe', 'price': 350, 'novelty': 0.2,
             'tags': ['–í—ã–ø–µ—á–∫–∞', '–°–≤–µ–∂–∏–π —Ö–ª–µ–±'], 'love_language': 'acts_of_service'},
            {'title': '–ö—Ä–∞—Ñ—Ç–æ–≤–∞—è –ø–∏–≤–æ–≤–∞—Ä–Ω—è "–•–º–µ–ª—å"', 'category': 'bar', 'price': 900, 'novelty': 0.8,
             'tags': ['–ö—Ä–∞—Ñ—Ç–æ–≤–æ–µ –ø–∏–≤–æ', '–î–µ–≥—É—Å—Ç–∞—Ü–∏—è'], 'love_language': 'quality_time'},
            {'title': '–ú–æ–ª–æ—á–Ω—ã–π –±–∞—Ä "–õ–∞—Ç—Ç–µ"', 'category': 'cafe', 'price': 520, 'novelty': 0.9,
             'tags': ['–ú–æ–ª–æ—á–Ω—ã–µ –∫–æ–∫—Ç–µ–π–ª–∏', '–ò–Ω—Å—Ç–∞–≥—Ä–∞–º'], 'love_language': 'receiving_gifts'},
            {'title': '–ö–æ—Ñ–µ –Ω–∞ –∫–æ–ª–µ—Å–∞—Ö "–ú–æ–±–∏–ª—å–Ω—ã–π"', 'category': 'cafe', 'price': 300, 'novelty': 0.9,
             'tags': ['–ö–æ—Ñ–µ', '–ú–æ–±–∏–ª—å–Ω—ã–π', '–ë—ã—Å—Ç—Ä–æ'], 'love_language': 'acts_of_service'},
            {'title': '–ß–∞–π–Ω–∞—è —Ü–µ—Ä–µ–º–æ–Ω–∏—è "–°—ç–Ω"', 'category': 'cafe', 'price': 800, 'novelty': 0.9,
             'tags': ['–ß–∞–π–Ω–∞—è —Ü–µ—Ä–µ–º–æ–Ω–∏—è', '–Ø–ø–æ–Ω–∏—è', '–ú–µ–¥–∏—Ç–∞—Ü–∏—è'], 'love_language': 'quality_time'},
            {'title': '–ö–∞—Ñ–µ "–ö—Ä–µ–º"', 'category': 'cafe', 'price': 650, 'novelty': 0.2,
             'tags': ['–î–µ—Å–µ—Ä—Ç—ã', '–ú–æ—Ä–æ–∂–µ–Ω–æ–µ'], 'love_language': 'receiving_gifts'},
        ]
        
        # –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è (25 –ø–æ–∑–∏—Ü–∏–π)  
        entertainment = [
            {'title': '–ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä "–ú–∞–∫—Å–∏–º—É–º"', 'category': 'entertainment', 'price': 800, 'novelty': 0.3,
             'tags': ['–§–∏–ª—å–º—ã', '–ü–æ–ø–∫–æ—Ä–Ω'], 'love_language': 'quality_time'},
            {'title': '–ö–≤–µ—Å—Ç-–∫–æ–º–Ω–∞—Ç–∞ "–ó–∞–≥–∞–¥–∫–∞"', 'category': 'entertainment', 'price': 1200, 'novelty': 0.7,
             'tags': ['–ö–≤–µ—Å—Ç—ã', '–ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞'], 'love_language': 'quality_time'},
            {'title': '–ë–æ—É–ª–∏–Ω–≥ "–°—Ç—Ä–∞–π–∫"', 'category': 'entertainment', 'price': 1000, 'novelty': 0.2,
             'tags': ['–ë–æ—É–ª–∏–Ω–≥', '–°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è'], 'love_language': 'quality_time'},
            {'title': '–ö–∞—Ä–∞–æ–∫–µ "–ì–æ–ª–æ—Å"', 'category': 'entertainment', 'price': 1500, 'novelty': 0.3,
             'tags': ['–ö–∞—Ä–∞–æ–∫–µ', '–ú—É–∑—ã–∫–∞'], 'love_language': 'quality_time'},
            {'title': '–õ–∞–∑–µ—Ä—Ç–∞–≥ "–ö–æ—Å–º–æ—Å"', 'category': 'entertainment', 'price': 1100, 'novelty': 0.6,
             'tags': ['–õ–∞–∑–µ—Ä—Ç–∞–≥', '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'], 'love_language': 'physical_touch'},
            {'title': '–ü–ª–∞–Ω–µ—Ç–∞—Ä–∏–π', 'category': 'entertainment', 'price': 600, 'novelty': 0.4,
             'tags': ['–ù–∞—É–∫–∞', '–ó–≤–µ–∑–¥—ã'], 'love_language': 'quality_time'},
            {'title': '–¢–µ–∞—Ç—Ä "–ú–∞—Å–∫–∞"', 'category': 'entertainment', 'price': 1800, 'novelty': 0.5,
             'tags': ['–¢–µ–∞—Ç—Ä', '–ö—É–ª—å—Ç—É—Ä–∞'], 'love_language': 'quality_time'},
            {'title': 'VR –∫–ª—É–± "–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å"', 'category': 'entertainment', 'price': 1400, 'novelty': 0.9,
             'tags': ['VR/AR', '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏'], 'love_language': 'quality_time'},
            {'title': '–≠—Å–∫–µ–π–ø-—Ä—É–º "–ü–æ–±–µ–≥"', 'category': 'entertainment', 'price': 1300, 'novelty': 0.8,
             'tags': ['–ö–≤–µ—Å—Ç—ã', '–õ–æ–≥–∏–∫–∞'], 'love_language': 'quality_time'},
            {'title': '–ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä IMAX', 'category': 'entertainment', 'price': 1200, 'novelty': 0.4,
             'tags': ['–§–∏–ª—å–º—ã', '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏'], 'love_language': 'quality_time'},
            {'title': '–ö–æ–º–µ–¥–∏ –∫–ª–∞–±', 'category': 'entertainment', 'price': 1000, 'novelty': 0.6,
             'tags': ['–°—Ç–µ–Ω–¥–∞–ø', '–Æ–º–æ—Ä'], 'love_language': 'quality_time'},
            {'title': '–¢–∞–Ω—Ü–µ–≤–∞–ª—å–Ω–∞—è —Å—Ç—É–¥–∏—è', 'category': 'entertainment', 'price': 800, 'novelty': 0.7,
             'tags': ['–¢–∞–Ω—Ü—ã', '–û–±—É—á–µ–Ω–∏–µ'], 'love_language': 'physical_touch'},
            {'title': '–ë–∏–ª—å—è—Ä–¥–Ω—ã–π –∫–ª—É–± "–ö–∏–π"', 'category': 'entertainment', 'price': 900, 'novelty': 0.2,
             'tags': ['–ë–∏–ª—å—è—Ä–¥', '–°–ø–æ–∫–æ–π–Ω–∞—è –∏–≥—Ä–∞'], 'love_language': 'quality_time'},
            {'title': '–ê—Ä–∫–∞–¥–∞ "–ì–µ–π–º–∑–æ–Ω"', 'category': 'entertainment', 'price': 700, 'novelty': 0.4,
             'tags': ['–í–∏–¥–µ–æ–∏–≥—Ä—ã', '–†–µ—Ç—Ä–æ'], 'love_language': 'quality_time'},
            {'title': '–ê–Ω—Ç–∏–∫–∞—Ñ–µ "–í—Ä–µ–º—è"', 'category': 'entertainment', 'price': 300, 'novelty': 0.5,
             'tags': ['–û–±—â–µ–Ω–∏–µ', '–ò–≥—Ä—ã'], 'love_language': 'quality_time'},
            {'title': '–ë–∞—Ç—É—Ç–Ω—ã–π —Ü–µ–Ω—Ç—Ä "–ü—Ä—ã–≥"', 'category': 'entertainment', 'price': 800, 'novelty': 0.8,
             'tags': ['–ë–∞—Ç—É—Ç—ã', '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'], 'love_language': 'physical_touch'},
            {'title': '–ö–∞—Ä—Ç–∏–Ω–≥ "–§–æ—Ä–º—É–ª–∞"', 'category': 'entertainment', 'price': 1800, 'novelty': 0.6,
             'tags': ['–ì–æ–Ω–∫–∏', '–ê–¥—Ä–µ–Ω–∞–ª–∏–Ω'], 'love_language': 'quality_time'},
            {'title': '–ü–µ–π–Ω—Ç–±–æ–ª "–í–æ–π–Ω–∞"', 'category': 'entertainment', 'price': 1500, 'novelty': 0.5,
             'tags': ['–ü–µ–π–Ω—Ç–±–æ–ª', '–ö–æ–º–∞–Ω–¥–∞'], 'love_language': 'physical_touch'},
            {'title': '–ö–∞—Ç–æ–∫ "–õ–µ–¥"', 'category': 'entertainment', 'price': 600, 'novelty': 0.3,
             'tags': ['–ö–æ–Ω—å–∫–∏', '–°–µ–∑–æ–Ω–Ω—ã–π'], 'love_language': 'physical_touch'},
            {'title': '–°—Ç—Ä–µ–ª—å–±–∞ –∏–∑ –ª—É–∫–∞ "–†–æ–±–∏–Ω"', 'category': 'entertainment', 'price': 1000, 'novelty': 0.8,
             'tags': ['–°—Ç—Ä–µ–ª—å–±–∞', '–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è'], 'love_language': 'quality_time'},
            {'title': '–î–µ–≥—É—Å—Ç–∞—Ü–∏—è –≤–∏—Å–∫–∏ "–°–∫–æ—Ç—á"', 'category': 'entertainment', 'price': 2000, 'novelty': 0.9,
             'tags': ['–ê–ª–∫–æ–≥–æ–ª—å', '–î–µ–≥—É—Å—Ç–∞—Ü–∏—è', '–ü—Ä–µ–º–∏—É–º'], 'love_language': 'quality_time'},
            {'title': '–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å "–°—É—à–∏"', 'category': 'entertainment', 'price': 1600, 'novelty': 0.8,
             'tags': ['–ö—É–ª–∏–Ω–∞—Ä–∏—è', '–Ø–ø–æ–Ω—Å–∫–∞—è –∫—É—Ö–Ω—è', '–û–±—É—á–µ–Ω–∏–µ'], 'love_language': 'acts_of_service'},
            {'title': '–ù–æ—á–Ω–æ–π –∫–ª—É–± "–ë–∏—Ç"', 'category': 'entertainment', 'price': 1200, 'novelty': 0.4,
             'tags': ['–ö–ª—É–±', '–¢–∞–Ω—Ü—ã', '–ú—É–∑—ã–∫–∞'], 'love_language': 'physical_touch'},
            {'title': '–î–∂–∞–∑-–∫–ª—É–± "–ë–ª—é–∑"', 'category': 'entertainment', 'price': 1100, 'novelty': 0.7,
             'tags': ['–î–∂–∞–∑', '–ñ–∏–≤–∞—è –º—É–∑—ã–∫–∞'], 'love_language': 'quality_time'},
            {'title': '–¶–∏—Ä–∫ "–ß—É–¥–µ—Å–∞"', 'category': 'entertainment', 'price': 1300, 'novelty': 0.5,
             'tags': ['–¶–∏—Ä–∫', '–®–æ—É'], 'love_language': 'quality_time'},
        ]
        
        # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (15 –ø–æ–∑–∏—Ü–∏–π)
        activities = [
            {'title': '–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å –ø–æ –∂–∏–≤–æ–ø–∏—Å–∏', 'category': 'activity', 'price': 1800, 'novelty': 0.7,
             'tags': ['–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ', '–û–±—É—á–µ–Ω–∏–µ'], 'love_language': 'quality_time'},
            {'title': '–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∑–∞–ª', 'category': 'activity', 'price': 1500, 'novelty': 0.2,
             'tags': ['–§–∏—Ç–Ω–µ—Å', '–ó–¥–æ—Ä–æ–≤—å–µ'], 'love_language': 'acts_of_service'},
            {'title': '–ô–æ–≥–∞-—Å—Ç—É–¥–∏—è', 'category': 'activity', 'price': 1200, 'novelty': 0.4,
             'tags': ['–ô–æ–≥–∞', '–ú–µ–¥–∏—Ç–∞—Ü–∏—è'], 'love_language': 'quality_time'},
            {'title': '–ë–∞—Å—Å–µ–π–Ω', 'category': 'activity', 'price': 800, 'novelty': 0.3,
             'tags': ['–ü–ª–∞–≤–∞–Ω–∏–µ', '–°–ø–æ—Ä—Ç'], 'love_language': 'physical_touch'},
            {'title': '–°–∫–∞–ª–æ–¥—Ä–æ–º', 'category': 'activity', 'price': 1100, 'novelty': 0.8,
             'tags': ['–°–∫–∞–ª–æ–ª–∞–∑–∞–Ω–∏–µ', '–≠–∫—Å—Ç—Ä–∏–º'], 'love_language': 'physical_touch'},
            {'title': '–ü–∞—Ä–∫ "–°–æ–∫–æ–ª—å–Ω–∏–∫–∏"', 'category': 'activity', 'price': 0, 'novelty': 0.1,
             'tags': ['–ü—Ä–∏—Ä–æ–¥–∞', '–ü—Ä–æ–≥—É–ª–∫–∏'], 'love_language': 'quality_time'},
            {'title': '–ë–æ—Ç–∞–Ω–∏—á–µ—Å–∫–∏–π —Å–∞–¥', 'category': 'activity', 'price': 300, 'novelty': 0.3,
             'tags': ['–†–∞—Å—Ç–µ–Ω–∏—è', '–ü—Ä–∏—Ä–æ–¥–∞'], 'love_language': 'quality_time'},
            {'title': '–ó–æ–æ–ø–∞—Ä–∫', 'category': 'activity', 'price': 700, 'novelty': 0.2,
             'tags': ['–ñ–∏–≤–æ—Ç–Ω—ã–µ', '–°–µ–º–µ–π–Ω—ã–π'], 'love_language': 'quality_time'},
            {'title': '–ú—É–∑–µ–π –∏—Å–∫—É—Å—Å—Ç–≤', 'category': 'activity', 'price': 600, 'novelty': 0.4,
             'tags': ['–ò—Å–∫—É—Å—Å—Ç–≤–æ', '–ö—É–ª—å—Ç—É—Ä–∞'], 'love_language': 'quality_time'},
            {'title': '–ö–æ–Ω–Ω–∞—è –ø—Ä–æ–≥—É–ª–∫–∞', 'category': 'activity', 'price': 2800, 'novelty': 0.8,
             'tags': ['–õ–æ—à–∞–¥–∏', '–ü—Ä–∏—Ä–æ–¥–∞'], 'love_language': 'quality_time'},
            {'title': '–†–æ—É–ø-–¥–∂–∞–º–ø–∏–Ω–≥', 'category': 'activity', 'price': 3000, 'novelty': 0.9,
             'tags': ['–≠–∫—Å—Ç—Ä–∏–º', '–ê–¥—Ä–µ–Ω–∞–ª–∏–Ω'], 'love_language': 'physical_touch'},
            {'title': '–ë–∞–Ω—è "–†—É—Å—Å–∫–∞—è"', 'category': 'activity', 'price': 2000, 'novelty': 0.3,
             'tags': ['–ë–∞–Ω—è', '–†–µ–ª–∞–∫—Å'], 'love_language': 'physical_touch'},
            {'title': '–£—Ä–æ–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏', 'category': 'activity', 'price': 1200, 'novelty': 0.6,
             'tags': ['–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è', '–û–±—É—á–µ–Ω–∏–µ'], 'love_language': 'quality_time'},
            {'title': '–í–∏–Ω–Ω–∞—è –¥–µ–≥—É—Å—Ç–∞—Ü–∏—è', 'category': 'activity', 'price': 2500, 'novelty': 0.7,
             'tags': ['–í–∏–Ω–æ', '–î–µ–≥—É—Å—Ç–∞—Ü–∏—è'], 'love_language': 'acts_of_service'},
            {'title': '–°–∞–ø—Å–µ—Ä—Ñ–∏–Ω–≥ "–í–æ–ª–Ω–∞"', 'category': 'activity', 'price': 2200, 'novelty': 0.9,
             'tags': ['–°–∞–ø—Å–µ—Ä—Ñ–∏–Ω–≥', '–í–æ–¥–∞', '–°–ø–æ—Ä—Ç'], 'love_language': 'physical_touch'},
        ]
        
        catalog.extend(restaurants)
        catalog.extend(cafes) 
        catalog.extend(entertainment)
        catalog.extend(activities)
        
        return catalog
    
    def generate_enhanced_user(self, archetype: str, user_id: str = None) -> Dict:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å OCEAN –ª–∏—á–Ω–æ—Å—Ç—å—é –∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏
        
        Args:
            archetype: –ê—Ä—Ö–µ—Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –ø–æ–ª–Ω—ã–º –ø—Ä–æ—Ñ–∏–ª–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        if user_id is None:
            user_id = str(uuid.uuid4())
        
        # –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        age = random.randint(20, 45)
        gender = random.choice(['male', 'female'])
        city = random.choice(['–ú–æ—Å–∫–≤–∞', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥'])
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º OCEAN –ª–∏—á–Ω–æ—Å—Ç—å
        personality = self.personality_engine.generate_personality_profile(archetype)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã
        dynamic_interests = self._generate_dynamic_interests(archetype, personality)
        
        # –Ø–∑—ã–∫–∏ –ª—é–±–≤–∏ (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        love_languages = self._generate_love_languages(personality)
        
        # –ë—é–¥–∂–µ—Ç–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª–∏—á–Ω–æ—Å—Ç–∏
        budget_preference = self._determine_budget_preference(personality, age)
        
        return {
            'id': user_id,
            'age': age,
            'gender': gender,
            'city': city,
            'archetype': archetype,
            
            # OCEAN –ª–∏—á–Ω–æ—Å—Ç—å
            'personality': personality.to_dict(),
            'personality_description': self.personality_engine.get_personality_description(personality),
            
            # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã
            'dynamic_interests': {name: {
                'intensity': interest.intensity,
                'passion_score': interest.passion_score,
                'decay_rate': interest.decay_rate,
                'discovery_date': interest.discovery_date.isoformat(),
                'last_interaction': interest.last_interaction.isoformat()
            } for name, interest in dynamic_interests.items()},
            
            # –¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            'interests': {name: interest.intensity for name, interest in dynamic_interests.items()},
            'love_languages': love_languages,
            'budget_preference': budget_preference,
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
            'activity_probability': self._calculate_activity_probability(personality),
            'adventure_appetite': random.uniform(0.3, 0.9),
            'social_influence_susceptibility': personality.extraversion * 0.7 + personality.agreeableness * 0.3,
            
            # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            'created_at': datetime.now().isoformat(),
            'version': '2.0_enhanced'
        }
    
    def _generate_dynamic_interests(self, archetype: str, personality: PersonalityProfile) -> Dict[str, DynamicInterest]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã —Å —É—á–µ—Ç–æ–º –∞—Ä—Ö–µ—Ç–∏–ø–∞ –∏ –ª–∏—á–Ω–æ—Å—Ç–∏"""
        base_interests = {
            'ArtLovers': ['–ñ–∏–≤–æ–ø–∏—Å—å', '–¢–µ–∞—Ç—Ä', '–ú—É–∑—ã–∫–∞', '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è', '–î–∏–∑–∞–π–Ω', '–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞'],
            'Gamers': ['–í–∏–¥–µ–æ–∏–≥—Ä—ã', '–ù–∞—Å—Ç–æ–ª—å–Ω—ã–µ –∏–≥—Ä—ã', '–ö–≤–µ—Å—Ç—ã', '–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞', '–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –º—É–∑—ã–∫–∞', '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏'],
            'Gourmets': ['–ò—Ç–∞–ª—å—è–Ω—Å–∫–∞—è –∫—É—Ö–Ω—è', '–ê–∑–∏–∞—Ç—Å–∫–∞—è –∫—É—Ö–Ω—è', '–ö–æ—Ñ–µ', '–í–∏–Ω–æ', '–ö—Ä–∞—Ñ—Ç–æ–≤–æ–µ –ø–∏–≤–æ', '–î–µ—Å–µ—Ä—Ç—ã'],
            'Homebodies': ['–°–µ—Ä–∏–∞–ª—ã', '–ù–∞—Å—Ç–æ–ª—å–Ω—ã–µ –∏–≥—Ä—ã', '–ö—É–ª–∏–Ω–∞—Ä–∏—è', '–ö–Ω–∏–≥–∏', '–†—É–∫–æ–¥–µ–ª–∏–µ', '–î–æ–º–∞—à–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω—ã–µ'],
            'Fitness': ['–§–∏—Ç–Ω–µ—Å', '–ë–µ–≥', '–ô–æ–≥–∞', '–ü–ª–∞–≤–∞–Ω–∏–µ', '–í–µ–ª–æ—Å–∏–ø–µ–¥', '–ó–¥–æ—Ä–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ'],
            'Travelers': ['–ì–æ—Ä–æ–¥—Å–∫–∏–µ –ø–æ–µ–∑–¥–∫–∏', '–ü–ª—è–∂–Ω—ã–π –æ—Ç–¥—ã—Ö', '–ì–æ—Ä—ã', '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è', '–ö—É–ª—å—Ç—É—Ä–Ω—ã–π —Ç—É—Ä–∏–∑–º', '–ê–≤—Ç–æ–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è']
        }
        
        all_interests = [
            '–ò—Ç–∞–ª—å—è–Ω—Å–∫–∞—è –∫—É—Ö–Ω—è', '–ê–∑–∏–∞—Ç—Å–∫–∞—è –∫—É—Ö–Ω—è', '–ö–æ—Ñ–µ', '–î–µ—Å–µ—Ä—Ç—ã', '–ë–∞—Ä–±–µ–∫—é', '–í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∞—è –µ–¥–∞',
            '–§–∏–ª—å–º—ã', '–°–µ—Ä–∏–∞–ª—ã', '–¢–µ–∞—Ç—Ä', '–ú—É–∑—ã–∫–∞', '–ñ–∏–≤–æ–ø–∏—Å—å', '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è', '–¢–∞–Ω—Ü—ã',
            '–§–∏—Ç–Ω–µ—Å', '–ë–µ–≥', '–ô–æ–≥–∞', '–ü–ª–∞–≤–∞–Ω–∏–µ', '–í–µ–ª–æ—Å–∏–ø–µ–¥', '–¢–µ–Ω–Ω–∏—Å', '–§—É—Ç–±–æ–ª',
            '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è', '–ì–æ—Ä—ã', '–ü–ª—è–∂', '–ì–æ—Ä–æ–¥—Å–∫–∏–µ –ø–æ–µ–∑–¥–∫–∏', '–ö—É–ª—å—Ç—É—Ä–Ω—ã–π —Ç—É—Ä–∏–∑–º',
            '–í–∏–¥–µ–æ–∏–≥—Ä—ã', '–ù–∞—Å—Ç–æ–ª—å–Ω—ã–µ –∏–≥—Ä—ã', '–ö–≤–µ—Å—Ç—ã', '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ',
            '–ö–Ω–∏–≥–∏', '–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞', '–î–µ—Ç–µ–∫—Ç–∏–≤—ã', '–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞', '–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è',
            '–ö—É–ª–∏–Ω–∞—Ä–∏—è', '–†—É–∫–æ–¥–µ–ª–∏–µ', '–°–∞–¥–æ–≤–æ–¥—Å—Ç–≤–æ', '–î–æ–º–∞—à–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω—ã–µ', '–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ'
        ]
        
        dynamic_interests = {}
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã –∞—Ä—Ö–µ—Ç–∏–ø–∞ (–≤—ã—Å–æ–∫–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –∏ passion score)
        archetype_interests = base_interests.get(archetype, [])
        for interest in archetype_interests:
            intensity = random.uniform(7, 10)
            passion_score = random.uniform(0.6, 0.9)  # –í—ã—Å–æ–∫–∞—è —Å—Ç—Ä–∞—Å—Ç—å
            decay_rate = random.uniform(0.5, 1.5)  # –ú–µ–¥–ª–µ–Ω–Ω–æ –∑–∞—Ç—É—Ö–∞—é—Ç
            
            # –û—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å –≤–ª–∏—è–µ—Ç –Ω–∞ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
            if personality.openness > 0.7:
                intensity += random.uniform(0, 1)
                passion_score += random.uniform(0, 0.1)
            
            discovery_date = datetime.now() - timedelta(days=random.randint(365, 2190))  # 1-6 –ª–µ—Ç –Ω–∞–∑–∞–¥
            last_interaction = datetime.now() - timedelta(days=random.randint(1, 30))
            
            dynamic_interests[interest] = DynamicInterest(
                name=interest,
                intensity=min(10, intensity),
                passion_score=min(1.0, passion_score),
                decay_rate=decay_rate,
                discovery_date=discovery_date,
                last_interaction=last_interaction
            )
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã (—Å—Ä–µ–¥–Ω—è—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å)
        additional_count = int(5 + personality.openness * 5)  # –û—Ç–∫—Ä—ã—Ç—ã–µ –ª—é–¥–∏ –∏–º–µ—é—Ç –±–æ–ª—å—à–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
        available_interests = [i for i in all_interests if i not in archetype_interests]
        additional_interests = random.sample(available_interests, min(additional_count, len(available_interests)))
        
        for interest in additional_interests:
            intensity = random.uniform(3, 7)
            passion_score = random.uniform(0.2, 0.6)  # –°—Ä–µ–¥–Ω—è—è —Å—Ç—Ä–∞—Å—Ç—å
            decay_rate = random.uniform(1.0, 3.0)  # –ë—ã—Å—Ç—Ä–µ–µ –∑–∞—Ç—É—Ö–∞—é—Ç
            
            discovery_date = datetime.now() - timedelta(days=random.randint(30, 730))  # 1 –º–µ—Å—è—Ü - 2 –≥–æ–¥–∞
            last_interaction = datetime.now() - timedelta(days=random.randint(1, 90))
            
            dynamic_interests[interest] = DynamicInterest(
                name=interest,
                intensity=intensity,
                passion_score=passion_score,
                decay_rate=decay_rate,
                discovery_date=discovery_date,
                last_interaction=last_interaction
            )
        
        return dynamic_interests
    
    def _generate_love_languages(self, personality: PersonalityProfile) -> Dict[str, float]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —è–∑—ã–∫–∏ –ª—é–±–≤–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª–∏—á–Ω–æ—Å—Ç–∏ OCEAN"""
        love_languages = {}
        
        # Quality Time - —Å–≤—è–∑–∞–Ω–æ —Å —ç–∫—Å—Ç—Ä–∞–≤–µ—Ä—Å–∏–µ–π –∏ –æ—Ç–∫—Ä—ã—Ç–æ—Å—Ç–∏
        love_languages['quality_time'] = 0.3 + personality.extraversion * 0.4 + personality.openness * 0.3
        
        # Physical Touch - —Å–≤—è–∑–∞–Ω–æ —Å —ç–∫—Å—Ç—Ä–∞–≤–µ—Ä—Å–∏–µ–π –∏ –Ω–∏–∑–∫–∏–º –Ω–µ–≤—Ä–æ—Ç–∏–∑–º–æ–º
        love_languages['physical_touch'] = 0.2 + personality.extraversion * 0.3 + (1 - personality.neuroticism) * 0.3
        
        # Words of Affirmation - —Å–≤—è–∑–∞–Ω–æ —Å –Ω–µ–≤—Ä–æ—Ç–∏–∑–º–æ–º –∏ –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
        love_languages['words_of_affirmation'] = 0.2 + personality.neuroticism * 0.3 + personality.agreeableness * 0.3
        
        # Acts of Service - —Å–≤—è–∑–∞–Ω–æ —Å –¥–æ–±—Ä–æ—Å–æ–≤–µ—Å—Ç–Ω–æ—Å—Ç—å—é –∏ –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
        love_languages['acts_of_service'] = 0.2 + personality.conscientiousness * 0.4 + personality.agreeableness * 0.2
        
        # Receiving Gifts - —Å–≤—è–∑–∞–Ω–æ —Å –æ—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å—é –∏ –Ω–µ–≤—Ä–æ—Ç–∏–∑–º–æ–º
        love_languages['receiving_gifts'] = 0.1 + personality.openness * 0.2 + personality.neuroticism * 0.2
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
        total = sum(love_languages.values())
        love_languages = {k: v/total for k, v in love_languages.items()}
        
        return love_languages
    
    def _determine_budget_preference(self, personality: PersonalityProfile, age: int) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –±—é–¥–∂–µ—Ç–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª–∏—á–Ω–æ—Å—Ç–∏ –∏ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
        # –î–æ–±—Ä–æ—Å–æ–≤–µ—Å—Ç–Ω–æ—Å—Ç—å –≤–ª–∏—è–µ—Ç –Ω–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞
        # –û—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å –≤–ª–∏—è–µ—Ç –Ω–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞ –Ω–æ–≤—ã–µ –æ–ø—ã—Ç—ã
        # –í–æ–∑—Ä–∞—Å—Ç –≤–ª–∏—è–µ—Ç –Ω–∞ –¥–æ—Ö–æ–¥—ã
        
        budget_score = (
            personality.conscientiousness * 0.3 +  # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            personality.openness * 0.4 +  # –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞ –æ–ø—ã—Ç—ã
            min(1.0, age / 40.0) * 0.3  # –í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π —Ñ–∞–∫—Ç–æ—Ä
        )
        
        if budget_score > 0.7:
            return 'high'
        elif budget_score > 0.4:
            return 'medium'
        else:
            return 'low'
    
    def _calculate_activity_probability(self, personality: PersonalityProfile) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª–∏—á–Ω–æ—Å—Ç–∏"""
        return (
            personality.extraversion * 0.4 +
            personality.openness * 0.3 +
            (1 - personality.neuroticism) * 0.2 +
            personality.conscientiousness * 0.1
        )
    
    def generate_enhanced_pair(self) -> Tuple[Dict, Dict, Dict]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–∞—Ä—É —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å—é –∏ –¥–∏–Ω–∞–º–∏–∫–æ–π –æ—Ç–Ω–æ—à–µ–Ω–∏–π
        
        Returns:
            (user1, user2, pair_info)
        """
        # –í—ã–±–∏—Ä–∞–µ–º –∞—Ä—Ö–µ—Ç–∏–ø—ã —Å —É—á–µ—Ç–æ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        archetype_compatibility = {
            'ArtLovers': ['ArtLovers', 'Travelers', 'Gourmets'],
            'Gamers': ['Gamers', 'ArtLovers', 'Homebodies'],
            'Gourmets': ['Gourmets', 'ArtLovers', 'Travelers'],
            'Homebodies': ['Homebodies', 'Gamers', 'Fitness'],
            'Fitness': ['Fitness', 'Travelers', 'Homebodies'],
            'Travelers': ['Travelers', 'ArtLovers', 'Gourmets']
        }
        
        archetype1 = random.choice(list(archetype_compatibility.keys()))
        
        if random.random() < 0.7:  # 70% —à–∞–Ω—Å –Ω–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ –∞—Ä—Ö–µ—Ç–∏–ø—ã
            archetype2 = random.choice(archetype_compatibility[archetype1])
        else:
            archetype2 = random.choice(list(archetype_compatibility.keys()))
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user1 = self.generate_enhanced_user(archetype1)
        user2 = self.generate_enhanced_user(archetype2)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        personality1 = PersonalityProfile.from_dict(user1['personality'])
        personality2 = PersonalityProfile.from_dict(user2['personality'])
        
        # –ò–Ω–¥–µ–∫—Å –≥–∞—Ä–º–æ–Ω–∏–∏ (–≤—Ä–æ–∂–¥–µ–Ω–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
        harmony_index = self.personality_engine.calculate_compatibility_score(personality1, personality2)
        
        # –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–π
        relationship_state = RelationshipState(
            harmony_index=harmony_index,
            routine_index=0.0,  # –ù–∞—á–∏–Ω–∞–µ–º –±–µ–∑ —Ä—É—Ç–∏–Ω—ã
            adventure_appetite=random.uniform(0.5, 0.9),
            last_novel_experience=datetime.now() - timedelta(days=random.randint(1, 30)),
            shared_memories=[]
        )
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä–µ
        pair = {
            'id': str(uuid.uuid4()),
            'user1_id': user1['id'],
            'user2_id': user2['id'],
            'created_at': datetime.now() - timedelta(days=random.randint(30, 365)),
            'status': 'active',
            
            # –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏–π
            'harmony_index': relationship_state.harmony_index,
            'routine_index': relationship_state.routine_index,
            'adventure_appetite': relationship_state.adventure_appetite,
            'last_novel_experience': relationship_state.last_novel_experience.isoformat(),
            
            # –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–æ OCEAN
            'personality_compatibility': {
                'openness_similarity': 1 - abs(personality1.openness - personality2.openness),
                'extraversion_balance': 1 - abs(abs(personality1.extraversion - personality2.extraversion) - 0.3) / 0.7,
                'agreeableness_similarity': 1 - abs(personality1.agreeableness - personality2.agreeableness),
                'emotional_stability': (1 - personality1.neuroticism) * (1 - personality2.neuroticism),
                'conscientiousness_coverage': max(personality1.conscientiousness, personality2.conscientiousness)
            },
            
            # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            'version': '2.0_enhanced',
            'relationship_state': {
                'harmony_index': relationship_state.harmony_index,
                'routine_index': relationship_state.routine_index,
                'adventure_appetite': relationship_state.adventure_appetite,
                'shared_memories_count': len(relationship_state.shared_memories)
            }
        }
        
        return user1, user2, pair
    
    def calculate_ultra_realistic_rating(self, user: Dict, product: Dict, 
                                       context: Optional[Dict] = None) -> float:
        """
        –°–≤–µ—Ä—Ö—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞ —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤
        
        Args:
            user: –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—É–ª—É—á—à–µ–Ω–Ω—ã–π)
            product: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥—É–∫—Ç–µ
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç (–≤—Ä–µ–º—è, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, –ø–∞—Ä–∞)
            
        Returns:
            –†–µ–π—Ç–∏–Ω–≥ –æ—Ç 1 –¥–æ 10
        """
        base_score = 5.0
        
        # 1. OCEAN –ª–∏—á–Ω–æ—Å—Ç—å –∏ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        if 'personality' in user:
            personality = PersonalityProfile.from_dict(user['personality'])
            product_tags = product.get('tags', [])
            
            personality_appeal = self.personality_engine.calculate_activity_appeal(personality, product_tags)
            base_score += (personality_appeal - 1.0) * 2.5  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –¥–∏–∞–ø–∞–∑–æ–Ω ¬±2.5
        
        # 2. –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã (–±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)
        dynamic_interests = user.get('dynamic_interests', {})
        interest_boost = 0
        
        for interest_name, interest_data in dynamic_interests.items():
            intensity = interest_data.get('intensity', 0)
            passion_score = interest_data.get('passion_score', 0)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å —Ç–µ–≥–∞–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
            product_tags = product.get('tags', [])
            for tag in product_tags:
                if interest_name.lower() in tag.lower() or tag.lower() in interest_name.lower():
                    # Boost –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ –∏ —Å—Ç—Ä–∞—Å—Ç–∏
                    boost = (intensity / 10.0) * (1 + passion_score) * random.uniform(0.8, 1.2)
                    interest_boost += boost
        
        base_score += min(3.0, interest_boost)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π boost
        
        # 3. –ë—é–¥–∂–µ—Ç–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ (—É–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)
        user_budget = user.get('budget_preference', 'medium')
        product_price = product.get('price', 1000)
        
        budget_ranges = {'low': (0, 1000), 'medium': (800, 2500), 'high': (2000, 6000)}
        budget_min, budget_max = budget_ranges.get(user_budget, (800, 2500))
        
        if budget_min <= product_price <= budget_max:
            base_score += random.uniform(0.5, 1.5)
        elif product_price > budget_max:
            # –®—Ç—Ä–∞—Ñ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–æ–≥–æ, –Ω–∞—Å–∫–æ–ª—å–∫–æ –ø—Ä–µ–≤—ã—à–µ–Ω –±—é–¥–∂–µ—Ç
            excess_ratio = product_price / budget_max
            penalty = min(3.0, excess_ratio * random.uniform(1.0, 2.0))
            base_score -= penalty
        else:
            # –î–µ—à–µ–≤—ã–µ –≤–µ—â–∏ - –Ω–µ–±–æ–ª—å—à–æ–π –ø–ª—é—Å, –Ω–æ –Ω–µ –≤—Å–µ–≥–¥–∞
            base_score += random.uniform(-0.2, 0.8)
        
        # 4. –ù–æ–≤–∏–∑–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ (–≤–∞–∂–Ω–æ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ª–∏—á–Ω–æ—Å—Ç–µ–π)
        product_novelty = product.get('novelty', 0.5)
        
        if 'personality' in user:
            personality = PersonalityProfile.from_dict(user['personality'])
            if personality.openness > 0.7:  # –í—ã—Å–æ–∫–∞—è –æ—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å
                novelty_bonus = product_novelty * random.uniform(0.5, 1.5)
                base_score += novelty_bonus
            elif personality.openness < 0.3:  # –ù–∏–∑–∫–∞—è –æ—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å
                familiarity_bonus = (1 - product_novelty) * random.uniform(0.3, 1.0)
                base_score += familiarity_bonus
        
        # 5. –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
        if context:
            # –í—Ä–µ–º—è –¥–Ω—è
            time_of_day = context.get('time_of_day', 'evening')
            if time_of_day in self.temporal_patterns:
                pattern = self.temporal_patterns[time_of_day]
                suitable_activities = pattern['suitable_activities']
                product_category = product.get('category', '')
                
                if any(activity in product_category for activity in suitable_activities):
                    base_score += random.uniform(0.3, 0.8)
            
            # –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
            mood = context.get('mood', 'neutral')
            if mood == 'adventurous' and product_novelty > 0.7:
                base_score += random.uniform(0.5, 1.5)
            elif mood == 'comfortable' and product_novelty < 0.3:
                base_score += random.uniform(0.3, 1.0)
        
        # 6. –§–∞–∫—Ç–æ—Ä –ø—Ä–∏–≤—ã–∫–∞–Ω–∏—è/—Ä—É—Ç–∏–Ω—ã (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –±—ã–ª)
        visit_count = random.randint(0, 5)  # –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø–æ—Å–µ—â–µ–Ω–∏–π
        if visit_count > 0:
            # –ü—Ä–∏–≤—ã—á–Ω—ã–µ –º–µ—Å—Ç–∞ –º–æ–≥—É—Ç –Ω–∞–¥–æ–µ–¥–∞—Ç—å
            fatigue_penalty = visit_count * random.uniform(0.1, 0.4)
            base_score -= fatigue_penalty
            
            # –ù–æ –ª—é–±–∏–º—ã–µ –º–µ—Å—Ç–∞ (–≤—ã—Å–æ–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥) —Ç–µ—Ä—è—é—Ç –º–µ–Ω—å—à–µ –æ—á–∫–æ–≤
            if base_score > 7:
                base_score += random.uniform(0.2, 0.6)  # –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –¥–ª—è –ª—é–±–∏–º—ã—Ö –º–µ—Å—Ç
        
        # 7. –°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å –∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å
        current_season = self._get_current_season()
        product_tags = product.get('tags', [])
        
        seasonal_keywords = {
            'winter': ['–≥–æ—Ä—è—á–∏–π', '—Ç–µ–ø–ª—ã–π', '–¥–æ–º–∞—à–Ω–∏–π', '–∫—Ä—ã—Ç—ã–π'],
            'spring': ['—Å–≤–µ–∂–∏–π', '–ø—Ä–∏—Ä–æ–¥–∞', '–ø–∞—Ä–∫', '–ø—Ä–æ–≥—É–ª–∫–∞'],
            'summer': ['–ø—Ä–æ—Ö–ª–∞–¥–Ω—ã–π', '–æ—Ç–∫—Ä—ã—Ç—ã–π', '—Ç–µ—Ä—Ä–∞—Å–∞', '–ø–ª—è–∂'],
            'autumn': ['—É—é—Ç–Ω—ã–π', '—Ç–µ–ø–ª—ã–π', '–∫–æ–º—Ñ–æ—Ä—Ç']
        }
        
        season_keywords = seasonal_keywords.get(current_season, [])
        for keyword in season_keywords:
            if any(keyword in tag.lower() for tag in product_tags):
                base_score += random.uniform(0.2, 0.6)
                break
        
        # 8. –°–æ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä (–≤–ª–∏—è–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –¥–ª—è –ø–∞—Ä)
        if context and 'partner_interests' in context:
            partner_interests = context['partner_interests']
            shared_appeal = 0
            
            for tag in product_tags:
                if any(tag.lower() in interest.lower() for interest in partner_interests):
                    shared_appeal += random.uniform(0.2, 0.8)
            
            # –î–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ –ª—é–¥–∏ –±–æ–ª—å—à–µ —É—á–∏—Ç—ã–≤–∞—é—Ç –∏–Ω—Ç–µ—Ä–µ—Å—ã –ø–∞—Ä—Ç–Ω–µ—Ä–∞
            if 'personality' in user:
                personality = PersonalityProfile.from_dict(user['personality'])
                agreeableness_factor = personality.agreeableness
                base_score += shared_appeal * agreeableness_factor
        
        # 9. –°–ª—É—á–∞–π–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è (–±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–µ)
        mood_factors = [
            ('excellent_day', 0.05, random.uniform(1.5, 3.0)),  # –û—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å
            ('terrible_day', 0.08, random.uniform(-3.0, -1.5)),  # –£–∂–∞—Å–Ω—ã–π –¥–µ–Ω—å
            ('discovery_mode', 0.12, random.uniform(1.0, 2.5)),  # –†–µ–∂–∏–º –æ—Ç–∫—Ä—ã—Ç–∏–π
            ('comfort_seeking', 0.10, random.uniform(-1.0, 1.5)),  # –ü–æ–∏—Å–∫ –∫–æ–º—Ñ–æ—Ä—Ç–∞
            ('social_pressure', 0.06, random.uniform(-1.0, 2.0)),  # –°–æ—Ü–∏–∞–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ
        ]
        
        for mood_name, probability, effect in mood_factors:
            if random.random() < probability:
                base_score += effect
                break  # –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω mood factor –∑–∞ —Ä–∞–∑
        
        # 10. –§–∏–Ω–∞–ª—å–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –≥—Ä–∞–Ω–∏—Ü–∞–º–∏
        final_rating = max(1.0, min(10.0, base_score))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π —à—É–º –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
        noise = random.uniform(-0.3, 0.3)
        final_rating = max(1.0, min(10.0, final_rating + noise))
        
        return round(final_rating, 1)
    
    def _get_current_season(self) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π —Å–µ–∑–æ–Ω"""
        month = datetime.now().month
        if month in [12, 1, 2]:
            return 'winter'
        elif month in [3, 4, 5]:
            return 'spring'
        elif month in [6, 7, 8]:
            return 'summer'
        else:
            return 'autumn'
    
    def generate_enhanced_interactions(self, pair: Dict, user1: Dict, user2: Dict, 
                                     num_interactions: int = None) -> List[Dict]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö —É–ª—É—á—à–µ–Ω–∏–π
        
        Args:
            pair: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ä–µ
            user1, user2: –ü—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            num_interactions: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
            
        Returns:
            –°–ø–∏—Å–æ–∫ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
        """
        if num_interactions is None:
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≥–∞—Ä–º–æ–Ω–∏–∏ –ø–∞—Ä—ã –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            base_interactions = random.randint(50, 200)
            harmony_factor = pair.get('harmony_index', 0.5)
            activity_factor = (user1.get('activity_probability', 0.5) + 
                             user2.get('activity_probability', 0.5)) / 2
            
            num_interactions = int(base_interactions * (1 + harmony_factor) * (1 + activity_factor))
        
        interactions = []
        start_date = datetime.fromisoformat(pair['created_at'].replace('Z', '+00:00')).replace(tzinfo=None)
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–π
        current_routine_index = pair.get('routine_index', 0.0)
        visited_places = {}  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ—Å–µ—â–µ–Ω–∏–π
        
        for i in range(num_interactions):
            # –î–∞—Ç–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
            days_offset = random.randint(0, (datetime.now() - start_date).days)
            interaction_date = start_date + timedelta(days=days_offset)
            
            # –í—ã–±–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞ —Å —É—á–µ—Ç–æ–º —Ä—É—Ç–∏–Ω—ã –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
            product = self._choose_product_intelligently(
                [user1, user2], current_routine_index, visited_places, interaction_date
            )
            
            # –í—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä)
            initiator = random.choice([user1, user2])
            partner = user2 if initiator == user1 else user1
            
            # –¢–∏–ø –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
            interaction_type = random.choices(
                ['visit', 'rating', 'purchase', 'recommendation_shown', 'recommendation_clicked', 'shared_experience'],
                weights=[0.35, 0.25, 0.1, 0.15, 0.1, 0.05]
            )[0]
            
            # –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞
            context = {
                'time_of_day': self._get_time_of_day(interaction_date),
                'partner_interests': list(partner.get('interests', {}).keys())[:3],
                'mood': self._determine_mood(initiator, interaction_date),
                'routine_level': current_routine_index
            }
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–π—Ç–∏–Ω–≥
            rating = None
            if interaction_type in ['visit', 'rating', 'shared_experience']:
                rating = self.calculate_ultra_realistic_rating(initiator, product, context)
            
            # –°–æ–∑–¥–∞–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
            interaction = {
                'id': str(uuid.uuid4()),
                'pair_id': pair['id'],
                'user_id': initiator['id'],
                'partner_id': partner['id'],
                'action': interaction_type,
                'product_id': product['title'],
                'product_category': product['category'],
                'rating': rating,
                'price': product['price'],
                'created_at': interaction_date.isoformat(),
                
                # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                'metadata': {
                    'initiator_archetype': initiator['archetype'],
                    'partner_archetype': partner['archetype'],
                    'product_novelty': product.get('novelty', 0.5),
                    'love_language_match': product['love_language'],
                    'context': context,
                    'routine_level_at_time': current_routine_index,
                    'visit_count': visited_places.get(product['title'], 0)
                }
            }
            
            interactions.append(interaction)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if interaction_type in ['visit', 'shared_experience']:
                visited_places[product['title']] = visited_places.get(product['title'], 0) + 1
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ä—É—Ç–∏–Ω—É
                product_novelty = product.get('novelty', 0.5)
                if product_novelty > 0.7:
                    current_routine_index = max(0, current_routine_index - 0.02)
                elif visited_places[product['title']] > 2:
                    current_routine_index = min(1.0, current_routine_index + 0.03)
        
        return interactions
    
    def _choose_product_intelligently(self, users: List[Dict], routine_index: float, 
                                    visited_places: Dict, date: datetime) -> Dict:
        """–£–º–Ω—ã–π –≤—ã–±–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞ —Å —É—á–µ—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ç–Ω–æ—à–µ–Ω–∏–π"""
        
        # –ï—Å–ª–∏ –≤—ã—Å–æ–∫–∞—è —Ä—É—Ç–∏–Ω–∞ - –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º –Ω–æ–≤—ã–µ –º–µ—Å—Ç–∞
        if routine_index > 0.6:
            novel_products = [p for p in self.enhanced_product_catalog if p.get('novelty', 0.5) > 0.6]
            if novel_products:
                return random.choice(novel_products)
        
        # –ï—Å–ª–∏ –º–∞–ª–æ —Ä—É—Ç–∏–Ω—ã - –º–æ–∂–µ–º –≤—ã–±—Ä–∞—Ç—å –∑–Ω–∞–∫–æ–º—ã–µ –º–µ—Å—Ç–∞
        elif routine_index < 0.3:
            familiar_products = [p for p in self.enhanced_product_catalog if p.get('novelty', 0.5) < 0.4]
            if familiar_products and random.random() < 0.3:  # 30% —à–∞–Ω—Å –≤—ã–±—Ä–∞—Ç—å –∑–Ω–∞–∫–æ–º–æ–µ
                return random.choice(familiar_products)
        
        # –û–±—ã—á–Ω—ã–π –≤—ã–±–æ—Ä —Å —É—á–µ—Ç–æ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        suitable_products = []
        
        for product in self.enhanced_product_catalog:
            suitability_score = 0
            
            for user in users:
                if 'personality' in user:
                    personality = PersonalityProfile.from_dict(user['personality'])
                    appeal = self.personality_engine.calculate_activity_appeal(
                        personality, product.get('tags', [])
                    )
                    suitability_score += appeal
            
            # –®—Ç—Ä–∞—Ñ –∑–∞ —á–∞—Å—Ç—ã–µ –ø–æ—Å–µ—â–µ–Ω–∏—è
            visit_count = visited_places.get(product['title'], 0)
            if visit_count > 0:
                suitability_score -= visit_count * 0.2
            
            if suitability_score > 1.5:  # –ü–æ—Ä–æ–≥ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                suitable_products.append(product)
        
        if suitable_products:
            return random.choice(suitable_products)
        else:
            return random.choice(self.enhanced_product_catalog)
    
    def _get_time_of_day(self, date: datetime) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤—Ä–µ–º—è –¥–Ω—è –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è"""
        hour = random.randint(8, 23)  # –ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Å—ã
        
        if 6 <= hour < 12:
            return 'morning'
        elif 12 <= hour < 17:
            return 'afternoon'
        elif 17 <= hour < 22:
            return 'evening'
        else:
            return 'night'
    
    def _determine_mood(self, user: Dict, date: datetime) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        moods = ['neutral', 'adventurous', 'comfortable', 'social', 'romantic']
        weights = [0.4, 0.2, 0.2, 0.15, 0.05]
        
        # –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ª–∏—á–Ω–æ—Å—Ç–∏
        if 'personality' in user:
            personality = PersonalityProfile.from_dict(user['personality'])
            
            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –≤–µ—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª–∏—á–Ω–æ—Å—Ç–∏
            if personality.openness > 0.7:
                weights[1] *= 2  # adventurous
            if personality.extraversion > 0.7:
                weights[3] *= 2  # social
            if personality.neuroticism > 0.7:
                weights[2] *= 1.5  # comfortable
        
        return random.choices(moods, weights=weights)[0]
    
    def generate_enhanced_dataset(self, num_pairs: int = 2000) -> Dict:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π —É–ª—É—á—à–µ–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç
        
        Args:
            num_pairs: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏
        """
        print(f"üöÄ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Enhanced Dataset v2.0 –¥–ª—è {num_pairs} –ø–∞—Ä...")
        print("‚ú® –ù–æ–≤—ã–µ —Ñ–∏—á–∏: OCEAN –ª–∏—á–Ω–æ—Å—Ç—å, –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã, —Ä—É—Ç–∏–Ω–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏–π")
        
        users = []
        pairs = []
        interactions = []
        
        for i in range(num_pairs):
            if (i + 1) % 100 == 0:
                print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i + 1}/{num_pairs} –ø–∞—Ä")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –ø–∞—Ä—É
            user1, user2, pair = self.generate_enhanced_pair()
            users.extend([user1, user2])
            pairs.append(pair)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
            pair_interactions = self.generate_enhanced_interactions(pair, user1, user2)
            interactions.extend(pair_interactions)
        
        # –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
        enhanced_catalog = []
        for i, product in enumerate(self.enhanced_product_catalog):
            # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ú–æ—Å–∫–≤—ã
            moscow_lat, moscow_lon = 55.7558, 37.6176
            lat_offset = random.uniform(-0.2, 0.2)
            lon_offset = random.uniform(-0.3, 0.3)
            
            enhanced_catalog.append({
                'id': str(uuid.uuid4()),
                'title': product['title'],
                'category': product['category'],
                'price': product['price'],
                'tags': product['tags'],
                'love_language': product['love_language'],
                'novelty': product.get('novelty', 0.5),
                'latitude': round(moscow_lat + lat_offset, 6),
                'longitude': round(moscow_lon + lon_offset, 6),
                'created_at': (datetime.now() - timedelta(days=random.randint(1, 365))).isoformat()
            })
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_interactions = len(interactions)
        avg_rating = np.mean([i['rating'] for i in interactions if i['rating'] is not None])
        rating_variance = np.var([i['rating'] for i in interactions if i['rating'] is not None])
        
        dataset = {
            'users': users,
            'pairs': pairs,
            'interactions': interactions,
            'product_catalog': enhanced_catalog,
            'metadata': {
                'generated_at': datetime.now().isoformat(),
                'version': '2.0_enhanced',
                'generator': 'EnhancedSyntheticGenerator',
                
                # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                'num_pairs': num_pairs,
                'num_users': len(users),
                'num_interactions': total_interactions,
                'num_products': len(enhanced_catalog),
                
                # –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
                'avg_interactions_per_pair': total_interactions / num_pairs,
                'avg_rating': round(avg_rating, 2),
                'rating_variance': round(rating_variance, 2),
                
                # –ù–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                'personality_model': 'OCEAN_Big_Five',
                'interest_model': 'Dynamic_with_Drift',
                'relationship_model': 'Harmony_Routine_Engine',
                'rating_factors': 10,  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –≤ —Ä–∞—Å—á–µ—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥–∞
                
                # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞—Ä—Ö–µ—Ç–∏–ø–æ–≤
                'archetype_distribution': {
                    archetype: len([u for u in users if u['archetype'] == archetype])
                    for archetype in ['ArtLovers', 'Gamers', 'Gourmets', 'Homebodies', 'Fitness', 'Travelers']
                },
                
                # –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–∞—Ä
                'avg_harmony_index': round(np.mean([p['harmony_index'] for p in pairs]), 3),
                'personality_compatibility_avg': round(np.mean([
                    sum(p['personality_compatibility'].values()) / len(p['personality_compatibility'])
                    for p in pairs
                ]), 3)
            }
        }
        
        return dataset
    
    def save_enhanced_dataset(self, dataset: Dict, output_dir: str = 'data/synthetic_v2_enhanced'):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç"""
        os.makedirs(output_dir, exist_ok=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        with open(f'{output_dir}/dataset_enhanced.json', 'w', encoding='utf-8') as f:
            json.dump(dataset, f, ensure_ascii=False, indent=2, default=str)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        pd.DataFrame(dataset['users']).to_csv(f'{output_dir}/users.csv', index=False)
        pd.DataFrame(dataset['pairs']).to_csv(f'{output_dir}/pairs.csv', index=False)
        pd.DataFrame(dataset['interactions']).to_csv(f'{output_dir}/interactions.csv', index=False)
        pd.DataFrame(dataset['product_catalog']).to_csv(f'{output_dir}/product_catalog.csv', index=False)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        with open(f'{output_dir}/metadata.json', 'w', encoding='utf-8') as f:
            json.dump(dataset['metadata'], f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ Enhanced Dataset v2.0 —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {output_dir}")
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Enhanced Dataset:")
        print(f"  - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {dataset['metadata']['num_users']}")
        print(f"  - –ü–∞—Ä: {dataset['metadata']['num_pairs']}")
        print(f"  - –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π: {dataset['metadata']['num_interactions']}")
        print(f"  - –¢–æ–≤–∞—Ä–æ–≤: {dataset['metadata']['num_products']} (–±—ã–ª–æ 12 ‚Üí —Å—Ç–∞–ª–æ 75)")
        print(f"  - –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {dataset['metadata']['avg_rating']} (—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π)")
        print(f"  - –î–∏—Å–ø–µ—Ä—Å–∏—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤: {dataset['metadata']['rating_variance']} (–≤—ã—Å–æ–∫–∞—è)")
        print(f"  - –°—Ä–µ–¥–Ω—è—è –≥–∞—Ä–º–æ–Ω–∏—è –ø–∞—Ä: {dataset['metadata']['avg_harmony_index']}")
        print(f"\nüß† –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
        print(f"  ‚úÖ OCEAN –ª–∏—á–Ω–æ—Å—Ç–∏ (–Ω–∞—É—á–Ω–æ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ)")
        print(f"  ‚úÖ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã —Å –¥—Ä–µ–π—Ñ–æ–º")
        print(f"  ‚úÖ –ò–Ω–¥–µ–∫—Å —Ä—É—Ç–∏–Ω—ã –æ—Ç–Ω–æ—à–µ–Ω–∏–π")
        print(f"  ‚úÖ 10-—Ñ–∞–∫—Ç–æ—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–æ–≤")
        print(f"  ‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π")

def main():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Enhanced Synthetic Generator"""
    print("üöÄ Enhanced Synthetic Data Generator v2.0")
    print("üéØ –§–∞–∑–∞ 1: –ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–π –¶–∏—Ñ—Ä–æ–≤–æ–π –î–≤–æ–π–Ω–∏–∫")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
    generator = EnhancedSyntheticGenerator()
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
    print("\nüß† –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è OCEAN –ª–∏—á–Ω–æ—Å—Ç–∏:")
    test_user = generator.generate_enhanced_user('ArtLovers')
    personality = PersonalityProfile.from_dict(test_user['personality'])
    
    print(f"  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {test_user['archetype']}")
    print(f"  OCEAN: O={personality.openness:.2f} C={personality.conscientiousness:.2f} " +
          f"E={personality.extraversion:.2f} A={personality.agreeableness:.2f} N={personality.neuroticism:.2f}")
    
    dynamic_interests = test_user['dynamic_interests']
    print(f"  –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤: {len(dynamic_interests)}")
    
    top_interests = sorted(dynamic_interests.items(), 
                          key=lambda x: x[1]['intensity'], reverse=True)[:3]
    for name, data in top_interests:
        print(f"    {name}: –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å={data['intensity']:.1f}, —Å—Ç—Ä–∞—Å—Ç—å={data['passion_score']:.2f}")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–∞–ª–µ–Ω—å–∫–∏–π —Ç–µ—Å—Ç–æ–≤—ã–π –¥–∞—Ç–∞—Å–µ—Ç
    print(f"\nüìä –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π enhanced dataset (50 –ø–∞—Ä)...")
    test_dataset = generator.generate_enhanced_dataset(50)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    generator.save_enhanced_dataset(test_dataset, 'data/test_enhanced')
    
    print(f"\nüéâ Enhanced Generator –≥–æ—Ç–æ–≤!")
    print(f"üí° –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ:")
    print(f"   dataset = generator.generate_enhanced_dataset(2000)")
    print(f"   generator.save_enhanced_dataset(dataset)")

if __name__ == "__main__":
    main()
