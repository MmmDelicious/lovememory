"""
üì∏ Shared Memory Bank –¥–ª—è LoveMemory AI
–§–∞–∑–∞ 3.1: "–ö–æ–ø–∏–ª–∫–∞ –í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π"

–ö–ª—é—á–µ–≤–∞—è retention —Ñ–∏—á–∞ - –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç —Ä–∞–∑–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ —Ü–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –æ—Ç–Ω–æ—à–µ–Ω–∏–π.
–ß–µ–º –±–æ–ª—å—à–µ –ø–∞—Ä–∞ –ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º, —Ç–µ–º –±–æ–ª—å—à–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ—Ç—Å—è.

–°–æ–∑–¥–∞–µ—Ç "—Ü–∏—Ñ—Ä–æ–≤–æ–π —Ä–æ–≤" - —É–π—Ç–∏ –∫ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—É = –ø–æ—Ç–µ—Ä—è—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –æ—Ç–Ω–æ—à–µ–Ω–∏–π.
"""

import json
import os
import sqlite3
from datetime import datetime, timedelta
from typing import Dict, List, Tuple, Optional, Any
from dataclasses import dataclass, asdict
import uuid
import numpy as np
from pathlib import Path

@dataclass
class SharedMemory:
    """–°–æ–≤–º–µ—Å—Ç–Ω–æ–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–∞—Ä—ã"""
    memory_id: str
    pair_id: str
    recommendation_id: str
    place_title: str
    place_category: str
    visit_date: datetime
    
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
    joint_rating: float  # –°–æ–≤–º–µ—Å—Ç–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ (1-10)
    photos: List[str]  # –ü—É—Ç–∏ –∫ —Ñ–æ—Ç–æ (–¥–æ 5 —à—Ç—É–∫)
    notes: str  # –ó–∞–º–µ—Ç–∫–∏ –ø–∞—Ä—ã
    tags: List[str]  # –¢–µ–≥–∏ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
    
    # –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    happiness_level: int  # –£—Ä–æ–≤–µ–Ω—å —Å—á–∞—Å—Ç—å—è (1-5)
    relationship_impact: str  # positive, neutral, transformative
    would_repeat: bool  # –•–æ—Ç–µ–ª–∏ –±—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
    
    # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    weather_at_visit: Optional[str]
    companions: List[str]  # –ö—Ç–æ –µ—â–µ –±—ã–ª —Å –ø–∞—Ä–æ–π
    special_occasion: Optional[str]  # –û—Å–æ–±—ã–π –ø–æ–≤–æ–¥
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    created_at: datetime
    updated_at: datetime
    ai_generated_summary: str  # AI –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
    memory_strength: float  # –°–∏–ª–∞ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è (0-1)
    
    def to_dict(self) -> Dict[str, Any]:
        return asdict(self)
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'SharedMemory':
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ datetime
        if isinstance(data['visit_date'], str):
            data['visit_date'] = datetime.fromisoformat(data['visit_date'])
        if isinstance(data['created_at'], str):
            data['created_at'] = datetime.fromisoformat(data['created_at'])
        if isinstance(data['updated_at'], str):
            data['updated_at'] = datetime.fromisoformat(data['updated_at'])
        
        return cls(**data)

@dataclass
class MemoryAnalytics:
    """–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–∞—Ä—ã"""
    total_memories: int
    avg_rating: float
    favorite_categories: List[str]
    memory_timeline: List[Tuple[datetime, str]]  # (–¥–∞—Ç–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞)
    relationship_progression: Dict[str, Any]
    ai_insights: List[str]

@dataclass
class MemoryRecommendation:
    """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    recommended_place: str
    similarity_to_memory: str  # ID –ø–æ—Ö–æ–∂–µ–≥–æ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
    reason: str  # –ü—Ä–∏—á–∏–Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    confidence: float  # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (0-1)

class SharedMemoryBank:
    """
    –ë–∞–Ω–∫ —Å–æ–≤–º–µ—Å—Ç–Ω—ã—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–∞—Ä—ã
    
    –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
    1. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –∏ –æ—Ü–µ–Ω–∫–∞–º–∏
    2. –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
    3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏
    4. –°–æ–∑–¥–∞–Ω–∏–µ timeline –æ—Ç–Ω–æ—à–µ–Ω–∏–π
    5. –í—ã—è–≤–ª–µ–Ω–∏–µ "–∑–æ–ª–æ—Ç—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤"
    """
    
    def __init__(self, db_path: str = 'data/shared_memories.db'):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–Ω–∫–∞ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π
        
        Args:
            db_path: –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
        """
        self.db_path = db_path
        self.photos_dir = Path('data/memory_photos')
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        os.makedirs(os.path.dirname(self.db_path), exist_ok=True)
        self.photos_dir.mkdir(parents=True, exist_ok=True)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        self._init_database()
        
        # –®–∞–±–ª–æ–Ω—ã –¥–ª—è AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏–π
        self.summary_templates = {
            'restaurant': "–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —É–∂–∏–Ω –≤ {place} ‚Äî {emotion_description}",
            'cafe': "–£—é—Ç–Ω—ã–µ –ø–æ—Å–∏–¥–µ–ª–∫–∏ –≤ {place} ‚Äî {emotion_description}",
            'entertainment': "–í–µ—Å–µ–ª—ã–π –≤–µ—á–µ—Ä –≤ {place} ‚Äî {emotion_description}", 
            'activity': "–ê–∫—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å –≤ {place} ‚Äî {emotion_description}",
            'default': "–í—Ä–µ–º—è –≤ {place} ‚Äî {emotion_description}"
        }
        
        self.emotion_descriptions = {
            5: "–º–æ–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø–æ–º–Ω–∏—Ç—Å—è –Ω–∞–≤—Å–µ–≥–¥–∞",
            4: "–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ –≤—Ä–µ–º—è –≤–º–µ—Å—Ç–µ",
            3: "–ø—Ä–∏—è—Ç–Ω—ã–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è",
            2: "–≤—Ä–µ–º—è, –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω–æ–µ –≤–º–µ—Å—Ç–µ",
            1: "–æ–ø—ã—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—Å –º–Ω–æ–≥–æ–º—É –Ω–∞—É—á–∏–ª"
        }
        
        print("üì∏ Shared Memory Bank –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö SQLite"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            
            # –¢–∞–±–ª–∏—Ü–∞ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS memories (
                    memory_id TEXT PRIMARY KEY,
                    pair_id TEXT NOT NULL,
                    recommendation_id TEXT,
                    place_title TEXT NOT NULL,
                    place_category TEXT NOT NULL,
                    visit_date TEXT NOT NULL,
                    joint_rating REAL NOT NULL,
                    photos TEXT,  -- JSON —Å–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ —Ñ–æ—Ç–æ
                    notes TEXT,
                    tags TEXT,  -- JSON —Å–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤
                    happiness_level INTEGER NOT NULL,
                    relationship_impact TEXT NOT NULL,
                    would_repeat BOOLEAN NOT NULL,
                    weather_at_visit TEXT,
                    companions TEXT,  -- JSON —Å–ø–∏—Å–æ–∫
                    special_occasion TEXT,
                    created_at TEXT NOT NULL,
                    updated_at TEXT NOT NULL,
                    ai_generated_summary TEXT,
                    memory_strength REAL NOT NULL
                )
            """)
            
            # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
            cursor.execute("CREATE INDEX IF NOT EXISTS idx_pair_id ON memories (pair_id)")
            cursor.execute("CREATE INDEX IF NOT EXISTS idx_visit_date ON memories (visit_date)")
            cursor.execute("CREATE INDEX IF NOT EXISTS idx_rating ON memories (joint_rating)")
            
            # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ (–ø—Ä–µ–¥–≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏)
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS memory_analytics (
                    pair_id TEXT PRIMARY KEY,
                    total_memories INTEGER,
                    avg_rating REAL,
                    favorite_categories TEXT,  -- JSON
                    last_updated TEXT,
                    ai_insights TEXT  -- JSON
                )
            """)
            
            conn.commit()
    
    def save_memory(self, pair_id: str, recommendation_id: Optional[str],
                   place_title: str, place_category: str,
                   visit_date: datetime, joint_rating: float,
                   photos: List[str] = None, notes: str = "",
                   tags: List[str] = None, happiness_level: int = 3,
                   relationship_impact: str = "positive",
                   would_repeat: bool = True,
                   weather_at_visit: str = None,
                   companions: List[str] = None,
                   special_occasion: str = None) -> SharedMemory:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤–æ–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–∞—Ä—ã
        
        Args:
            pair_id: ID –ø–∞—Ä—ã
            recommendation_id: ID —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)
            place_title: –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞
            place_category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è –º–µ—Å—Ç–∞
            visit_date: –î–∞—Ç–∞ –ø–æ—Å–µ—â–µ–Ω–∏—è
            joint_rating: –°–æ–≤–º–µ—Å—Ç–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ (1-10)
            photos: –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º
            notes: –ó–∞–º–µ—Ç–∫–∏ –ø–∞—Ä—ã
            tags: –¢–µ–≥–∏ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
            happiness_level: –£—Ä–æ–≤–µ–Ω—å —Å—á–∞—Å—Ç—å—è (1-5)
            relationship_impact: –í–ª–∏—è–Ω–∏–µ –Ω–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏—è
            would_repeat: –•–æ—Ç–µ–ª–∏ –±—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
            weather_at_visit: –ü–æ–≥–æ–¥–∞ –≤–æ –≤—Ä–µ–º—è –≤–∏–∑–∏—Ç–∞
            companions: –°–ø—É—Ç–Ω–∏–∫–∏
            special_occasion: –û—Å–æ–±—ã–π –ø–æ–≤–æ–¥
            
        Returns:
            SharedMemory –æ–±—ä–µ–∫—Ç
        """
        memory_id = str(uuid.uuid4())
        now = datetime.now()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º AI –æ–ø–∏—Å–∞–Ω–∏–µ
        ai_summary = self._generate_ai_summary(
            place_title, place_category, happiness_level, notes
        )
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å–∏–ª—É –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
        memory_strength = self._calculate_memory_strength(
            joint_rating, happiness_level, len(photos or []), 
            len(notes), relationship_impact
        )
        
        memory = SharedMemory(
            memory_id=memory_id,
            pair_id=pair_id,
            recommendation_id=recommendation_id,
            place_title=place_title,
            place_category=place_category,
            visit_date=visit_date,
            joint_rating=joint_rating,
            photos=photos or [],
            notes=notes,
            tags=tags or [],
            happiness_level=happiness_level,
            relationship_impact=relationship_impact,
            would_repeat=would_repeat,
            weather_at_visit=weather_at_visit,
            companions=companions or [],
            special_occasion=special_occasion,
            created_at=now,
            updated_at=now,
            ai_generated_summary=ai_summary,
            memory_strength=memory_strength
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute("""
                INSERT INTO memories VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                memory.memory_id, memory.pair_id, memory.recommendation_id,
                memory.place_title, memory.place_category, memory.visit_date.isoformat(),
                memory.joint_rating, json.dumps(memory.photos), memory.notes,
                json.dumps(memory.tags), memory.happiness_level, memory.relationship_impact,
                memory.would_repeat, memory.weather_at_visit, json.dumps(memory.companions),
                memory.special_occasion, memory.created_at.isoformat(), 
                memory.updated_at.isoformat(), memory.ai_generated_summary, memory.memory_strength
            ))
            conn.commit()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
        self._update_analytics(pair_id)
        
        print(f"üì∏ –í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {place_title} (—Ä–µ–π—Ç–∏–Ω–≥: {joint_rating}/10)")
        return memory
    
    def _generate_ai_summary(self, place_title: str, place_category: str, 
                           happiness_level: int, notes: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç AI –æ–ø–∏—Å–∞–Ω–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        
        template = self.summary_templates.get(place_category, self.summary_templates['default'])
        emotion_desc = self.emotion_descriptions.get(happiness_level, "–æ—Å–æ–±–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤–º–µ—Å—Ç–µ")
        
        # –ë–∞–∑–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        summary = template.format(place=place_title, emotion_description=emotion_desc)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –∑–∞–º–µ—Ç–æ–∫
        if notes and len(notes) > 10:
            # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–º–µ—Ç–æ–∫
            positive_words = ['–æ—Ç–ª–∏—á–Ω–æ', '–∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ', '–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ', '–≤–æ—Å—Ö–∏—Ç–∏—Ç–µ–ª—å–Ω–æ', '–Ω–µ–∑–∞–±—ã–≤–∞–µ–º–æ']
            if any(word in notes.lower() for word in positive_words):
                summary += " –û—Å–æ–±–µ–Ω–Ω–æ –∑–∞–ø–æ–º–Ω–∏–ª–∏—Å—å —è—Ä–∫–∏–µ –º–æ–º–µ–Ω—Ç—ã –∏ —Ç–µ–ø–ª–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞."
            elif '–ø–µ—Ä–≤—ã–π —Ä–∞–∑' in notes.lower():
                summary += " –ü–µ—Ä–≤—ã–π –æ–ø—ã—Ç —Ç–∞–∫–æ–≥–æ —Ä–æ–¥–∞ ‚Äî –æ—Å–æ–±–µ–Ω–Ω–æ –∑–Ω–∞—á–∏–º—ã–π."
        
        return summary
    
    def _calculate_memory_strength(self, rating: float, happiness: int, 
                                 photos_count: int, notes_length: int,
                                 impact: str) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Å–∏–ª—É –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        strength = 0.0
        
        # –ë–∞–∑–æ–≤–∞—è —Å–∏–ª–∞ –æ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞
        strength += rating / 10.0 * 0.4
        
        # –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–æ—Å—Ç–∞–≤–ª—è—é—â–∞—è
        strength += happiness / 5.0 * 0.3
        
        # –ë–æ–≥–∞—Ç—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        content_richness = min(1.0, (photos_count * 0.2 + min(notes_length, 100) / 100 * 0.3))
        strength += content_richness * 0.2
        
        # –í–ª–∏—è–Ω–∏–µ –Ω–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏—è
        impact_bonuses = {'transformative': 0.1, 'positive': 0.05, 'neutral': 0.0}
        strength += impact_bonuses.get(impact, 0.0)
        
        return min(1.0, strength)
    
    def get_memories(self, pair_id: str, limit: int = None, 
                    sort_by: str = 'visit_date') -> List[SharedMemory]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–∞—Ä—ã
        
        Args:
            pair_id: ID –ø–∞—Ä—ã
            limit: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            sort_by: –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ (visit_date, joint_rating, memory_strength)
            
        Returns:
            –°–ø–∏—Å–æ–∫ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π
        """
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            
            query = "SELECT * FROM memories WHERE pair_id = ?"
            params = [pair_id]
            
            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
            valid_sorts = ['visit_date', 'joint_rating', 'memory_strength', 'created_at']
            if sort_by in valid_sorts:
                query += f" ORDER BY {sort_by} DESC"
            
            # –õ–∏–º–∏—Ç
            if limit:
                query += " LIMIT ?"
                params.append(limit)
            
            cursor.execute(query, params)
            rows = cursor.fetchall()
        
        memories = []
        for row in rows:
            memory_dict = {
                'memory_id': row[0],
                'pair_id': row[1],
                'recommendation_id': row[2],
                'place_title': row[3],
                'place_category': row[4],
                'visit_date': row[5],
                'joint_rating': row[6],
                'photos': json.loads(row[7] or '[]'),
                'notes': row[8] or '',
                'tags': json.loads(row[9] or '[]'),
                'happiness_level': row[10],
                'relationship_impact': row[11],
                'would_repeat': bool(row[12]),
                'weather_at_visit': row[13],
                'companions': json.loads(row[14] or '[]'),
                'special_occasion': row[15],
                'created_at': row[16],
                'updated_at': row[17],
                'ai_generated_summary': row[18],
                'memory_strength': row[19]
            }
            memories.append(SharedMemory.from_dict(memory_dict))
        
        return memories
    
    def get_memory_analytics(self, pair_id: str) -> MemoryAnalytics:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫—É –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–∞—Ä—ã
        
        Args:
            pair_id: ID –ø–∞—Ä—ã
            
        Returns:
            MemoryAnalytics —Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        memories = self.get_memories(pair_id)
        
        if not memories:
            return MemoryAnalytics(
                total_memories=0,
                avg_rating=0.0,
                favorite_categories=[],
                memory_timeline=[],
                relationship_progression={},
                ai_insights=[]
            )
        
        # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_memories = len(memories)
        avg_rating = sum(m.joint_rating for m in memories) / total_memories
        
        # –õ—é–±–∏–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category_counts = {}
        category_ratings = {}
        
        for memory in memories:
            cat = memory.place_category
            category_counts[cat] = category_counts.get(cat, 0) + 1
            if cat not in category_ratings:
                category_ratings[cat] = []
            category_ratings[cat].append(memory.joint_rating)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ –∏ —Ä–µ–π—Ç–∏–Ω–≥—É
        favorite_categories = sorted(
            category_counts.keys(),
            key=lambda cat: (category_counts[cat], np.mean(category_ratings[cat])),
            reverse=True
        )[:5]
        
        # Timeline –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π
        memory_timeline = [
            (memory.visit_date, memory.place_title) 
            for memory in sorted(memories, key=lambda m: m.visit_date)
        ]
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å–∏—è –æ—Ç–Ω–æ—à–µ–Ω–∏–π
        relationship_progression = self._analyze_relationship_progression(memories)
        
        # AI –∏–Ω—Å–∞–π—Ç—ã
        ai_insights = self._generate_ai_insights(memories)
        
        analytics = MemoryAnalytics(
            total_memories=total_memories,
            avg_rating=round(avg_rating, 2),
            favorite_categories=favorite_categories,
            memory_timeline=memory_timeline,
            relationship_progression=relationship_progression,
            ai_insights=ai_insights
        )
        
        return analytics
    
    def _analyze_relationship_progression(self, memories: List[SharedMemory]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—é –æ—Ç–Ω–æ—à–µ–Ω–∏–π –ø–æ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è–º"""
        if len(memories) < 2:
            return {}
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
        sorted_memories = sorted(memories, key=lambda m: m.visit_date)
        
        # –¢—Ä–µ–Ω–¥ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
        ratings = [m.joint_rating for m in sorted_memories]
        rating_trend = "growing" if ratings[-1] > ratings[0] else "stable" if abs(ratings[-1] - ratings[0]) < 1 else "declining"
        
        # –¢—Ä–µ–Ω–¥ —É—Ä–æ–≤–Ω—è —Å—á–∞—Å—Ç—å—è
        happiness_levels = [m.happiness_level for m in sorted_memories]
        happiness_trend = "growing" if happiness_levels[-1] > happiness_levels[0] else "stable" if happiness_levels[-1] == happiness_levels[0] else "declining"
        
        # –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
        unique_categories = len(set(m.place_category for m in memories))
        diversity_score = min(1.0, unique_categories / 5)  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ 5 –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        
        # –ß–∞—Å—Ç–æ—Ç–∞ —Å–≤–∏–¥–∞–Ω–∏–π
        if len(memories) >= 3:
            time_span = (sorted_memories[-1].visit_date - sorted_memories[0].visit_date).days
            if time_span > 0:
                frequency = len(memories) / (time_span / 30)  # –í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ –º–µ—Å—è—Ü
            else:
                frequency = len(memories)
        else:
            frequency = 0
        
        # –ó–æ–ª–æ—Ç—ã–µ –º–æ–º–µ–Ω—Ç—ã (—Ä–µ–π—Ç–∏–Ω–≥ 9+)
        golden_moments = [m for m in memories if m.joint_rating >= 9.0]
        
        return {
            'rating_trend': rating_trend,
            'happiness_trend': happiness_trend,
            'diversity_score': round(diversity_score, 2),
            'frequency_per_month': round(frequency, 1),
            'golden_moments_count': len(golden_moments),
            'total_timeline_days': (sorted_memories[-1].visit_date - sorted_memories[0].visit_date).days
        }
    
    def _generate_ai_insights(self, memories: List[SharedMemory]) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç AI –∏–Ω—Å–∞–π—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        insights = []
        
        if not memories:
            return insights
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥–∞–º
        avg_rating = sum(m.joint_rating for m in memories) / len(memories)
        if avg_rating >= 8.0:
            insights.append("üåü –£ –≤–∞—Å –æ—Ç–ª–∏—á–Ω—ã–π –≤–∫—É—Å –≤ –≤—ã–±–æ—Ä–µ –º–µ—Å—Ç ‚Äî –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π —è—Ä–∫–∏–µ –∏ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ")
        elif avg_rating >= 6.0:
            insights.append("üëç –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ –≤ —Ä–∞–∑–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è—Ö, —á—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç –æ –≥–∏–±–∫–æ—Å—Ç–∏ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö")
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
        categories = set(m.place_category for m in memories)
        if len(categories) >= 4:
            insights.append("üåà –í—ã –ª—é–±–∏—Ç–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ ‚Äî —ç—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è —Å–≤–µ–∂–∏–º–∏")
        elif len(categories) <= 2:
            insights.append("üéØ –£ –≤–∞—Å –µ—Å—Ç—å —á–µ—Ç–∫–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è ‚Äî –∑–Ω–∞–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ –Ω—Ä–∞–≤–∏—Ç—Å—è, —ç—Ç–æ —Å–∏–ª–∞")
        
        # –ê–Ω–∞–ª–∏–∑ —á–∞—Å—Ç–æ—Ç—ã
        if len(memories) >= 10:
            insights.append("üíñ –í—ã –∞–∫—Ç–∏–≤–Ω–æ —Å–æ–∑–¥–∞–µ—Ç–µ —Å–æ–≤–º–µ—Å—Ç–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è ‚Äî —ç—Ç–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –≤ –±—É–¥—É—â–µ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–π")
        
        # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤
        transformative_memories = [m for m in memories if m.relationship_impact == 'transformative']
        if transformative_memories:
            insights.append(f"‚ú® {len(transformative_memories)} –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å—Ç–∞–ª–∏ –ø–µ—Ä–µ–ª–æ–º–Ω—ã–º–∏ –º–æ–º–µ–Ω—Ç–∞–º–∏ –≤ –≤–∞—à–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö")
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç–∏
        repeat_wishes = [m for m in memories if m.would_repeat]
        if len(repeat_wishes) / len(memories) > 0.8:
            insights.append("üîÑ –í—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –≤–∞—à–∏—Ö —Å–≤–∏–¥–∞–Ω–∏–π ‚Äî –∑–Ω–∞–∫ —Ç–æ–≥–æ, —á—Ç–æ –≤—ã —Ö–æ—Ä–æ—à–æ –≤—ã–±–∏—Ä–∞–µ—Ç–µ")
        
        # –°–µ–∑–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        month_counts = {}
        for memory in memories:
            month = memory.visit_date.month
            month_counts[month] = month_counts.get(month, 0) + 1
        
        if month_counts:
            peak_month = max(month_counts.items(), key=lambda x: x[1])[0]
            month_names = ['', '—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è',
                          '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è']
            insights.append(f"üìÖ –ë–æ–ª—å—à–µ –≤—Å–µ–≥–æ —è—Ä–∫–∏—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å–æ–∑–¥–∞–µ—Ç—Å—è –≤ {month_names[peak_month]}")
        
        return insights[:5]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞–∫—Å–∏–º—É–º 5 –∏–Ω—Å–∞–π—Ç–æ–≤
    
    def get_memory_based_recommendations(self, pair_id: str, 
                                       top_k: int = 5) -> List[MemoryRecommendation]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π
        
        Args:
            pair_id: ID –ø–∞—Ä—ã
            top_k: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞–º—è—Ç–∏
        """
        memories = self.get_memories(pair_id)
        
        if not memories:
            return []
        
        recommendations = []
        
        # 1. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª—É—á—à–∏—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π
        best_memories = [m for m in memories if m.joint_rating >= 8.0]
        if best_memories:
            best_memory = max(best_memories, key=lambda m: m.joint_rating)
            recommendations.append(MemoryRecommendation(
                recommended_place=f"–ü–æ—Ö–æ–∂–µ–µ –º–µ—Å—Ç–æ –Ω–∞ {best_memory.place_title}",
                similarity_to_memory=best_memory.memory_id,
                reason=f"–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ {best_memory.joint_rating}/10 –∑–∞ {best_memory.place_title} ‚Äî –Ω–∞–π–¥–µ–º —á—Ç–æ-—Ç–æ –ø–æ—Ö–æ–∂–µ–µ!",
                confidence=0.9
            ))
        
        # 2. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª—é–±–∏–º–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        analytics = self.get_memory_analytics(pair_id)
        if analytics.favorite_categories:
            fav_category = analytics.favorite_categories[0]
            category_memories = [m for m in memories if m.place_category == fav_category]
            if category_memories:
                avg_rating = sum(m.joint_rating for m in category_memories) / len(category_memories)
                recommendations.append(MemoryRecommendation(
                    recommended_place=f"–ù–æ–≤–æ–µ –º–µ—Å—Ç–æ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{fav_category}'",
                    similarity_to_memory="category_pattern",
                    reason=f"–í—ã –ª—é–±–∏—Ç–µ {fav_category} (—Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ {avg_rating:.1f}/10) ‚Äî –≤—Ä–µ–º—è –æ—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ!",
                    confidence=0.8
                ))
        
        # 3. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
        tried_categories = set(m.place_category for m in memories)
        all_categories = ['restaurant', 'cafe', 'entertainment', 'activity', 'bar', 'gift']
        untried_categories = [cat for cat in all_categories if cat not in tried_categories]
        
        if untried_categories:
            new_category = untried_categories[0]
            recommendations.append(MemoryRecommendation(
                recommended_place=f"–ü–µ—Ä–≤—ã–π –æ–ø—ã—Ç –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{new_category}'",
                similarity_to_memory="diversity_boost",
                reason=f"–í—ã –µ—â–µ –Ω–µ –ø—Ä–æ–±–æ–≤–∞–ª–∏ {new_category} ‚Äî –≤—Ä–µ–º—è –¥–ª—è –Ω–æ–≤—ã—Ö –æ—Ç–∫—Ä—ã—Ç–∏–π!",
                confidence=0.6
            ))
        
        # 4. –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–≥–æ –æ–ø—ã—Ç–∞
        transformative_memories = [m for m in memories if m.relationship_impact == 'transformative']
        if transformative_memories:
            transformative = transformative_memories[0]
            recommendations.append(MemoryRecommendation(
                recommended_place=f"–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ –æ—Å–æ–±–µ–Ω–Ω–æ–º—É: –º–µ—Å—Ç–æ –∫–∞–∫ {transformative.place_title}",
                similarity_to_memory=transformative.memory_id,
                reason=f"{transformative.place_title} —Å—Ç–∞–ª –æ—Å–æ–±–µ–Ω–Ω—ã–º –º–æ–º–µ–Ω—Ç–æ–º –≤–∞—à–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π ‚Äî –Ω–∞–π–¥–µ–º –ø–æ—Ö–æ–∂—É—é –º–∞–≥–∏—é",
                confidence=0.85
            ))
        
        # 5. –°–µ–∑–æ–Ω–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
        current_month = datetime.now().month
        seasonal_memories = [m for m in memories if m.visit_date.month == current_month]
        if seasonal_memories:
            seasonal_avg = sum(m.joint_rating for m in seasonal_memories) / len(seasonal_memories)
            if seasonal_avg >= 7.0:
                recommendations.append(MemoryRecommendation(
                    recommended_place=f"–°–µ–∑–æ–Ω–Ω–∞—è —Ç—Ä–∞–¥–∏—Ü–∏—è (–∫–∞–∫ –≤ –ø—Ä–æ—à–ª–æ–º –≥–æ–¥—É)",
                    similarity_to_memory="seasonal_pattern",
                    reason=f"–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ —É –≤–∞—Å –æ—Ç–ª–∏—á–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è (—Ä–µ–π—Ç–∏–Ω–≥ {seasonal_avg:.1f}/10) ‚Äî —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç—Ä–∞–¥–∏—Ü–∏—é!",
                    confidence=0.7
                ))
        
        return recommendations[:top_k]
    
    def _update_analytics(self, pair_id: str):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–µ–¥–≤—ã—á–∏—Å–ª–µ–Ω–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É –¥–ª—è –ø–∞—Ä—ã"""
        analytics = self.get_memory_analytics(pair_id)
        
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute("""
                INSERT OR REPLACE INTO memory_analytics 
                (pair_id, total_memories, avg_rating, favorite_categories, last_updated, ai_insights)
                VALUES (?, ?, ?, ?, ?, ?)
            """, (
                pair_id,
                analytics.total_memories,
                analytics.avg_rating,
                json.dumps(analytics.favorite_categories),
                datetime.now().isoformat(),
                json.dumps(analytics.ai_insights)
            ))
            conn.commit()
    
    def create_memory_timeline_visualization(self, pair_id: str) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ timeline –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π
        
        Args:
            pair_id: ID –ø–∞—Ä—ã
            
        Returns:
            –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        """
        memories = self.get_memories(pair_id, sort_by='visit_date')
        
        if not memories:
            return {'timeline': [], 'stats': {}}
        
        timeline_data = []
        
        for memory in memories:
            timeline_data.append({
                'date': memory.visit_date.isoformat(),
                'title': memory.place_title,
                'category': memory.place_category,
                'rating': memory.joint_rating,
                'happiness': memory.happiness_level,
                'photos_count': len(memory.photos),
                'has_notes': len(memory.notes) > 0,
                'memory_strength': memory.memory_strength,
                'ai_summary': memory.ai_generated_summary,
                'special_occasion': memory.special_occasion
            })
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        stats = {
            'total_memories': len(memories),
            'avg_rating': round(sum(m.joint_rating for m in memories) / len(memories), 1),
            'best_memory': max(memories, key=lambda m: m.joint_rating).place_title,
            'memory_span_days': (memories[-1].visit_date - memories[0].visit_date).days,
            'categories_tried': len(set(m.place_category for m in memories))
        }
        
        return {
            'timeline': timeline_data,
            'stats': stats,
            'generated_at': datetime.now().isoformat()
        }
    
    def export_memories(self, pair_id: str, format: str = 'json') -> str:
        """
        –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–∞—Ä—ã
        
        Args:
            pair_id: ID –ø–∞—Ä—ã
            format: –§–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ (json, csv)
            
        Returns:
            –ü—É—Ç—å –∫ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        memories = self.get_memories(pair_id)
        export_dir = Path('data/exports')
        export_dir.mkdir(exist_ok=True)
        
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        
        if format == 'json':
            filename = f"memories_{pair_id}_{timestamp}.json"
            filepath = export_dir / filename
            
            export_data = {
                'pair_id': pair_id,
                'exported_at': datetime.now().isoformat(),
                'total_memories': len(memories),
                'memories': [memory.to_dict() for memory in memories],
                'analytics': asdict(self.get_memory_analytics(pair_id))
            }
            
            with open(filepath, 'w', encoding='utf-8') as f:
                json.dump(export_data, f, ensure_ascii=False, indent=2, default=str)
        
        elif format == 'csv':
            import pandas as pd
            
            filename = f"memories_{pair_id}_{timestamp}.csv"
            filepath = export_dir / filename
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame
            df_data = []
            for memory in memories:
                row = {
                    '–î–∞—Ç–∞': memory.visit_date.strftime('%Y-%m-%d'),
                    '–ú–µ—Å—Ç–æ': memory.place_title,
                    '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': memory.place_category,
                    '–†–µ–π—Ç–∏–Ω–≥': memory.joint_rating,
                    '–£—Ä–æ–≤–µ–Ω—å_—Å—á–∞—Å—Ç—å—è': memory.happiness_level,
                    '–ó–∞–º–µ—Ç–∫–∏': memory.notes,
                    '–ü–æ–≤—Ç–æ—Ä–∏–ª–∏_–±—ã': memory.would_repeat,
                    'AI_–æ–ø–∏—Å–∞–Ω–∏–µ': memory.ai_generated_summary
                }
                df_data.append(row)
            
            df = pd.DataFrame(df_data)
            df.to_csv(filepath, index=False, encoding='utf-8-sig')
        
        print(f"üì∏ –í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã: {filepath}")
        return str(filepath)

def main():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Shared Memory Bank"""
    print("üì∏ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Shared Memory Bank - –§–∞–∑–∞ 3.1")
    print("üíù –ö–æ–ø–∏–ª–∫–∞ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: retention —á–µ—Ä–µ–∑ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–Ω–∫ –ø–∞–º—è—Ç–∏
    memory_bank = SharedMemoryBank()
    
    # –¢–µ—Å—Ç–æ–≤–∞—è –ø–∞—Ä–∞
    test_pair_id = "pair_123"
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π
    print(f"\nüìù –°–æ–∑–¥–∞–µ–º –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –ø–∞—Ä—ã {test_pair_id}...")
    
    # –í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ 1: –†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —É–∂–∏–Ω
    memory1 = memory_bank.save_memory(
        pair_id=test_pair_id,
        recommendation_id="rec_001",
        place_title="–†–µ—Å—Ç–æ—Ä–∞–Ω '–ò—Ç–∞–ª—å—è–Ω–µ—Ü'",
        place_category="restaurant",
        visit_date=datetime.now() - timedelta(days=30),
        joint_rating=9.2,
        photos=["photo1.jpg", "photo2.jpg"],
        notes="–ù–µ–≤–µ—Ä–æ—è—Ç–Ω—ã–π –≤–µ—á–µ—Ä! –ü–∞—Å—Ç–∞ –±—ã–ª–∞ –±–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π, –∞ –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ –æ—á–µ–Ω—å —Ä–æ–º–∞–Ω—Ç–∏—á–Ω–æ–π.",
        tags=["—Ä–æ–º–∞–Ω—Ç–∏–∫–∞", "–ø–µ—Ä–≤–æ–µ_—Å–≤–∏–¥–∞–Ω–∏–µ", "–∏—Ç–∞–ª—å—è–Ω—Å–∫–∞—è_–∫—É—Ö–Ω—è"],
        happiness_level=5,
        relationship_impact="transformative",
        special_occasion="–ø–µ—Ä–≤–æ–µ —Å–≤–∏–¥–∞–Ω–∏–µ"
    )
    
    # –í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ 2: –ö–æ—Ñ–µ
    memory2 = memory_bank.save_memory(
        pair_id=test_pair_id,
        recommendation_id="rec_002",
        place_title="–ö–æ—Ñ–µ–π–Ω—è '–ê—Ä–æ–º–∞—Ç'",
        place_category="cafe",
        visit_date=datetime.now() - timedelta(days=15),
        joint_rating=7.8,
        photos=["photo3.jpg"],
        notes="–£—é—Ç–Ω–æ–µ –º–µ—Å—Ç–æ, –≤–∫—É—Å–Ω—ã–π –∫–æ—Ñ–µ. –î–æ–ª–≥–æ —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞–ª–∏.",
        tags=["–∫–æ—Ñ–µ", "—É—é—Ç", "—Ä–∞–∑–≥–æ–≤–æ—Ä—ã"],
        happiness_level=4,
        relationship_impact="positive"
    )
    
    # –í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ 3: –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è
    memory3 = memory_bank.save_memory(
        pair_id=test_pair_id,
        recommendation_id="rec_003",
        place_title="–ö–≤–µ—Å—Ç-–∫–æ–º–Ω–∞—Ç–∞ '–ó–∞–≥–∞–¥–∫–∞'",
        place_category="entertainment",
        visit_date=datetime.now() - timedelta(days=7),
        joint_rating=8.5,
        photos=["photo4.jpg", "photo5.jpg", "photo6.jpg"],
        notes="–ë—ã–ª–æ —Å–ª–æ–∂–Ω–æ, –Ω–æ –º—ã –æ—Ç–ª–∏—á–Ω–æ —Ä–∞–±–æ—Ç–∞–ª–∏ –≤ –∫–æ–º–∞–Ω–¥–µ!",
        tags=["–∫–≤–µ—Å—Ç", "–∫–æ–º–∞–Ω–¥–∞", "–∞–¥—Ä–µ–Ω–∞–ª–∏–Ω"],
        happiness_level=5,
        relationship_impact="positive",
        would_repeat=True
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
    print(f"\nüí≠ –í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–∞—Ä—ã:")
    memories = memory_bank.get_memories(test_pair_id)
    for memory in memories:
        print(f"  üìÖ {memory.visit_date.strftime('%d.%m.%Y')}: {memory.place_title}")
        print(f"     ‚≠ê –†–µ–π—Ç–∏–Ω–≥: {memory.joint_rating}/10 | üòä –°—á–∞—Å—Ç—å–µ: {memory.happiness_level}/5")
        print(f"     üìù {memory.ai_generated_summary}")
        print()
    
    # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π
    print(f"üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π:")
    analytics = memory_bank.get_memory_analytics(test_pair_id)
    print(f"  –í—Å–µ–≥–æ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {analytics.total_memories}")
    print(f"  –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {analytics.avg_rating}/10")
    print(f"  –õ—é–±–∏–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(analytics.favorite_categories)}")
    print(f"  AI –∏–Ω—Å–∞–π—Ç—ã:")
    for insight in analytics.ai_insights:
        print(f"    ‚Ä¢ {insight}")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞–º—è—Ç–∏
    print(f"\nüéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π:")
    memory_recommendations = memory_bank.get_memory_based_recommendations(test_pair_id, top_k=3)
    for i, rec in enumerate(memory_recommendations, 1):
        print(f"  {i}. {rec.recommended_place}")
        print(f"     üí° {rec.reason}")
        print(f"     üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {rec.confidence:.0%}")
        print()
    
    # Timeline –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    print(f"üìà Timeline –¥–∞–Ω–Ω—ã–µ:")
    timeline_data = memory_bank.create_memory_timeline_visualization(test_pair_id)
    print(f"  –ü–µ—Ä–∏–æ–¥ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {timeline_data['stats']['memory_span_days']} –¥–Ω–µ–π")
    print(f"  –õ—É—á—à–µ–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {timeline_data['stats']['best_memory']}")
    print(f"  –ö–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–ø—Ä–æ–±–æ–≤–∞–Ω–æ: {timeline_data['stats']['categories_tried']}")
    
    # –≠–∫—Å–ø–æ—Ä—Ç –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π
    print(f"\nüíæ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è...")
    export_path = memory_bank.export_memories(test_pair_id, format='json')
    
    print(f"\nüì∏ Shared Memory Bank –≥–æ—Ç–æ–≤!")
    print(f"‚úÖ –§–∞–∑–∞ 3.1 (–ö–æ–ø–∏–ª–∫–∞ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π) –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"üí° Retention –º–µ—Ö–∞–Ω–∏–∑–º: —á–µ–º –±–æ–ª—å—à–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π, —Ç–µ–º —Ü–µ–Ω–Ω–µ–µ –∞–∫–∫–∞—É–Ω—Ç")

if __name__ == "__main__":
    main()
