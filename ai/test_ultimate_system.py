#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Ultimate AI System
–ü–æ–ª–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö 7 —Ñ–∞–∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã LoveMemory
"""

import time
import json
from ultimate_ai_service import UltimateAIService

def test_ultimate_system():
    """–ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Ultimate AI —Å–∏—Å—Ç–µ–º—ã"""
    print("üåü" + "="*80)
    print("üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ULTIMATE AI SYSTEM - ALL 7 PHASES")
    print("üåü" + "="*80)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É
    print("\n1Ô∏è‚É£ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´")
    start_time = time.time()
    service = UltimateAIService()
    init_time = time.time() - start_time
    print(f"‚è±Ô∏è –í—Ä–µ–º—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {init_time:.2f}—Å")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
    print("\n2Ô∏è‚É£ –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´")
    status = service.get_system_status()
    print(f"üìä –ì–æ—Ç–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {status['ready_components']}/{status['total_components']}")
    print(f"üéØ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞: {'‚úÖ' if status['system_ready'] else '‚ùå'}")
    print("üìã –°—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:")
    for component, ready in status['components_status'].items():
        print(f"   {component}: {'‚úÖ' if ready else '‚ùå'}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–∞—Ä—ã
    test_pairs = service.content_recommender.pairs['id'].head(3).tolist()
    
    print(f"\n3Ô∏è‚É£ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ô ({len(test_pairs)} –ø–∞—Ä)")
    
    total_times = []
    methods_used = {}
    
    for i, pair_id in enumerate(test_pairs, 1):
        print(f"\nüìù –¢–µ—Å—Ç {i}: –ü–∞—Ä–∞ {pair_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        start_time = time.time()
        result = service.get_ultimate_recommendations(pair_id, top_k=5)
        processing_time = time.time() - start_time
        total_times.append(processing_time * 1000)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ—Ç–æ–¥–∞
        method = result['metadata']['method_used']
        methods_used[method] = methods_used.get(method, 0) + 1
        
        print(f"   ‚è±Ô∏è –í—Ä–µ–º—è: {result['processing_time_ms']:.2f}ms")
        print(f"   üéØ –ú–µ—Ç–æ–¥: {method}")
        print(f"   üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {len(result['recommendations'])}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-3 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print("   üèÜ –¢–æ–ø-3 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        for j, rec in enumerate(result['recommendations'][:3], 1):
            print(f"      {j}. {rec['title']}")
            print(f"         Score: {rec['final_score']:.4f} | –¶–µ–Ω–∞: {rec['price']} —Ä—É–±.")
            if 'reasons' in rec and rec['reasons']:
                print(f"         –ü—Ä–∏—á–∏–Ω—ã: {rec['reasons'][0]}")
    
    print(f"\n4Ô∏è‚É£ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
    print(f"üìä –°—Ä–µ–¥–Ω—è—è –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: {sum(total_times)/len(total_times):.2f}ms")
    print(f"üìä P95 –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: {sorted(total_times)[int(len(total_times)*0.95)]:.2f}ms")
    print(f"üìä –ú–µ—Ç–æ–¥—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã:")
    for method, count in methods_used.items():
        print(f"   {method}: {count} —Ä–∞–∑")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
    print(f"\n5Ô∏è‚É£ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø")
    test_pair = test_pairs[0]
    
    # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å (–±–µ–∑ –∫—ç—à–∞)
    start_time = time.time()
    result1 = service.get_ultimate_recommendations(test_pair, top_k=5)
    time1 = (time.time() - start_time) * 1000
    
    # –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å (—Å –∫—ç—à–µ–º)
    start_time = time.time()
    result2 = service.get_ultimate_recommendations(test_pair, top_k=5)
    time2 = (time.time() - start_time) * 1000
    
    print(f"   –ë–µ–∑ –∫—ç—à–∞: {time1:.2f}ms")
    print(f"   –° –∫—ç—à–µ–º: {time2:.2f}ms")
    print(f"   –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {time1/time2:.1f}x")
    print(f"   Cache hits: {service.performance_stats['cache_hits']}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã
    print(f"\n6Ô∏è‚É£ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–û–ù–¢–ï–ö–°–¢–ù–´–• –§–ò–õ–¨–¢–†–û–í")
    
    contexts = [
        {"max_price": 1500, "name": "–ù–∏–∑–∫–∏–π –±—é–¥–∂–µ—Ç"},
        {"preferred_categories": ["restaurant", "cafe"], "name": "–ï–¥–∞ –∏ –Ω–∞–ø–∏—Ç–∫–∏"},
        {"max_price": 3000, "preferred_categories": ["entertainment"], "name": "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–æ 3000—Ä"}
    ]
    
    for context in contexts:
        print(f"\n   üéØ –ö–æ–Ω—Ç–µ–∫—Å—Ç: {context['name']}")
        context_copy = context.copy()
        del context_copy['name']
        
        result = service.get_ultimate_recommendations(test_pair, top_k=5, context=context_copy)
        print(f"   üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {len(result['recommendations'])}")
        
        if result['recommendations']:
            avg_price = sum(r['price'] for r in result['recommendations']) / len(result['recommendations'])
            categories = set(r['category'] for r in result['recommendations'])
            print(f"   üí∞ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {avg_price:.0f} —Ä—É–±.")
            print(f"   üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(categories)}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º Feature Importance (–µ—Å–ª–∏ LTR –¥–æ—Å—Ç—É–ø–µ–Ω)
    if service.components_status['learning_to_rank']:
        print(f"\n7Ô∏è‚É£ FEATURE IMPORTANCE (LEARNING TO RANK)")
        importance = service.ltr_service.get_feature_importance(top_k=10)
        
        if importance:
            print("   üîç –¢–æ–ø-10 –≤–∞–∂–Ω—ã—Ö —Ñ–∏—á:")
            for i, (feature, score) in enumerate(importance.items(), 1):
                print(f"      {i:2d}. {feature}: {score:.3f}")
        else:
            print("   ‚ö†Ô∏è Feature importance –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\n8Ô∏è‚É£ –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´")
    final_status = service.get_system_status()
    
    print(f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {final_status['performance_stats']['total_requests']}")
    print(f"   –°—Ä–µ–¥–Ω—è—è –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: {final_status['performance_stats']['avg_latency_ms']:.2f}ms")
    print(f"   Cache hits: {final_status['performance_stats']['cache_hits']}")
    print(f"   –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–π –º–æ–¥–µ–ª–µ–π: {final_status['performance_stats']['model_switches']}")
    print(f"   –†–∞–∑–º–µ—Ä –∫—ç—à–∞: {final_status['cache_size']} –∑–∞–ø–∏—Å–µ–π")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –∞—Ä—Ö–µ—Ç–∏–ø–∞–º
    print(f"\n9Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ö–ê–ß–ï–°–¢–í–ê –ü–û –ê–†–•–ï–¢–ò–ü–ê–ú")
    
    archetype_results = {}
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä—ã —Ä–∞–∑–Ω—ã—Ö –∞—Ä—Ö–µ—Ç–∏–ø–æ–≤
    for archetype in ['ArtLovers', 'Gamers', 'Gourmets', 'Fitness', 'Travelers']:
        # –ù–∞—Ö–æ–¥–∏–º –ø–∞—Ä—ã —ç—Ç–æ–≥–æ –∞—Ä—Ö–µ—Ç–∏–ø–∞
        archetype_users = service.content_recommender.users[
            service.content_recommender.users['archetype'] == archetype
        ]['id'].tolist()
        
        archetype_pairs = service.content_recommender.pairs[
            (service.content_recommender.pairs['user1_id'].isin(archetype_users)) |
            (service.content_recommender.pairs['user2_id'].isin(archetype_users))
        ]['id'].head(2).tolist()
        
        if archetype_pairs:
            archetype_recommendations = []
            for pair_id in archetype_pairs:
                try:
                    result = service.get_ultimate_recommendations(pair_id, top_k=3)
                    archetype_recommendations.extend(result['recommendations'])
                except:
                    continue
            
            if archetype_recommendations:
                categories = [r['category'] for r in archetype_recommendations]
                avg_score = sum(r['final_score'] for r in archetype_recommendations) / len(archetype_recommendations)
                
                archetype_results[archetype] = {
                    'avg_score': avg_score,
                    'top_category': max(set(categories), key=categories.count) if categories else 'unknown',
                    'recommendations_count': len(archetype_recommendations)
                }
    
    print("   üé≠ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∞—Ä—Ö–µ—Ç–∏–ø–∞–º:")
    for archetype, stats in archetype_results.items():
        print(f"   {archetype}:")
        print(f"      –°—Ä–µ–¥–Ω–∏–π score: {stats['avg_score']:.3f}")
        print(f"      –ü–æ–ø—É–ª—è—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {stats['top_category']}")
        print(f"      –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {stats['recommendations_count']}")
    
    print(f"\nüéâ" + "="*80)
    print("üèÜ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
    print("‚úÖ Ultimate AI System —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    print("üåü –í—Å–µ 7 —Ñ–∞–∑ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –∏ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã:")
    print("   1-3: –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∏ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ")
    print("   4: Content-Based —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    print("   5: Collaborative Filtering (SVD)")
    print("   6: Embeddings + ANN –ø–æ–∏—Å–∫ (Faiss)")
    print("   7: Learning to Rank (LightGBM)")
    print("üéâ" + "="*80)

def test_specific_scenarios():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
    print("\nüî¨ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –¢–ï–°–¢–´")
    
    service = UltimateAIService()
    
    # –¢–µ—Å—Ç —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä–æ–π
    print("\n1. –¢–µ—Å—Ç —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä–æ–π:")
    try:
        result = service.get_ultimate_recommendations("non_existent_pair", top_k=5)
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {len(result['recommendations'])} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
        print(f"   –ú–µ—Ç–æ–¥: {result['metadata'].get('method_used', 'unknown')}")
    except Exception as e:
        print(f"   –û—à–∏–±–∫–∞ (–æ–∂–∏–¥–∞–µ–º–æ): {e}")
    
    # –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –±–æ–ª—å—à–æ–º top_k
    print("\n2. –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (top_k=50):")
    test_pair = service.content_recommender.pairs['id'].iloc[0]
    start_time = time.time()
    result = service.get_ultimate_recommendations(test_pair, top_k=50)
    processing_time = (time.time() - start_time) * 1000
    print(f"   –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.2f}ms")
    print(f"   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ–ª—É—á–µ–Ω–æ: {len(result['recommendations'])}")
    
    # –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Å–æ–≤
    print("\n3. –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Å–æ–≤:")
    try:
        service.update_weights(0.5, 0.3, 0.2)
        print(f"   –ù–æ–≤—ã–µ –≤–µ—Å–∞: {service.fallback_weights}")
        
        # –¢–µ—Å—Ç —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –≤–µ—Å–∞–º–∏
        try:
            service.update_weights(0.6, 0.6, 0.6)  # –°—É–º–º–∞ > 1
        except ValueError as e:
            print(f"   –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ–π–º–∞–Ω–∞ –æ—à–∏–±–∫–∞: {e}")
    except Exception as e:
        print(f"   –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    # –û—Å–Ω–æ–≤–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    test_ultimate_system()
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
    test_specific_scenarios()
    
    print(f"\nüí´ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ production! üí´")
