"""
üí∞ Sales-Driven XAI –¥–ª—è LoveMemory AI
–§–∞–∑–∞ 2.3: "–ü—Ä–æ–¥–∞—é—â–∞—è" –û–±—ä—è—Å–Ω–∏–º–æ—Å—Ç—å

–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ SHAP-–∑–Ω–∞—á–µ–Ω–∏—è –≤ —É–±–µ–¥–∏—Ç–µ–ª—å–Ω—ã–µ —Ü–µ–Ω–Ω–æ—Å—Ç–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.
–ù–µ –ø—Ä–æ—Å—Ç–æ –æ–±—ä—è—Å–Ω—è–µ—Ç –ü–û–ß–ï–ú–£, –∞ —É–±–µ–∂–¥–∞–µ—Ç –ó–ê–ß–ï–ú —ç—Ç–æ –Ω—É–∂–Ω–æ –ø–∞—Ä–µ.

–¶–µ–ª—å: –ü—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –∫–∞–∂–¥–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –≤ –º–∏–Ω–∏-–ø—Ä–æ–¥–∞–∂—É, –∫–æ—Ç–æ—Ä–∞—è —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç conversion rate
"""

import json
import os
import random
from typing import Dict, List, Tuple, Optional, Any
from datetime import datetime
import pandas as pd
import numpy as np
from dataclasses import dataclass
import shap

from personality_engine import PersonalityProfile
from context_awareness_engine import CompleteContext

@dataclass
class SalesExplanation:
    """–ü—Ä–æ–¥–∞—é—â–µ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
    headline: str  # –ó–∞–≥–æ–ª–æ–≤–æ–∫-–∫—Ä—é—á–æ–∫
    value_proposition: str  # –û—Å–Ω–æ–≤–Ω–æ–µ —Ü–µ–Ω–Ω–æ—Å—Ç–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
    personal_benefits: List[str]  # –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –≤—ã–≥–æ–¥—ã (2-3 –ø—É–Ω–∫—Ç–∞)
    social_proof: str  # –°–æ—Ü–∏–∞–ª—å–Ω–æ–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ
    urgency_factor: Optional[str]  # –§–∞–∫—Ç–æ—Ä —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
    confidence_score: float  # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –æ–±—ä—è—Å–Ω–µ–Ω–∏–∏ (0-1)
    technical_backup: Dict[str, Any]  # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–ª–æ–∂–∫–∞ (SHAP –∏ —Ç.–¥.)
    
    def to_dict(self) -> Dict[str, Any]:
        return {
            'headline': self.headline,
            'value_proposition': self.value_proposition,
            'personal_benefits': self.personal_benefits,
            'social_proof': self.social_proof,
            'urgency_factor': self.urgency_factor,
            'confidence_score': self.confidence_score,
            'technical_backup': self.technical_backup
        }

@dataclass
class PersonalizationInsight:
    """–ò–Ω—Å–∞–π—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏"""
    insight_type: str  # personality, interests, relationship, context
    raw_data: str  # –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "openness: 0.8")
    human_interpretation: str  # –ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è
    benefit_connection: str  # –°–≤—è–∑—å —Å –≤—ã–≥–æ–¥–æ–π
    confidence: float  # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –∏–Ω—Å–∞–π—Ç–µ

class SalesDrivenXAI:
    """
    –ü—Ä–æ–¥–∞—é—â–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π
    
    –ü—Ä–µ–≤—Ä–∞—â–∞–µ—Ç —Ö–æ–ª–æ–¥–Ω—É—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É –≤ —Ç–µ–ø–ª—ã–µ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–µ –∏—Å—Ç–æ—Ä–∏–∏,
    –∫–æ—Ç–æ—Ä—ã–µ –º–æ—Ç–∏–≤–∏—Ä—É—é—Ç –ø–∞—Ä—ã –¥–µ–ª–∞—Ç—å –≤—ã–±–æ—Ä
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Sales-Driven XAI —Å–∏—Å—Ç–µ–º—ã"""
        
        # –®–∞–±–ª–æ–Ω—ã –ø—Ä–æ–¥–∞—é—â–∏—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        self.headline_templates = {
            'personality_match': [
                "üéØ –ò–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –≤–∞—à–µ–º—É —Ö–∞—Ä–∞–∫—Ç–µ—Ä—É!",
                "‚ú® –ö–∞–∫ –±—É–¥—Ç–æ —Å–æ–∑–¥–∞–Ω–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å",
                "üî• –í–∞—à–∞ –ª–∏—á–Ω–æ—Å—Ç—å + —ç—Ç–æ –º–µ—Å—Ç–æ = –º–∞–≥–∏—è",
                "üí´ –ú—ã –∑–Ω–∞–µ–º, —á—Ç–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è!"
            ],
            'novelty_discovery': [
                "üó∫Ô∏è –û—Ç–∫—Ä—ã—Ç–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤–∞—Å —É–¥–∏–≤–∏—Ç!",
                "üåü –ù–æ–≤–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –∂–¥–µ—Ç –≤–∞—Å",
                "üéà –í—ã—Ö–æ–¥–∏—Ç–µ –∏–∑ –∑–æ–Ω—ã –∫–æ–º—Ñ–æ—Ä—Ç–∞ –≤–º–µ—Å—Ç–µ",
                "üöÄ –í—Ä–µ–º—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –æ–ø—ã—Ç–∞!"
            ],
            'perfect_timing': [
                "‚è∞ –ò–¥–µ–∞–ª—å–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–ª—è —ç—Ç–æ–≥–æ!",
                "üéØ –°–µ–π—á–∞—Å —Å–∞–º–æ–µ –≤—Ä–µ–º—è –¥–ª—è —ç—Ç–æ–≥–æ",
                "‚ú® –ó–≤–µ–∑–¥—ã —Å–æ—à–ª–∏—Å—å –¥–ª—è —ç—Ç–æ–≥–æ –≤—ã–±–æ—Ä–∞",
                "üåà –ü—Ä–µ–∫—Ä–∞—Å–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å"
            ],
            'relationship_harmony': [
                "üíï –£–∫—Ä–µ–ø–∏—Ç –≤–∞—à—É —Å–≤—è–∑—å",
                "üë´ –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—à–µ–π –ø–∞—Ä—ã",
                "üíù –°–æ–∑–¥–∞—Å—Ç –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–µ –º–æ–º–µ–Ω—Ç—ã –≤–º–µ—Å—Ç–µ",
                "ü§ù –û–±—ä–µ–¥–∏–Ω–∏—Ç –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã"
            ],
            'exclusive_match': [
                "üëë –ü—Ä–µ–º–∏—É–º –≤—ã–±–æ—Ä –¥–ª—è –æ—Å–æ–±–µ–Ω–Ω—ã—Ö –ø–∞—Ä",
                "üíé –†–µ–¥–∫–æ–µ —Å–æ—á–µ—Ç–∞–Ω–∏–µ –≤—Å–µ—Ö –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π",
                "üéñÔ∏è –í—ã—Å—à–∞—è –ª–∏–≥–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –≤–∞—Å",
                "üèÜ –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π must-have"
            ]
        }
        
        # –®–∞–±–ª–æ–Ω—ã —Ü–µ–Ω–Ω–æ—Å—Ç–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        self.value_proposition_templates = {
            'comfort_zone': "–≠—Ç–æ –º–µ—Å—Ç–æ —Å–æ–∑–≤—É—á–Ω–æ –≤–∞—à–µ–π –¥—É—à–µ ‚Äî –∑–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ —Ä–∞—Å—Å–ª–∞–±–∏—Ç—å—Å—è –∏ –Ω–∞—Å–ª–∞–¥–∏—Ç—å—Å—è –æ–±—â–µ—Å—Ç–≤–æ–º –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ —Å—Ç—Ä–µ—Å—Å–∞.",
            'adventure_call': "–ü—Ä–∏—à–ª–æ –≤—Ä–µ–º—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è! –≠—Ç–æ –º–µ—Å—Ç–æ –ø–æ–¥–∞—Ä–∏—Ç –≤–∞–º —ç–º–æ—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –±—É–¥–µ—Ç–µ –≤—Å–ø–æ–º–∏–Ω–∞—Ç—å –≥–æ–¥–∞–º–∏.",
            'perfect_balance': "–†–µ–¥–∫–æ–µ –º–µ—Å—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ –∏–¥–µ–∞–ª—å–Ω–æ –±–∞–ª–∞–Ω—Å–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å—ã –≤–∞—Å –æ–±–æ–∏—Ö ‚Äî –∫–æ–º–ø—Ä–æ–º–∏—Å—Å, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è –∫–∞–∂–¥–æ–º—É.",
            'relationship_investment': "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –≤ –≤–∞—à–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è. –°–æ–≤–º–µ—Å—Ç–Ω—ã–π –æ–ø—ã—Ç –∑–¥–µ—Å—å —Å–¥–µ–ª–∞–µ—Ç –≤–∞—à—É —Å–≤—è–∑—å –µ—â–µ –∫—Ä–µ–ø—á–µ.",
            'personal_growth': "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç—å –≤ —Å–µ–±–µ –∏ –ø–∞—Ä—Ç–Ω–µ—Ä–µ —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ. –í—ã —É–¥–∏–≤–∏—Ç–µ—Å—å, –∫–∞–∫ –º–Ω–æ–≥–æ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –¥—Ä—É–≥ –æ –¥—Ä—É–≥–µ.",
            'moment_amplifier': "–£—Å–∏–ª–∏—Ç –º–∞–≥–∏—é —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞. –°–æ—á–µ—Ç–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏, –º–µ—Å—Ç–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —Å–æ–∑–¥–∞—Å—Ç –∏–¥–µ–∞–ª—å–Ω—ã–π –¥–µ–Ω—å.",
            'memory_creator': "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —è—Ä–∫–∏—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π. –ß–µ—Ä–µ–∑ –≥–æ–¥ –≤—ã –±—É–¥–µ—Ç–µ —É–ª—ã–±–∞—Ç—å—Å—è, –≤—Å–ø–æ–º–∏–Ω–∞—è —ç—Ç–æ—Ç –¥–µ–Ω—å.",
            'stress_relief': "–ê–Ω—Ç–∏—Å—Ç—Ä–µ—Å—Å –¥–ª—è –≤–∞—à–µ–π –ø–∞—Ä—ã. –ò–º–µ–Ω–Ω–æ —Ç–æ, —á—Ç–æ –Ω—É–∂–Ω–æ –ø–æ—Å–ª–µ —Ç—è–∂–µ–ª–æ–π –Ω–µ–¥–µ–ª–∏."
        }
        
        # –ë–∞–Ω–∫ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤
        self.social_proof_templates = [
            "92% –ø–∞—Ä —Å –ø–æ—Ö–æ–∂–∏–º–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏ –æ—Ç–º–µ—Ç–∏–ª–∏ —ç—Ç–æ –º–µ—Å—Ç–æ –∫–∞–∫ '–æ—á–µ–Ω—å –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å'",
            "–¢–æ–ø-3 —Å—Ä–µ–¥–∏ –ø–∞—Ä –≤–∞—à–µ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞ –≤ —ç—Ç–æ–º —Ä–∞–π–æ–Ω–µ",
            "–õ—é–±–∏–º–æ–µ –º–µ—Å—Ç–æ –ø–∞—Ä —Å –≤–∞—à–∏–º —Å—Ç–∏–ª–µ–º –∂–∏–∑–Ω–∏",
            "4.8/5 –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ —Å—Ä–µ–¥–∏ —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö –º–µ—Å—Ç –≥–æ—Ä–æ–¥–∞",
            "–†–µ–∫–æ–º–µ–Ω–¥—É—é—Ç 9 –∏–∑ 10 –ø–∞—Ä, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –∑–¥–µ—Å—å –Ω–∞ –ø–µ—Ä–≤–æ–º —Å–≤–∏–¥–∞–Ω–∏–∏",
            "–°–µ–∫—Ä–µ—Ç–Ω–æ–µ –º–µ—Å—Ç–æ –º–µ—Å—Ç–Ω—ã—Ö –ø–∞—Ä ‚Äî —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–æ –∏ –≤–∞–º",
            "–ó–∞–≤–æ–µ–≤–∞–ª–æ —Å–µ—Ä–¥—Ü–∞ 1000+ –ø–∞—Ä –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥",
            "–ú–µ—Å—Ç–æ, –∫—É–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è —Å–Ω–æ–≤–∞ –∏ —Å–Ω–æ–≤–∞"
        ]
        
        # –§–∞–∫—Ç–æ—Ä—ã —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
        self.urgency_factors = [
            "–°–µ–∑–æ–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ‚Äî —Ç–æ–ª—å–∫–æ —Å–µ–π—á–∞—Å",
            "–ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å —Ä–∞—Å—Ç–µ—Ç ‚Äî –ª—É—á—à–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞—Ä–∞–Ω–µ–µ",
            "–ò–¥–µ–∞–ª—å–Ω–∞—è –ø–æ–≥–æ–¥–∞ –∏–º–µ–Ω–Ω–æ —Å–µ–≥–æ–¥–Ω—è",
            "–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –º–µ–Ω—é —Ç–æ–ª—å–∫–æ –≤ —ç—Ç–∏ –¥–Ω–∏",
            "–ú–µ–Ω—å—à–µ –ª—é–¥–µ–π –≤ –±—É–¥–Ω–∏–µ –¥–Ω–∏ ‚Äî –±–æ–ª—å—à–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏",
            "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏ –∞–∫—Ü–∏–∏",
            "–ü–∏–∫–æ–≤—ã–π —Å–µ–∑–æ–Ω –¥–ª—è —ç—Ç–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
        ]
        
        # –úa–ø–ø–∏–Ω–≥ —Ñ–∏—á –≤ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
        self.feature_to_human_mapping = {
            # –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥–µ–ª—å–Ω—ã–µ scores
            'content_score': {
                'category': 'interests',
                'human_template': "—Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –≤–∞—à–∏–º–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏",
                'detail_template': "–£ –≤–∞—Å –µ—Å—Ç—å –æ–±—â–∏–µ —É–≤–ª–µ—á–µ–Ω–∏—è: {interests}"
            },
            'cf_score': {
                'category': 'social_proof',
                'human_template': "–ø–æ–ø—É–ª—è—Ä–Ω–æ —Å—Ä–µ–¥–∏ –ø–æ—Ö–æ–∂–∏—Ö –ø–∞—Ä",
                'detail_template': "–ü–∞—Ä—ã —Å –≤–∞—à–∏–º–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º–∏ –≤—ã–±–∏—Ä–∞—é—Ç –∏–º–µ–Ω–Ω–æ —ç—Ç–æ"
            },
            'embedding_score': {
                'category': 'semantic_match',
                'human_template': "—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏ –±–ª–∏–∑–∫–æ –≤–∞—à–µ–º—É —Å—Ç–∏–ª—é",
                'detail_template': "–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—à–µ–º—É –æ–±—Ä–∞–∑—É –∂–∏–∑–Ω–∏ –∏ —Ü–µ–Ω–Ω–æ—Å—Ç—è–º"
            },
            
            # –ú–Ω–æ–≥–æ—Ü–µ–ª–µ–≤—ã–µ scores
            'relevance_score': {
                'category': 'perfect_match',
                'human_template': "–∏–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –∏–º–µ–Ω–Ω–æ –≤–∞–º",
                'detail_template': "–í—Å–µ —Ñ–∞–∫—Ç–æ—Ä—ã —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ —Ç–æ, —á—Ç–æ —ç—Ç–æ –≤–∞—à –≤—ã–±–æ—Ä"
            },
            'novelty_score': {
                'category': 'discovery',
                'human_template': "–ø—Ä–∏–Ω–µ—Å–µ—Ç –Ω–æ–≤—ã–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è",
                'detail_template': "–û—Ç–∫—Ä–æ–µ—Ç –¥–ª—è –≤–∞—Å –Ω–µ–∏–∑–≤–µ–¥–∞–Ω–Ω—ã–µ –≥—Ä–∞–Ω–∏ –æ—Ç–¥—ã—Ö–∞"
            },
            'empathy_score': {
                'category': 'relationship',
                'human_template': "—É—á–∏—Ç—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å—ã –æ–±–æ–∏—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤",
                'detail_template': "–ì–∞—Ä–º–æ–Ω–∏—á–Ω–æ —Å–æ—á–µ—Ç–∞–µ—Ç —Ç–æ, —á—Ç–æ –Ω—Ä–∞–≤–∏—Ç—Å—è –∫–∞–∂–¥–æ–º—É –∏–∑ –≤–∞—Å"
            },
            
            # OCEAN –ª–∏—á–Ω–æ—Å—Ç—å
            'avg_openness': {
                'category': 'personality',
                'human_template': "—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—à–µ–π –æ—Ç–∫—Ä—ã—Ç–æ—Å—Ç–∏ –∫ –Ω–æ–≤–æ–º—É",
                'detail_template': "–í–∞—à–∞ –ª—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞–π–¥–µ—Ç –∑–¥–µ—Å—å –ø–∏—â—É –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π"
            },
            'avg_extraversion': {
                'category': 'personality', 
                'human_template': "–ø–æ–¥—Ö–æ–¥–∏—Ç –≤–∞—à–µ–º—É —É—Ä–æ–≤–Ω—é —Å–æ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏",
                'detail_template': "–ò–º–µ–Ω–Ω–æ —Ç–∞ –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ –æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤–∞–º –∫–æ–º—Ñ–æ—Ä—Ç–Ω–∞"
            },
            'avg_agreeableness': {
                'category': 'personality',
                'human_template': "—Å–æ–∑–¥–∞—Å—Ç –≥–∞—Ä–º–æ–Ω–∏—á–Ω—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –¥–ª—è –≤–∞—Å",
                'detail_template': "–°–ø–æ–∫–æ–π–Ω–∞—è –æ–±—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–µ–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –∏ —Å—Ç—Ä–µ—Å—Å–∞"
            },
            
            # –û—Ç–Ω–æ—à–µ–Ω–∏—è
            'harmony_index': {
                'category': 'relationship',
                'human_template': "—É—Å–∏–ª–∏—Ç –≤–∞—à—É –≥–∞—Ä–º–æ–Ω–∏—é –∫–∞–∫ –ø–∞—Ä—ã",
                'detail_template': "–í–∞—à–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Ä–∞—Å—Ü–≤–µ—Ç–µ—Ç –≤ —ç—Ç–æ–º –º–µ—Å—Ç–µ"
            },
            'routine_index': {
                'category': 'relationship',
                'human_template': "—Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—Ç –≤–∞—à –ø—Ä–∏–≤—ã—á–Ω—ã–π –¥–æ—Å—É–≥",
                'detail_template': "–û—Å–≤–µ–∂–∏—Ç –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∏ –¥–æ–±–∞–≤–∏—Ç –∏—Å–∫—Ä—É"
            },
            
            # –ö–æ–Ω—Ç–µ–∫—Å—Ç
            'is_weekend': {
                'category': 'timing',
                'human_template': "–∏–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –¥–Ω—è",
                'detail_template': "–í—Ä–µ–º—è —Ä–∞—Å—Å–ª–∞–±–∏—Ç—å—Å—è –∏ –Ω–∞—Å–ª–∞–¥–∏—Ç—å—Å—è –¥—Ä—É–≥ –¥—Ä—É–≥–æ–º"
            },
            'context_boost_factor': {
                'category': 'timing',
                'human_template': "—Å–µ–π—á–∞—Å —Å–∞–º—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π –º–æ–º–µ–Ω—Ç",
                'detail_template': "–í—Å–µ –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞ —Å–∫–ª–∞–¥—ã–≤–∞—é—Ç—Å—è –≤ –≤–∞—à—É –ø–æ–ª—å–∑—É"
            }
        }
        
        print("üí∞ Sales-Driven XAI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def extract_personalization_insights(self, pair_data: Dict, 
                                       recommendation: Dict,
                                       context: Optional[CompleteContext] = None) -> List[PersonalizationInsight]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Å–∞–π—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä—ã
        
        Args:
            pair_data: –î–∞–Ω–Ω—ã–µ –æ –ø–∞—Ä–µ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ + –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ)
            recommendation: –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —Å —Ñ–∏—á–∞–º–∏
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∏–Ω—Å–∞–π—Ç–æ–≤ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
        """
        insights = []
        
        try:
            # –ò–Ω—Å–∞–π—Ç—ã –ª–∏—á–Ω–æ—Å—Ç–∏
            if 'user1_personality' in pair_data and 'user2_personality' in pair_data:
                personality_insights = self._analyze_personality_insights(
                    pair_data['user1_personality'], 
                    pair_data['user2_personality'], 
                    recommendation
                )
                insights.extend(personality_insights)
            
            # –ò–Ω—Å–∞–π—Ç—ã –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
            if 'user1_interests' in pair_data and 'user2_interests' in pair_data:
                interest_insights = self._analyze_interest_insights(
                    pair_data['user1_interests'],
                    pair_data['user2_interests'],
                    recommendation
                )
                insights.extend(interest_insights)
            
            # –ò–Ω—Å–∞–π—Ç—ã –æ—Ç–Ω–æ—à–µ–Ω–∏–π
            if 'harmony_index' in pair_data:
                relationship_insights = self._analyze_relationship_insights(pair_data, recommendation)
                insights.extend(relationship_insights)
            
            # –ö–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã
            if context:
                context_insights = self._analyze_context_insights(context, recommendation)
                insights.extend(context_insights)
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Å–∞–π—Ç–æ–≤: {e}")
        
        return insights
    
    def _analyze_personality_insights(self, personality1: Dict, personality2: Dict, 
                                    recommendation: Dict) -> List[PersonalizationInsight]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–Ω—Å–∞–π—Ç—ã –ª–∏—á–Ω–æ—Å—Ç–∏ OCEAN"""
        insights = []
        
        try:
            # –°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è OCEAN
            avg_openness = (personality1.get('openness', 0.5) + personality2.get('openness', 0.5)) / 2
            avg_extraversion = (personality1.get('extraversion', 0.5) + personality2.get('extraversion', 0.5)) / 2
            avg_agreeableness = (personality1.get('agreeableness', 0.5) + personality2.get('agreeableness', 0.5)) / 2
            
            recommendation_tags = recommendation.get('tags', [])
            
            # –í—ã—Å–æ–∫–∞—è –æ—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å
            if avg_openness > 0.7:
                novelty = recommendation.get('novelty', 0.5)
                if novelty > 0.6:
                    insights.append(PersonalizationInsight(
                        insight_type='personality',
                        raw_data=f'openness: {avg_openness:.2f}, novelty: {novelty:.2f}',
                        human_interpretation='–í—ã –æ–±–∞ –æ—Ç–∫—Ä—ã—Ç—ã –∫ –Ω–æ–≤–æ–º—É –æ–ø—ã—Ç—É',
                        benefit_connection='–≠—Ç–æ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ –ø–æ–¥–∞—Ä–∏—Ç –≤–∞–º –∏–º–µ–Ω–Ω–æ —Ç–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –∏—â–µ—Ç–µ',
                        confidence=0.8
                    ))
            
            # –í—ã—Å–æ–∫–∞—è —ç–∫—Å—Ç—Ä–∞–≤–µ—Ä—Å–∏—è
            if avg_extraversion > 0.7:
                if recommendation.get('category') in ['entertainment', 'restaurant', 'bar']:
                    insights.append(PersonalizationInsight(
                        insight_type='personality',
                        raw_data=f'extraversion: {avg_extraversion:.2f}',
                        human_interpretation='–í—ã –ª—é–±–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
                        benefit_connection='–ó–¥–µ—Å—å –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏ –∏ –ª—é–¥–µ–π, —á—Ç–æ–±—ã –∑–∞—Ä—è–¥–∏—Ç—å—Å—è –ø–æ–∑–∏—Ç–∏–≤–æ–º',
                        confidence=0.7
                    ))
            
            # –ù–∏–∑–∫–∞—è —ç–∫—Å—Ç—Ä–∞–≤–µ—Ä—Å–∏—è (–∏–Ω—Ç—Ä–æ–≤–µ—Ä—Å–∏—è)
            elif avg_extraversion < 0.3:
                if any(tag.lower() in ['—É—é—Ç–Ω—ã–π', '—Å–ø–æ–∫–æ–π–Ω—ã–π', '—Ç–∏—Ö–∏–π'] for tag in recommendation_tags):
                    insights.append(PersonalizationInsight(
                        insight_type='personality',
                        raw_data=f'extraversion: {avg_extraversion:.2f}',
                        human_interpretation='–í—ã —Ü–µ–Ω–∏—Ç–µ —Å–ø–æ–∫–æ–π–Ω—É—é –∏ —É–µ–¥–∏–Ω–µ–Ω–Ω—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É',
                        benefit_connection='–ò–º–µ–Ω–Ω–æ —Ç–æ —Ç–∏—Ö–æ–µ –º–µ—Å—Ç–æ, –≥–¥–µ –º–æ–∂–Ω–æ –Ω–∞—Å–ª–∞–¥–∏—Ç—å—Å—è –æ–±—â–µ—Å—Ç–≤–æ–º –¥—Ä—É–≥ –¥—Ä—É–≥–∞',
                        confidence=0.8
                    ))
            
            # –í—ã—Å–æ–∫–∞—è –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            if avg_agreeableness > 0.7:
                empathy_score = recommendation.get('empathy_score', 0.5)
                if empathy_score > 0.6:
                    insights.append(PersonalizationInsight(
                        insight_type='personality',
                        raw_data=f'agreeableness: {avg_agreeableness:.2f}, empathy: {empathy_score:.2f}',
                        human_interpretation='–í—ã –æ–±–∞ –ª–µ–≥–∫–æ –Ω–∞—Ö–æ–¥–∏—Ç–µ –∫–æ–º–ø—Ä–æ–º–∏—Å—Å—ã –∏ –∑–∞–±–æ—Ç–∏—Ç–µ—Å—å –¥—Ä—É–≥ –æ –¥—Ä—É–≥–µ',
                        benefit_connection='–≠—Ç–æ –º–µ—Å—Ç–æ —É—á–∏—Ç—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å—ã –æ–±–æ–∏—Ö ‚Äî –Ω–∏–∫–æ–º—É –Ω–µ –ø—Ä–∏–¥–µ—Ç—Å—è –∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å —Å–≤–æ–∏–º–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º–∏',
                        confidence=0.75
                    ))
                    
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ª–∏—á–Ω–æ—Å—Ç–∏: {e}")
        
        return insights
    
    def _analyze_interest_insights(self, interests1: Dict, interests2: Dict, 
                                 recommendation: Dict) -> List[PersonalizationInsight]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–Ω—Å–∞–π—Ç—ã –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤"""
        insights = []
        
        try:
            # –ù–∞—Ö–æ–¥–∏–º –æ–±—â–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã
            common_interests = set(interests1.keys()) & set(interests2.keys())
            recommendation_tags = recommendation.get('tags', [])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å —Ç–µ–≥–∞–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            matching_interests = []
            for interest in common_interests:
                for tag in recommendation_tags:
                    if interest.lower() in tag.lower() or tag.lower() in interest.lower():
                        matching_interests.append(interest)
                        break
            
            if matching_interests:
                top_interests = matching_interests[:2]  # –ë–µ—Ä–µ–º —Ç–æ–ø-2
                insights.append(PersonalizationInsight(
                    insight_type='interests',
                    raw_data=f'common_interests: {common_interests}',
                    human_interpretation=f'–£ –≤–∞—Å –æ–±—â–∏–µ —É–≤–ª–µ—á–µ–Ω–∏—è: {", ".join(top_interests)}',
                    benefit_connection='–ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ —Ä–∞–∑–¥–µ–ª–∏—Ç—å —Å—Ç—Ä–∞—Å—Ç—å –∫ —Ç–æ–º—É, —á—Ç–æ –ª—é–±–∏—Ç–µ –æ–±–∞',
                    confidence=0.9
                ))
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
            for interest, intensity in interests1.items():
                if isinstance(intensity, (int, float)) and intensity > 8:  # –í—ã—Å–æ–∫–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å
                    for tag in recommendation_tags:
                        if interest.lower() in tag.lower():
                            insights.append(PersonalizationInsight(
                                insight_type='interests',
                                raw_data=f'{interest}: {intensity}',
                                human_interpretation=f'{interest} ‚Äî –≤–∞—à–∞ –±–æ–ª—å—à–∞—è —Å—Ç—Ä–∞—Å—Ç—å',
                                benefit_connection='–ú–µ—Å—Ç–æ –¥–ª—è –∏—Å—Ç–∏–Ω–Ω—ã—Ö —Ü–µ–Ω–∏—Ç–µ–ª–µ–π ‚Äî –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –º–∞–∫—Å–∏–º—É–º —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—è',
                                confidence=0.8
                            ))
                            break
                            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤: {e}")
        
        return insights
    
    def _analyze_relationship_insights(self, pair_data: Dict, 
                                     recommendation: Dict) -> List[PersonalizationInsight]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–Ω—Å–∞–π—Ç—ã –æ—Ç–Ω–æ—à–µ–Ω–∏–π"""
        insights = []
        
        try:
            harmony_index = pair_data.get('harmony_index', 0.5)
            routine_index = pair_data.get('routine_index', 0.0)
            
            # –í—ã—Å–æ–∫–∞—è –≥–∞—Ä–º–æ–Ω–∏—è
            if harmony_index > 0.7:
                insights.append(PersonalizationInsight(
                    insight_type='relationship',
                    raw_data=f'harmony_index: {harmony_index:.2f}',
                    human_interpretation='–£ –≤–∞—Å –æ—á–µ–Ω—å –≥–∞—Ä–º–æ–Ω–∏—á–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è',
                    benefit_connection='–¢–∞–∫–æ–µ –º–µ—Å—Ç–æ —Ç–æ–ª—å–∫–æ —É—Å–∏–ª–∏—Ç –≤–∞—à—É —Å–≤—è–∑—å –∏ –ø–æ–¥–∞—Ä–∏—Ç –Ω–æ–≤—ã–µ —Å–æ–≤–º–µ—Å—Ç–Ω—ã–µ —ç–º–æ—Ü–∏–∏',
                    confidence=0.8
                ))
            
            # –í—ã—Å–æ–∫–∞—è —Ä—É—Ç–∏–Ω–∞
            if routine_index > 0.6:
                novelty = recommendation.get('novelty', 0.5)
                if novelty > 0.7:
                    insights.append(PersonalizationInsight(
                        insight_type='relationship',
                        raw_data=f'routine_index: {routine_index:.2f}, novelty: {novelty:.2f}',
                        human_interpretation='–í—Ä–µ–º—è –æ—Å–≤–µ–∂–∏—Ç—å –≤–∞—à –ø—Ä–∏–≤—ã—á–Ω—ã–π –¥–æ—Å—É–≥',
                        benefit_connection='–ù–æ–≤–æ–µ –º–µ—Å—Ç–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—Ç –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∏ –¥–æ–±–∞–≤–∏—Ç –∏—Å–∫—Ä—É –≤ –≤–∞—à–µ –æ–±—â–µ–Ω–∏–µ',
                        confidence=0.85
                    ))
            
            # –†–∞–∑–Ω—ã–µ –∞—Ä—Ö–µ—Ç–∏–ø—ã
            user1_archetype = pair_data.get('user1_archetype')
            user2_archetype = pair_data.get('user2_archetype')
            
            if user1_archetype != user2_archetype and user1_archetype and user2_archetype:
                empathy_score = recommendation.get('empathy_score', 0.5)
                if empathy_score > 0.6:
                    insights.append(PersonalizationInsight(
                        insight_type='relationship',
                        raw_data=f'archetypes: {user1_archetype}, {user2_archetype}',
                        human_interpretation=f'–í—ã –¥–æ–ø–æ–ª–Ω—è–µ—Ç–µ –¥—Ä—É–≥ –¥—Ä—É–≥–∞ ({user1_archetype} + {user2_archetype})',
                        benefit_connection='–≠—Ç–æ –º–µ—Å—Ç–æ –Ω–∞–π–¥–µ—Ç –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É –≤–∞—à–∏–º–∏ —Ä–∞–∑–Ω—ã–º–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º–∏',
                        confidence=0.7
                    ))
                    
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏–π: {e}")
        
        return insights
    
    def _analyze_context_insights(self, context: CompleteContext, 
                                recommendation: Dict) -> List[PersonalizationInsight]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã"""
        insights = []
        
        try:
            # –ü–æ–≥–æ–¥–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã
            if context.weather.condition == 'rainy':
                rec_tags = [tag.lower() for tag in recommendation.get('tags', [])]
                if any(keyword in rec_tags for keyword in ['—É—é—Ç–Ω—ã–π', '–∫—Ä—ã—Ç—ã–π', '—Ç–µ–ø–ª—ã–π']):
                    insights.append(PersonalizationInsight(
                        insight_type='context',
                        raw_data=f'weather: {context.weather.condition}',
                        human_interpretation='–ù–∞ —É–ª–∏—Ü–µ –¥–æ–∂–¥—å',
                        benefit_connection='–ò–¥–µ–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ, —á—Ç–æ–±—ã —É–∫—Ä—ã—Ç—å—Å—è –æ—Ç –Ω–µ–ø–æ–≥–æ–¥—ã –∏ –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è –≤ —Ç–µ–ø–ª–µ',
                        confidence=0.9
                    ))
            
            elif context.weather.is_good_weather:
                if recommendation.get('category') == 'activity':
                    insights.append(PersonalizationInsight(
                        insight_type='context',
                        raw_data=f'weather: good, temp: {context.weather.temperature}¬∞C',
                        human_interpretation='–ü—Ä–µ–∫—Ä–∞—Å–Ω–∞—è –ø–æ–≥–æ–¥–∞ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π',
                        benefit_connection='–û—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –Ω–∞ —É–ª–∏—Ü—É –∏ –∞–∫—Ç–∏–≤–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è –≤–º–µ—Å—Ç–µ',
                        confidence=0.8
                    ))
            
            # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã
            if context.temporal.is_weekend and context.temporal.time_of_day == 'evening':
                if recommendation.get('category') in ['restaurant', 'entertainment']:
                    insights.append(PersonalizationInsight(
                        insight_type='context',
                        raw_data='weekend_evening',
                        human_interpretation='–í—ã—Ö–æ–¥–Ω–æ–π –≤–µ—á–µ—Ä ‚Äî –≤—Ä–µ–º—è –¥–ª—è –æ—Å–æ–±–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—É–≥–∞',
                        benefit_connection='–ò–º–µ–Ω–Ω–æ —Ç–æ –º–µ—Å—Ç–æ, –≥–¥–µ –º–æ–∂–Ω–æ –∫—Ä–∞—Å–∏–≤–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã—Ö–æ–¥–Ω—ã–µ',
                        confidence=0.7
                    ))
            
            # –ù–∞—Å—Ç—Ä–æ–µ–Ω—á–µ—Å–∫–∏–µ –∏–Ω—Å–∞–π—Ç—ã
            if context.user_mood.mood_type == 'adventurous':
                novelty = recommendation.get('novelty', 0.5)
                if novelty > 0.7:
                    insights.append(PersonalizationInsight(
                        insight_type='context',
                        raw_data=f'mood: {context.user_mood.mood_type}, novelty: {novelty}',
                        human_interpretation='–í—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –Ω–∞ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è',
                        benefit_connection='–≠—Ç–æ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç –≤–∞—à—É –∂–∞–∂–¥—É –Ω–µ–∏–∑–≤–µ–¥–∞–Ω–Ω–æ–≥–æ',
                        confidence=0.8
                    ))
            
            elif context.user_mood.mood_type == 'comfortable':
                if any(tag.lower() in ['—É—é—Ç–Ω—ã–π', '—Å–ø–æ–∫–æ–π–Ω—ã–π', '–¥–æ–º–∞—à–Ω–∏–π'] 
                      for tag in recommendation.get('tags', [])):
                    insights.append(PersonalizationInsight(
                        insight_type='context',
                        raw_data=f'mood: {context.user_mood.mood_type}',
                        human_interpretation='–í—ã –∏—â–µ—Ç–µ –∫–æ–º—Ñ–æ—Ä—Ç –∏ —É—é—Ç',
                        benefit_connection='–ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ —Ç—É —Ç–µ–ø–ª—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É, –∫–æ—Ç–æ—Ä–∞—è –Ω—É–∂–Ω–∞ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å',
                        confidence=0.85
                    ))
                    
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
        
        return insights
    
    def generate_sales_explanation(self, recommendation: Dict,
                                 personalization_insights: List[PersonalizationInsight],
                                 feature_importance: Optional[Dict[str, float]] = None,
                                 context: Optional[CompleteContext] = None) -> SalesExplanation:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–¥–∞—é—â–µ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        
        Args:
            recommendation: –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
            personalization_insights: –ò–Ω—Å–∞–π—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
            feature_importance: –í–∞–∂–Ω–æ—Å—Ç—å —Ñ–∏—á (–æ—Ç SHAP –∏–ª–∏ –º–æ–¥–µ–ª–∏)
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            
        Returns:
            SalesExplanation —Å —É–±–µ–¥–∏—Ç–µ–ª—å–Ω—ã–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º
        """
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–º–∏–Ω–∏—Ä—É—é—â—É—é —Ç–µ–º—É –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
        explanation_theme = self._determine_explanation_theme(recommendation, personalization_insights, context)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        headline = self._generate_headline(explanation_theme, personalization_insights)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ü–µ–Ω–Ω–æ—Å—Ç–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
        value_proposition = self._generate_value_proposition(explanation_theme, recommendation, personalization_insights)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –≤—ã–≥–æ–¥—ã
        personal_benefits = self._generate_personal_benefits(personalization_insights, recommendation)
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–æ—Ü–∏–∞–ª—å–Ω–æ–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ
        social_proof = self._select_social_proof(recommendation)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–∫—Ç–æ—Ä —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
        urgency_factor = self._determine_urgency_factor(context, recommendation)
        
        # –í—ã—á–∏—Å–ª—è–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        confidence_score = self._calculate_explanation_confidence(personalization_insights, feature_importance)
        
        # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–ª–æ–∂–∫—É
        technical_backup = {
            'feature_importance': feature_importance or {},
            'insights_count': len(personalization_insights),
            'explanation_theme': explanation_theme,
            'recommendation_scores': {
                'relevance': recommendation.get('relevance_score', 0),
                'novelty': recommendation.get('novelty_score', 0),
                'empathy': recommendation.get('empathy_score', 0)
            },
            'context_boost': recommendation.get('context_boost_factor', 1.0)
        }
        
        return SalesExplanation(
            headline=headline,
            value_proposition=value_proposition,
            personal_benefits=personal_benefits,
            social_proof=social_proof,
            urgency_factor=urgency_factor,
            confidence_score=confidence_score,
            technical_backup=technical_backup
        )
    
    def _determine_explanation_theme(self, recommendation: Dict, 
                                   insights: List[PersonalizationInsight],
                                   context: Optional[CompleteContext] = None) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é —Ç–µ–º—É –æ–±—ä—è—Å–Ω–µ–Ω–∏—è"""
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø—ã –∏–Ω—Å–∞–π—Ç–æ–≤
        insight_types = [insight.insight_type for insight in insights]
        
        # –í—ã—Å–æ–∫–∞—è –Ω–æ–≤–∏–∑–Ω–∞
        if recommendation.get('novelty', 0.5) > 0.7:
            return 'novelty_discovery'
        
        # –°–∏–ª—å–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
        if 'personality' in insight_types and len([i for i in insights if i.insight_type == 'personality']) >= 2:
            return 'personality_match'
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω–∞—è –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å
        if context and context.context_score > 0.7:
            return 'perfect_timing'
        
        # –û—Ç–Ω–æ—à–µ–Ω—á–µ—Å–∫–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã
        if 'relationship' in insight_types:
            return 'relationship_harmony'
        
        # –í—ã—Å–æ–∫–∏–µ scores –ø–æ –≤—Å–µ–º –º–µ—Ç—Ä–∏–∫–∞–º
        if (recommendation.get('relevance_score', 0) > 0.7 and 
            recommendation.get('empathy_score', 0) > 0.7):
            return 'exclusive_match'
        
        # –î–µ—Ñ–æ–ª—Ç
        return 'personality_match'
    
    def _generate_headline(self, theme: str, insights: List[PersonalizationInsight]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–º—ã"""
        templates = self.headline_templates.get(theme, self.headline_templates['personality_match'])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã
        base_headline = random.choice(templates)
        
        # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
        personality_insights = [i for i in insights if i.insight_type == 'personality']
        if personality_insights and '–æ—Ç–∫—Ä—ã—Ç' in personality_insights[0].human_interpretation:
            if theme == 'novelty_discovery':
                return "üåü –ù–æ–≤–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –∏—Å–∫–∞—Ç–µ–ª–µ–π –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–π!"
        
        interest_insights = [i for i in insights if i.insight_type == 'interests']
        if interest_insights and len(interest_insights) > 0:
            return f"üéØ {base_headline.replace('–≤–∞—à–µ–º—É —Ö–∞—Ä–∞–∫—Ç–µ—Ä—É', '–≤–∞—à–∏–º —É–≤–ª–µ—á–µ–Ω–∏—è–º')}"
        
        return base_headline
    
    def _generate_value_proposition(self, theme: str, recommendation: Dict, 
                                  insights: List[PersonalizationInsight]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ü–µ–Ω–Ω–æ—Å—Ç–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"""
        
        # –ë–∞–∑–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —Ç–µ–º–µ
        base_templates = {
            'novelty_discovery': self.value_proposition_templates['adventure_call'],
            'personality_match': self.value_proposition_templates['comfort_zone'],
            'perfect_timing': self.value_proposition_templates['moment_amplifier'],
            'relationship_harmony': self.value_proposition_templates['relationship_investment'],
            'exclusive_match': self.value_proposition_templates['perfect_balance']
        }
        
        base_proposition = base_templates.get(theme, self.value_proposition_templates['comfort_zone'])
        
        # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Å–∞–π—Ç–æ–≤
        relationship_insights = [i for i in insights if i.insight_type == 'relationship']
        if relationship_insights:
            if '—Ä—É—Ç–∏–Ω' in relationship_insights[0].human_interpretation:
                return self.value_proposition_templates['memory_creator']
            elif '–≥–∞—Ä–º–æ–Ω' in relationship_insights[0].human_interpretation:
                return self.value_proposition_templates['relationship_investment']
        
        context_insights = [i for i in insights if i.insight_type == 'context']
        if context_insights:
            if '–¥–æ–∂–¥—å' in context_insights[0].human_interpretation:
                return self.value_proposition_templates['stress_relief']
            elif '–Ω–∞—Å—Ç—Ä–æ–µ–Ω' in context_insights[0].human_interpretation:
                return self.value_proposition_templates['personal_growth']
        
        return base_proposition
    
    def _generate_personal_benefits(self, insights: List[PersonalizationInsight], 
                                  recommendation: Dict) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –≤—ã–≥–æ–¥"""
        benefits = []
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–Ω—Å–∞–π—Ç—ã –≤ –≤—ã–≥–æ–¥—ã
        for insight in insights[:3]:  # –ë–µ—Ä–µ–º —Ç–æ–ø-3 –∏–Ω—Å–∞–π—Ç–∞
            benefit = insight.benefit_connection
            if benefit and benefit not in benefits:
                benefits.append(benefit)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≤—ã–≥–æ–¥—ã –µ—Å–ª–∏ –º–∞–ª–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö
        standard_benefits = [
            "–°–æ–∑–¥–∞—Å—Ç –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –æ–±—â–µ–Ω–∏—è",
            "–ü–æ–¥–∞—Ä–∏—Ç —ç–º–æ—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ–±—ä–µ–¥–∏–Ω—è—Ç –≤–∞—Å –µ—â–µ –±–æ–ª—å—à–µ",
            "–°—Ç–∞–Ω–µ—Ç –ø—Ä–∏—è—Ç–Ω—ã–º –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –Ω–∞ –¥–æ–ª–≥–∏–µ –≥–æ–¥—ã",
            "–ü–æ–∑–≤–æ–ª–∏—Ç –ª—É—á—à–µ —É–∑–Ω–∞—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥–∞",
            "–†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—Ç –≤–∞—à —Å–æ–≤–º–µ—Å—Ç–Ω—ã–π –¥–æ—Å—É–≥"
        ]
        
        while len(benefits) < 3:
            benefit = random.choice(standard_benefits)
            if benefit not in benefits:
                benefits.append(benefit)
        
        return benefits[:3]
    
    def _select_social_proof(self, recommendation: Dict) -> str:
        """–í—ã–±–∏—Ä–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–µ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ"""
        category = recommendation.get('category', '')
        
        # –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        category_specific = {
            'restaurant': "4.8/5 –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ —Å—Ä–µ–¥–∏ —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤",
            'cafe': "–õ—é–±–∏–º–æ–µ –º–µ—Å—Ç–æ –ø–∞—Ä –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å–≤–∏–¥–∞–Ω–∏–π",
            'entertainment': "–¢–æ–ø-3 —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–ª—è –ø–∞—Ä –≤ –≥–æ—Ä–æ–¥–µ",
            'activity': "92% –ø–∞—Ä –æ—Ç–º–µ—Ç–∏–ª–∏ –∫–∞–∫ '–æ—á–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ –∏ –≤–µ—Å–µ–ª–æ'",
            'bar': "–ú–µ—Å—Ç–æ ‚Ññ1 –¥–ª—è –≤–µ—á–µ—Ä–Ω–∏—Ö –≤—Å—Ç—Ä–µ—á –ø–∞—Ä"
        }
        
        if category in category_specific:
            return category_specific[category]
        
        return random.choice(self.social_proof_templates)
    
    def _determine_urgency_factor(self, context: Optional[CompleteContext], 
                                recommendation: Dict) -> Optional[str]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ñ–∞–∫—Ç–æ—Ä —Å—Ä–æ—á–Ω–æ—Å—Ç–∏"""
        
        # 30% —à–∞–Ω—Å –Ω–∞ —Å—Ä–æ—á–Ω–æ—Å—Ç—å
        if random.random() > 0.7:
            return None
        
        urgency_factors = []
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω–∞—è —Å—Ä–æ—á–Ω–æ—Å—Ç—å
        if context:
            if context.weather.condition == 'sunny' and recommendation.get('category') == 'activity':
                urgency_factors.append("–ò–¥–µ–∞–ª—å–Ω–∞—è –ø–æ–≥–æ–¥–∞ –∏–º–µ–Ω–Ω–æ —Å–µ–≥–æ–¥–Ω—è")
            
            if context.temporal.is_weekend and recommendation.get('category') == 'restaurant':
                urgency_factors.append("–ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å —Ä–∞—Å—Ç–µ—Ç ‚Äî –ª—É—á—à–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞—Ä–∞–Ω–µ–µ")
            
            if context.user_mood.mood_type == 'adventurous':
                urgency_factors.append("–ü–æ–π–º–∞–π—Ç–µ –≤–æ–ª–Ω—É –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å")
        
        # –°–µ–∑–æ–Ω–Ω–∞—è —Å—Ä–æ—á–Ω–æ—Å—Ç—å
        season_urgency = {
            'winter': "–ó–∏–º–Ω–∏–µ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è ‚Äî —Ç–æ–ª—å–∫–æ –¥–æ –≤–µ—Å–Ω—ã",
            'summer': "–õ–µ—Ç–Ω–∏–π —Å–µ–∑–æ–Ω –≤ —Å–∞–º–æ–º —Ä–∞–∑–≥–∞—Ä–µ",
            'autumn': "–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç–µ–ø–ª—ã–µ –¥–Ω–∏ –æ—Å–µ–Ω–∏",
            'spring': "–í–µ—Å–µ–Ω–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ‚Äî —Å–∞–º–æ–µ –≤—Ä–µ–º—è"
        }
        
        current_season = getattr(context.temporal, 'season', 'summer') if context else 'summer'
        if current_season in season_urgency:
            urgency_factors.append(season_urgency[current_season])
        
        # –û–±—â–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã
        urgency_factors.extend(self.urgency_factors)
        
        return random.choice(urgency_factors) if urgency_factors else None
    
    def _calculate_explanation_confidence(self, insights: List[PersonalizationInsight],
                                        feature_importance: Optional[Dict[str, float]] = None) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –æ–±—ä—è—Å–Ω–µ–Ω–∏–∏"""
        confidence = 0.5  # –ë–∞–∑–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        
        # –ë–æ–Ω—É—Å –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –∫–∞—á–µ—Å—Ç–≤–æ –∏–Ω—Å–∞–π—Ç–æ–≤
        if insights:
            avg_insight_confidence = sum(insight.confidence for insight in insights) / len(insights)
            confidence += avg_insight_confidence * 0.3
            
            # –ë–æ–Ω—É—Å –∑–∞ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Ç–∏–ø–æ–≤ –∏–Ω—Å–∞–π—Ç–æ–≤
            unique_types = len(set(insight.insight_type for insight in insights))
            confidence += unique_types * 0.05
        
        # –ë–æ–Ω—É—Å –∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–ª–æ–∂–∫—É
        if feature_importance:
            top_features_count = len([f for f, imp in feature_importance.items() if imp > 0.1])
            confidence += top_features_count * 0.02
        
        return min(1.0, max(0.0, confidence))
    
    def create_explanation_variants(self, recommendation: Dict,
                                  personalization_insights: List[PersonalizationInsight],
                                  num_variants: int = 3) -> List[SalesExplanation]:
        """
        –°–æ–∑–¥–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π –¥–ª—è A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
        Args:
            recommendation: –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
            personalization_insights: –ò–Ω—Å–∞–π—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
            num_variants: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
            
        Returns:
            –°–ø–∏—Å–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π
        """
        variants = []
        
        # –†–∞–∑–Ω—ã–µ —Ç–µ–º—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        themes = ['personality_match', 'novelty_discovery', 'relationship_harmony', 'perfect_timing']
        
        for i in range(num_variants):
            # –ß–µ—Ä–µ–¥—É–µ–º —Ç–µ–º—ã
            theme = themes[i % len(themes)]
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Ç–µ–º–æ–π
            original_theme = self._determine_explanation_theme(recommendation, personalization_insights)
            
            # –í—Ä–µ–º–µ–Ω–Ω–æ –ø–æ–¥–º–µ–Ω—è–µ–º —Ç–µ–º—É
            explanation = self.generate_sales_explanation(
                recommendation, personalization_insights
            )
            
            # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞
            if i == 1:  # –ë–æ–ª–µ–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
                explanation.headline = "üíï " + explanation.headline
                explanation.value_proposition = explanation.value_proposition.replace(".", " ‚Äî –∏ —ç—Ç–æ —Å—Ç–∞–Ω–µ—Ç –Ω–∞—á–∞–ª–æ–º –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏.")
            
            elif i == 2:  # –ë–æ–ª–µ–µ —Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
                explanation.headline = explanation.headline.replace("!", ".")
                explanation.personal_benefits.insert(0, "–û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏ –∫–∞—á–µ—Å—Ç–≤–∞")
            
            variants.append(explanation)
        
        return variants
    
    def format_for_frontend(self, explanation: SalesExplanation) -> Dict[str, Any]:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
        
        Args:
            explanation: –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å, –≥–æ—Ç–æ–≤—ã–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ UI
        """
        return {
            'explanation': {
                'headline': explanation.headline,
                'main_message': explanation.value_proposition,
                'benefits': explanation.personal_benefits,
                'social_proof': explanation.social_proof,
                'urgency': explanation.urgency_factor,
                'confidence': round(explanation.confidence_score * 100),  # –í –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
                'style': 'sales_driven'
            },
            'metadata': {
                'explanation_type': 'sales_driven_xai',
                'technical_backup': explanation.technical_backup,
                'generated_at': datetime.now().isoformat()
            }
        }

def main():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Sales-Driven XAI"""
    print("üí∞ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Sales-Driven XAI - –§–∞–∑–∞ 2.3")
    print("üéØ –ü—Ä–æ–¥–∞—é—â–∏–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è: –æ—Ç SHAP –∫ conversion rate")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É
    sales_xai = SalesDrivenXAI()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä—ã
    test_pair_data = {
        'user1_personality': {
            'openness': 0.8,
            'extraversion': 0.6,
            'agreeableness': 0.9,
            'conscientiousness': 0.5,
            'neuroticism': 0.3
        },
        'user2_personality': {
            'openness': 0.7,
            'extraversion': 0.7,
            'agreeableness': 0.8,
            'conscientiousness': 0.6,
            'neuroticism': 0.2
        },
        'user1_interests': {
            '–ò—Ç–∞–ª—å—è–Ω—Å–∫–∞—è –∫—É—Ö–Ω—è': 9.2,
            '–¢–µ–∞—Ç—Ä': 7.8,
            '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è': 8.5
        },
        'user2_interests': {
            '–ò—Ç–∞–ª—å—è–Ω—Å–∫–∞—è –∫—É—Ö–Ω—è': 8.7,
            '–ú—É–∑—ã–∫–∞': 9.0,
            '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è': 7.9
        },
        'harmony_index': 0.85,
        'routine_index': 0.7,
        'user1_archetype': 'ArtLovers',
        'user2_archetype': 'Gourmets'
    }
    
    # –¢–µ—Å—Ç–æ–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
    test_recommendation = {
        'title': '–†–µ—Å—Ç–æ—Ä–∞–Ω "–ò—Ç–∞–ª—å—è–Ω–µ—Ü"',
        'category': 'restaurant',
        'price': 2500,
        'tags': ['–ò—Ç–∞–ª—å—è–Ω—Å–∫–∞—è –∫—É—Ö–Ω—è', '–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π', '–£—é—Ç–Ω—ã–π'],
        'relevance_score': 0.9,
        'novelty_score': 0.4,
        'empathy_score': 0.8,
        'context_boost_factor': 1.2
    }
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Å–∞–π—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
    print("\nüîç –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Å–∞–π—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏...")
    insights = sales_xai.extract_personalization_insights(test_pair_data, test_recommendation)
    
    print(f"–ù–∞–π–¥–µ–Ω–æ {len(insights)} –∏–Ω—Å–∞–π—Ç–æ–≤:")
    for insight in insights:
        print(f"  {insight.insight_type}: {insight.human_interpretation}")
        print(f"    ‚Üí {insight.benefit_connection}")
        print()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–¥–∞—é—â–µ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
    print("üí∞ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–¥–∞—é—â–µ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ...")
    
    feature_importance = {
        'relevance_score': 0.3,
        'empathy_score': 0.25,
        'avg_openness': 0.15,
        'harmony_index': 0.12,
        'content_score': 0.18
    }
    
    explanation = sales_xai.generate_sales_explanation(
        test_recommendation, 
        insights, 
        feature_importance
    )
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print(f"\nüéØ –ü—Ä–æ–¥–∞—é—â–µ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ:")
    print(f"üì¢ –ó–∞–≥–æ–ª–æ–≤–æ–∫: {explanation.headline}")
    print(f"\nüíé –¶–µ–Ω–Ω–æ—Å—Ç–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:")
    print(f"   {explanation.value_proposition}")
    print(f"\n‚ú® –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –≤—ã–≥–æ–¥—ã:")
    for i, benefit in enumerate(explanation.personal_benefits, 1):
        print(f"   {i}. {benefit}")
    print(f"\nüèÜ –°–æ—Ü–∏–∞–ª—å–Ω–æ–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ:")
    print(f"   {explanation.social_proof}")
    
    if explanation.urgency_factor:
        print(f"\n‚è∞ –§–∞–∫—Ç–æ—Ä —Å—Ä–æ—á–Ω–æ—Å—Ç–∏:")
        print(f"   {explanation.urgency_factor}")
    
    print(f"\nüìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {explanation.confidence_score:.1%}")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    print(f"\nüß™ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
    variants = sales_xai.create_explanation_variants(test_recommendation, insights, 3)
    
    for i, variant in enumerate(variants, 1):
        print(f"\n–í–∞—Ä–∏–∞–Ω—Ç {i}: {variant.headline}")
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    formatted = sales_xai.format_for_frontend(explanation)
    print(f"\nüì± JSON –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –≥–æ—Ç–æ–≤ (confidence: {formatted['explanation']['confidence']}%)")
    
    print(f"\nüí∞ Sales-Driven XAI –≥–æ—Ç–æ–≤!")
    print(f"‚úÖ –§–∞–∑–∞ 2.3 (–ü—Ä–æ–¥–∞—é—â–∞—è –æ–±—ä—è—Å–Ω–∏–º–æ—Å—Ç—å) –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

if __name__ == "__main__":
    main()
