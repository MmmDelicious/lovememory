#!/usr/bin/env python3
"""
Explainability Service –¥–ª—è LoveMemory AI
–§–∞–∑–∞ 8: –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏–π AI –º–æ–¥–µ–ª–µ–π —Å –ø–æ–º–æ—â—å—é SHAP

–§—É–Ω–∫—Ü–∏–∏:
- SHAP –∞–Ω–∞–ª–∏–∑ –¥–ª—è LightGBM –º–æ–¥–µ–ª–∏
- –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–æ–ø-3 —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏  
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è human-friendly –æ–±—ä—è—Å–Ω–µ–Ω–∏–π
- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π –≤ recommendation_history
- –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–∂–Ω–æ—Å—Ç–∏ —Ñ–∏—á
"""

import json
import numpy as np
import pandas as pd
from typing import Dict, List, Tuple, Optional, Any
from datetime import datetime
import pickle
import os
from dataclasses import dataclass

# SHAP –¥–ª—è explainability
try:
    import shap
    import matplotlib.pyplot as plt
    import seaborn as sns
    SHAP_AVAILABLE = True
except ImportError:
    SHAP_AVAILABLE = False
    print("‚ö†Ô∏è SHAP –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º feature importance –∏–∑ –º–æ–¥–µ–ª–∏")

# –ò–º–ø–æ—Ä—Ç—ã –Ω–∞—à–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
from learning_to_rank_service import LearningToRankService
from llm_wrapper import LLMWrapper

@dataclass
class ExplanationResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
    item_id: str
    top_factors: List[Dict[str, Any]]  # [{"feature": "content_score", "value": 0.8, "contribution": 0.3, "explanation": "–≤—ã—Å–æ–∫–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤"}]
    human_friendly: str  # –ö—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    technical_details: Dict[str, Any]  # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    confidence_score: float  # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –æ–±—ä—è—Å–Ω–µ–Ω–∏–∏
    generated_at: datetime

class ExplainabilityService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è —Ä–µ—à–µ–Ω–∏–π AI –º–æ–¥–µ–ª–µ–π"""
    
    def __init__(self, ltr_service: Optional[LearningToRankService] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Explainability Service
        
        Args:
            ltr_service: –°–µ—Ä–≤–∏—Å Learning to Rank –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        """
        self.ltr_service = ltr_service or LearningToRankService()
        self.llm_wrapper = LLMWrapper()
        
        # SHAP –æ–±—ä–µ–∫—Ç—ã
        self.shap_explainer = None
        self.shap_values_cache = {}
        
        # –ú–∞–ø–ø–∏–Ω–≥ —Ñ–∏—á –Ω–∞ —á–µ–ª–æ–≤–µ–∫–æ-–ø–æ–Ω—è—Ç–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è
        self.feature_descriptions = {
            'content_score': '—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π',
            'cf_score': '–ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å —Å—Ä–µ–¥–∏ –ø–æ—Ö–æ–∂–∏—Ö –ø–∞—Ä',
            'embedding_score': '—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ –ø—Ä–æ—Ñ–∏–ª–µ–π',
            'price': '—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ü–µ–Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
            'price_match_score': '—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –±—é–¥–∂–µ—Ç—É –ø–∞—Ä—ã',
            'item_popularity': '–æ–±—â–∞—è –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å –º–µ—Å—Ç–∞/–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
            'age_diff': '–≤–æ–∑—Ä–∞—Å—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å',
            'same_archetype': '—Å—Ö–æ–∂–µ—Å—Ç—å —Ç–∏–ø–æ–≤ –ª–∏—á–Ω–æ—Å—Ç–∏',
            'budget_match': '—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–Ω—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π',
            'is_restaurant': '—Ä–µ—Å—Ç–æ—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è',
            'is_cafe': '–∫–∞—Ñ–µ –∏ –Ω–∞–ø–∏—Ç–∫–∏',
            'is_entertainment': '—Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
            'is_gift': '–ø–æ–¥–∞—Ä–æ—á–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è',
            'is_weekend': '–≤—Ä–µ–º—è –¥–ª—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –¥–Ω—è',
            'user1_artlovers': '–∏–Ω—Ç–µ—Ä–µ—Å –∫ –∏—Å–∫—É—Å—Å—Ç–≤—É –ø–µ—Ä–≤–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞',
            'user2_artlovers': '–∏–Ω—Ç–µ—Ä–µ—Å –∫ –∏—Å–∫—É—Å—Å—Ç–≤—É –≤—Ç–æ—Ä–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞',
            'user1_gamers': '–∏–≥—Ä–æ–≤—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞',
            'user2_gamers': '–∏–≥—Ä–æ–≤—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤—Ç–æ—Ä–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞',
            'user1_gourmets': '–≥–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã –ø–µ—Ä–≤–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞',
            'user2_gourmets': '–≥–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã –≤—Ç–æ—Ä–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞',
            'user1_fitness': '—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã –ø–µ—Ä–≤–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞',
            'user2_fitness': '—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã –≤—Ç–æ—Ä–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞',
            'user1_travelers': '–∏–Ω—Ç–µ—Ä–µ—Å –∫ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è–º –ø–µ—Ä–≤–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞',
            'user2_travelers': '–∏–Ω—Ç–µ—Ä–µ—Å –∫ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è–º –≤—Ç–æ—Ä–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞',
            'avg_activity': '—Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–∞—Ä—ã',
            'content_cf_product': '–∫–æ–º–±–∏–Ω–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –∏ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π',
            'content_embedding_product': '–∫–æ–º–±–∏–Ω–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –∏ —Å–µ–º–∞–Ω—Ç–∏–∫–∏',
            'cf_embedding_product': '–∫–æ–º–±–∏–Ω–∞—Ü–∏—è –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ –∏ —Å–µ–º–∞–Ω—Ç–∏–∫–∏'
        }
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SHAP –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        self._initialize_shap()
        
        print("üîç Explainability Service –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _initialize_shap(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç SHAP explainer –¥–ª—è LightGBM"""
        if not SHAP_AVAILABLE:
            print("‚ö†Ô∏è SHAP –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º feature importance")
            return
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–±—É—á–µ–Ω–Ω–∞—è LTR –º–æ–¥–µ–ª—å
            if self.ltr_service.ranker_model is None:
                if not self.ltr_service.load_model():
                    print("‚ö†Ô∏è LTR –º–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è SHAP –∞–Ω–∞–ª–∏–∑–∞")
                    return
            
            # –°–æ–∑–¥–∞–µ–º SHAP explainer –¥–ª—è LightGBM
            self.shap_explainer = shap.TreeExplainer(self.ltr_service.ranker_model)
            print("‚úÖ SHAP explainer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SHAP: {e}")
    
    def explain_recommendation(self, pair_id: str, item_id: str, 
                             candidate_features: Dict[str, float]) -> ExplanationResult:
        """
        –û–±—ä—è—Å–Ω—è–µ—Ç –ø–æ—á–µ–º—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π item –±—ã–ª —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω –ø–∞—Ä–µ
        
        Args:
            pair_id: ID –ø–∞—Ä—ã
            item_id: ID —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
            candidate_features: –§–∏—á–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        
        Returns:
            –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º SHAP values –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
            if self.shap_explainer and self.ltr_service.feature_names:
                top_factors = self._get_shap_explanation(candidate_features)
            else:
                # Fallback –Ω–∞ feature importance
                top_factors = self._get_feature_importance_explanation(candidate_features)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —á–µ–ª–æ–≤–µ–∫–æ-–ø–æ–Ω—è—Ç–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
            human_friendly = self._generate_human_explanation(top_factors, pair_id, item_id)
            
            # –í—ã—á–∏—Å–ª—è–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –æ–±—ä—è—Å–Ω–µ–Ω–∏–∏
            confidence_score = self._calculate_confidence(top_factors, candidate_features)
            
            # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏
            technical_details = {
                'method_used': 'shap' if self.shap_explainer else 'feature_importance',
                'total_features': len(candidate_features),
                'feature_coverage': len(top_factors) / len(candidate_features),
                'model_version': 'ltr_v1'
            }
            
            return ExplanationResult(
                item_id=item_id,
                top_factors=top_factors,
                human_friendly=human_friendly,
                technical_details=technical_details,
                confidence_score=confidence_score,
                generated_at=datetime.now()
            )
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –¥–ª—è {item_id}: {e}")
            return self._generate_fallback_explanation(item_id)
    
    def _get_shap_explanation(self, candidate_features: Dict[str, float]) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é SHAP"""
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏—á–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
            feature_vector = []
            for feature_name in self.ltr_service.feature_names:
                feature_vector.append(candidate_features.get(feature_name, 0.0))
            
            # –ü–æ–ª—É—á–∞–µ–º SHAP values
            feature_array = np.array(feature_vector).reshape(1, -1)
            shap_values = self.shap_explainer.shap_values(feature_array)[0]
            
            # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ —Å –∏—Ö –≤–∫–ª–∞–¥–æ–º
            factors = []
            for i, (feature_name, shap_value) in enumerate(zip(self.ltr_service.feature_names, shap_values)):
                if abs(shap_value) > 0.001:  # –¢–æ–ª—å–∫–æ –∑–Ω–∞—á–∏–º—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
                    factors.append({
                        'feature': feature_name,
                        'value': feature_vector[i],
                        'contribution': float(shap_value),
                        'explanation': self.feature_descriptions.get(feature_name, feature_name),
                        'direction': 'positive' if shap_value > 0 else 'negative'
                    })
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏ (–∞–±—Å–æ–ª—é—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ SHAP)
            factors.sort(key=lambda x: abs(x['contribution']), reverse=True)
            
            return factors[:5]  # –¢–æ–ø-5 —Ñ–∞–∫—Ç–æ—Ä–æ–≤
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ SHAP –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return self._get_feature_importance_explanation(candidate_features)
    
    def _get_feature_importance_explanation(self, candidate_features: Dict[str, float]) -> List[Dict[str, Any]]:
        """Fallback –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ feature importance –º–æ–¥–µ–ª–∏"""
        if not self.ltr_service.feature_importance:
            return self._get_simple_explanation(candidate_features)
        
        factors = []
        
        # –î–ª—è –∫–∞–∂–¥–æ–π –≤–∞–∂–Ω–æ–π —Ñ–∏—á–∏ —Å–º–æ—Ç—Ä–∏–º –µ—ë –∑–Ω–∞—á–µ–Ω–∏–µ —É –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        for feature_name, importance in list(self.ltr_service.feature_importance.items())[:10]:
            if feature_name in candidate_features:
                value = candidate_features[feature_name]
                
                # –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ –≤–∫–ª–∞–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞–∂–Ω–æ—Å—Ç–∏ —Ñ–∏—á–∏ –∏ –µ—ë –∑–Ω–∞—á–µ–Ω–∏—è
                contribution = importance * value / 1000.0  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º
                
                if abs(contribution) > 0.001:
                    factors.append({
                        'feature': feature_name,
                        'value': value,
                        'contribution': contribution,
                        'explanation': self.feature_descriptions.get(feature_name, feature_name),
                        'direction': 'positive' if contribution > 0 else 'negative'
                    })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–∫–ª–∞–¥—É
        factors.sort(key=lambda x: abs(x['contribution']), reverse=True)
        
        return factors[:3]  # –¢–æ–ø-3 —Ñ–∞–∫—Ç–æ—Ä–∞
    
    def _get_simple_explanation(self, candidate_features: Dict[str, float]) -> List[Dict[str, Any]]:
        """–ü—Ä–æ—Å—Ç–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –º–µ—Ç–æ–¥–æ–≤"""
        factors = []
        
        # –ö–ª—é—á–µ–≤—ã–µ —Ñ–∏—á–∏ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
        key_features = ['content_score', 'cf_score', 'embedding_score', 'price_match_score']
        
        for feature in key_features:
            if feature in candidate_features:
                value = candidate_features[feature]
                factors.append({
                    'feature': feature,
                    'value': value,
                    'contribution': value,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∞–º–æ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–∫ –≤–∫–ª–∞–¥
                    'explanation': self.feature_descriptions.get(feature, feature),
                    'direction': 'positive' if value > 0.5 else 'negative'
                })
        
        return factors
    
    def _generate_human_explanation(self, top_factors: List[Dict], pair_id: str, item_id: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —á–µ–ª–æ–≤–µ–∫–æ-–ø–æ–Ω—è—Ç–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ"""
        if not top_factors:
            return "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –æ—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π."
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫–∏–µ –ø—Ä–∏—á–∏–Ω—ã –¥–ª—è LLM
        reasons = []
        for factor in top_factors[:3]:
            explanation = factor['explanation']
            direction = factor['direction']
            
            if direction == 'positive':
                reasons.append(f"{explanation} –ø–æ–¥—Ö–æ–¥–∏—Ç")
            else:
                reasons.append(f"{explanation} —É—á—Ç–µ–Ω")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º LLM –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
        try:
            recommendation = {'title': item_id}  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            llm_response = self.llm_wrapper.generate_explanation(recommendation, reasons)
            return llm_response.generated_text
        except:
            # Fallback –Ω–∞ –ø—Ä–æ—Å—Ç–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
            return self._generate_simple_explanation(reasons)
    
    def _generate_simple_explanation(self, reasons: List[str]) -> str:
        """–ü—Ä–æ—Å—Ç–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –±–µ–∑ LLM"""
        if len(reasons) == 1:
            return f"‚Ä¢ {reasons[0]}"
        elif len(reasons) == 2:
            return f"‚Ä¢ {reasons[0]}\n‚Ä¢ {reasons[1]}"
        else:
            return f"‚Ä¢ {reasons[0]}\n‚Ä¢ {reasons[1]}\n‚Ä¢ {reasons[2]}"
    
    def _calculate_confidence(self, top_factors: List[Dict], all_features: Dict[str, float]) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –æ–±—ä—è—Å–Ω–µ–Ω–∏–∏"""
        if not top_factors:
            return 0.5
        
        # –ü—Ä–æ—Å—Ç–∞—è –º–µ—Ç—Ä–∏–∫–∞: —á–µ–º –±–æ–ª—å—à–µ –≤–∫–ª–∞–¥ —Ç–æ–ø —Ñ–∞–∫—Ç–æ—Ä–æ–≤, —Ç–µ–º –≤—ã—à–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        total_contribution = sum(abs(factor['contribution']) for factor in top_factors)
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ [0, 1]
        confidence = min(1.0, total_contribution * 2)
        
        # –£—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∫—Ä—ã—Ç–∏–µ —Ñ–∏—á
        coverage = len(top_factors) / max(len(all_features), 1)
        confidence = confidence * (0.7 + 0.3 * coverage)
        
        return max(0.1, min(1.0, confidence))
    
    def _generate_fallback_explanation(self, item_id: str) -> ExplanationResult:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç fallback –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö"""
        return ExplanationResult(
            item_id=item_id,
            top_factors=[{
                'feature': 'general_fit',
                'value': 0.7,
                'contribution': 0.7,
                'explanation': '—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–±—â–∏–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º',
                'direction': 'positive'
            }],
            human_friendly="‚Ä¢ –ü–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥ –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã\n‚Ä¢ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º\n‚Ä¢ –ü–æ–ø—É–ª—è—Ä–Ω–æ —Å—Ä–µ–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            technical_details={'method_used': 'fallback'},
            confidence_score=0.5,
            generated_at=datetime.now()
        )
    
    def explain_batch_recommendations(self, pair_id: str, 
                                    recommendations: List[Dict]) -> List[ExplanationResult]:
        """
        –û–±—ä—è—Å–Ω—è–µ—Ç –±–∞—Ç—á —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        
        Args:
            pair_id: ID –ø–∞—Ä—ã
            recommendations: –°–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Å —Ñ–∏—á–∞–º–∏
        
        Returns:
            –°–ø–∏—Å–æ–∫ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        """
        explanations = []
        
        for rec in recommendations:
            try:
                item_id = rec.get('item_id', 'unknown')
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–∏—á–∏ (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏)
                features = self._extract_features_from_recommendation(rec, pair_id)
                
                explanation = self.explain_recommendation(pair_id, item_id, features)
                explanations.append(explanation)
                
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –¥–ª—è {rec.get('item_id', 'unknown')}: {e}")
                explanations.append(self._generate_fallback_explanation(rec.get('item_id', 'unknown')))
        
        return explanations
    
    def _extract_features_from_recommendation(self, recommendation: Dict, pair_id: str) -> Dict[str, float]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ñ–∏—á–∏ –∏–∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        # –ï—Å–ª–∏ —Ñ–∏—á–∏ —É–∂–µ –µ—Å—Ç—å –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if 'features' in recommendation:
            return recommendation['features']
        
        # –ò–Ω–∞—á–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ —Ñ–∏—á–∏
        features = {
            'content_score': recommendation.get('content_score', 0.0),
            'cf_score': recommendation.get('cf_score', 0.0),
            'embedding_score': recommendation.get('embedding_score', 0.0),
            'price': recommendation.get('price', 0.0) / 1000.0,  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º
            'final_score': recommendation.get('final_score', 0.0)
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ —Ñ–∏—á–∏
        category = recommendation.get('category', 'unknown')
        features[f'is_{category}'] = 1.0
        
        return features
    
    def save_explanations_to_history(self, pair_id: str, recommendations: List[Dict], 
                                   explanations: List[ExplanationResult]):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –≤ recommendation_history –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        
        Args:
            pair_id: ID –ø–∞—Ä—ã
            recommendations: –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            explanations: –û–±—ä—è—Å–Ω–µ–Ω–∏—è
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            history_entry = {
                'pair_id': pair_id,
                'timestamp': datetime.now().isoformat(),
                'recommendations_with_explanations': []
            }
            
            for rec, explanation in zip(recommendations, explanations):
                entry = {
                    'item_id': rec.get('item_id'),
                    'title': rec.get('title'),
                    'final_score': rec.get('final_score'),
                    'top_factors': explanation.top_factors[:3],  # –¢–æ–ø-3 —Ñ–∞–∫—Ç–æ—Ä–∞
                    'human_explanation': explanation.human_friendly,
                    'confidence': explanation.confidence_score,
                    'context_snapshot': [factor['explanation'] for factor in explanation.top_factors[:3]]
                }
                history_entry['recommendations_with_explanations'].append(entry)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª (–≤ production —ç—Ç–æ –±—ã–ª–∞ –±—ã –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö)
            os.makedirs('explanation_history', exist_ok=True)
            filename = f"explanation_history/explanations_{pair_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(history_entry, f, ensure_ascii=False, indent=2)
            
            print(f"‚úÖ –û–±—ä—è—Å–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {filename}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—ä—è—Å–Ω–µ–Ω–∏–π: {e}")
    
    def generate_feature_importance_plot(self, save_path: str = "feature_importance.png"):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –≤–∞–∂–Ω–æ—Å—Ç–∏ —Ñ–∏—á"""
        if not self.ltr_service.feature_importance:
            print("‚ö†Ô∏è Feature importance –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        try:
            # –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ
            features = list(self.ltr_service.feature_importance.keys())[:15]
            importances = list(self.ltr_service.feature_importance.values())[:15]
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
            plt.figure(figsize=(12, 8))
            plt.barh(features, importances)
            plt.title('Feature Importance –≤ LTR –º–æ–¥–µ–ª–∏')
            plt.xlabel('–í–∞–∂–Ω–æ—Å—Ç—å')
            plt.tight_layout()
            plt.savefig(save_path, dpi=300, bbox_inches='tight')
            plt.close()
            
            print(f"‚úÖ –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {save_path}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
    
    def get_explainability_stats(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É explainability —Å–µ—Ä–≤–∏—Å–∞"""
        return {
            'shap_available': SHAP_AVAILABLE and self.shap_explainer is not None,
            'ltr_model_loaded': self.ltr_service.ranker_model is not None,
            'feature_count': len(self.ltr_service.feature_names) if self.ltr_service.feature_names else 0,
            'feature_descriptions_count': len(self.feature_descriptions),
            'llm_wrapper_available': self.llm_wrapper is not None
        }

def main():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã Explainability Service"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Explainability Service")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å
    explainer = ExplainabilityService()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
    stats = explainer.get_explainability_stats()
    print(f"\nüìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞:")
    for key, value in stats.items():
        print(f"  {key}: {value}")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_features = {
        'content_score': 0.85,
        'cf_score': 0.72,
        'embedding_score': 0.68,
        'price': 0.8,
        'price_match_score': 0.9,
        'same_archetype': 1.0,
        'budget_match': 1.0,
        'is_restaurant': 1.0,
        'is_cafe': 0.0,
        'user1_gourmets': 1.0,
        'user2_gourmets': 1.0,
        'content_cf_product': 0.61,
        'avg_activity': 0.75
    }
    
    print(f"\nüéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...")
    
    # –û–±—ä—è—Å–Ω—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
    explanation = explainer.explain_recommendation(
        pair_id="test_pair_123",
        item_id="restaurant_001",
        candidate_features=test_features
    )
    
    print(f"\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏—è:")
    print(f"Item ID: {explanation.item_id}")
    print(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {explanation.confidence_score:.3f}")
    print(f"–ú–µ—Ç–æ–¥: {explanation.technical_details.get('method_used', 'unknown')}")
    
    print(f"\nüîç –¢–æ–ø —Ñ–∞–∫—Ç–æ—Ä—ã:")
    for i, factor in enumerate(explanation.top_factors, 1):
        direction_icon = "üëç" if factor['direction'] == 'positive' else "üëé"
        print(f"  {i}. {direction_icon} {factor['explanation']}")
        print(f"     –ó–Ω–∞—á–µ–Ω–∏–µ: {factor['value']:.3f}, –í–∫–ª–∞–¥: {factor['contribution']:.3f}")
    
    print(f"\nüí¨ –ß–µ–ª–æ–≤–µ–∫–æ-–ø–æ–Ω—è—Ç–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ:")
    print(explanation.human_friendly)
    
    # –¢–µ—Å—Ç –±–∞—Ç—á–µ–≤–æ–≥–æ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
    print(f"\nüì¶ –¢–µ—Å—Ç –±–∞—Ç—á–µ–≤–æ–≥–æ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è...")
    test_recommendations = [
        {
            'item_id': 'restaurant_001',
            'title': '–†–µ—Å—Ç–æ—Ä–∞–Ω "–ò—Ç–∞–ª—å—è–Ω–µ—Ü"',
            'category': 'restaurant',
            'content_score': 0.85,
            'cf_score': 0.72,
            'embedding_score': 0.68,
            'price': 2500,
            'final_score': 0.75
        },
        {
            'item_id': 'cafe_002',
            'title': '–ö–æ—Ñ–µ–π–Ω—è "–ê—Ä–æ–º–∞—Ç"',
            'category': 'cafe',
            'content_score': 0.78,
            'cf_score': 0.65,
            'embedding_score': 0.71,
            'price': 800,
            'final_score': 0.71
        }
    ]
    
    batch_explanations = explainer.explain_batch_recommendations("test_pair_123", test_recommendations)
    
    print(f"–û–±—ä—è—Å–Ω–µ–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {len(batch_explanations)}")
    for i, exp in enumerate(batch_explanations, 1):
        print(f"  {i}. {exp.item_id}: {len(exp.top_factors)} —Ñ–∞–∫—Ç–æ—Ä–æ–≤")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
    explainer.save_explanations_to_history("test_pair_123", test_recommendations, batch_explanations)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤–∞–∂–Ω–æ—Å—Ç–∏ —Ñ–∏—á
    explainer.generate_feature_importance_plot("test_feature_importance.png")
    
    print("\n‚úÖ Explainability Service –≥–æ—Ç–æ–≤!")

if __name__ == "__main__":
    main()
