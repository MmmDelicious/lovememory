"""
üß™ Comprehensive Test Suite –¥–ª—è LoveMemory AI Commercial Grade System
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –Ω–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–∑ —Ñ–∞–∑ 1-3:

–§–∞–∑–∞ 1: –§—É–Ω–¥–∞–º–µ–Ω—Ç
- Personality Engine (OCEAN)
- Enhanced Synthetic Generator
- Dynamic Interests & Relationship Dynamics

–§–∞–∑–∞ 2: –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç  
- Multi-Objective Ranker
- Context Awareness Engine
- Sales-Driven XAI

–§–∞–∑–∞ 3: –ü—Ä–æ–¥—É–∫—Ç
- Shared Memory Bank
- Multi-Step Scenarios Engine
"""

import unittest
import tempfile
import os
import json
from datetime import datetime, timedelta
from unittest.mock import patch, MagicMock
import shutil

# –ò–º–ø–æ—Ä—Ç—ã —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã—Ö –º–æ–¥—É–ª–µ–π
from personality_engine import PersonalityEngine, PersonalityProfile
from enhanced_synthetic_generator import EnhancedSyntheticGenerator
from multi_objective_ranker import MultiObjectiveRanker, MultiObjectiveScore
from context_awareness_engine import ContextAwarenessEngine, CompleteContext, WeatherContext, TemporalContext
from sales_driven_xai import SalesDrivenXAI, SalesExplanation, PersonalizationInsight
from shared_memory_bank import SharedMemoryBank, SharedMemory
from multi_step_scenarios import MultiStepScenariosEngine, ScenarioType, MultiStepScenario

class TestPersonalityEngine(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è OCEAN –º–æ–¥–µ–ª–∏ –ª–∏—á–Ω–æ—Å—Ç–∏"""
    
    def setUp(self):
        self.engine = PersonalityEngine()
    
    def test_generate_personality_profile(self):
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –ª–∏—á–Ω–æ—Å—Ç–∏"""
        # –ë–µ–∑ –∞—Ä—Ö–µ—Ç–∏–ø–∞
        personality = self.engine.generate_personality_profile()
        
        self.assertIsInstance(personality, PersonalityProfile)
        self.assertGreaterEqual(personality.openness, 0)
        self.assertLessEqual(personality.openness, 1)
        self.assertGreaterEqual(personality.conscientiousness, 0)
        self.assertLessEqual(personality.conscientiousness, 1)
        
        # –° –∞—Ä—Ö–µ—Ç–∏–ø–æ–º
        art_personality = self.engine.generate_personality_profile('ArtLovers')
        self.assertGreater(art_personality.openness, 0.5)  # ArtLovers –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–º–∏
    
    def test_calculate_activity_appeal(self):
        """–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        personality = PersonalityProfile(
            openness=0.9, conscientiousness=0.5, extraversion=0.8,
            agreeableness=0.7, neuroticism=0.2
        )
        
        # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ª—é–¥–µ–π
        art_tags = ['–ñ–∏–≤–æ–ø–∏—Å—å', '–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ', '–ù–æ–≤—ã–π –æ–ø—ã—Ç']
        appeal = self.engine.calculate_activity_appeal(personality, art_tags)
        self.assertGreater(appeal, 1.0)  # –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–π
        
        # –°—Ç—Ä–µ—Å—Å–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –≤—ã—Å–æ–∫–æ–≥–æ –Ω–µ–≤—Ä–æ—Ç–∏–∑–º–∞
        stress_personality = PersonalityProfile(
            openness=0.5, conscientiousness=0.5, extraversion=0.5,
            agreeableness=0.5, neuroticism=0.9
        )
        stress_tags = ['–≠–∫—Å—Ç—Ä–∏–º', '–ê–¥—Ä–µ–Ω–∞–ª–∏–Ω', '–•–æ—Ä—Ä–æ—Ä']
        stress_appeal = self.engine.calculate_activity_appeal(stress_personality, stress_tags)
        self.assertLess(stress_appeal, 1.0)  # –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ–ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–π
    
    def test_calculate_compatibility_score(self):
        """–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ª–∏—á–Ω–æ—Å—Ç–µ–π"""
        # –°—Ö–æ–∂–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏
        person1 = PersonalityProfile(0.8, 0.7, 0.6, 0.9, 0.2)
        person2 = PersonalityProfile(0.7, 0.8, 0.5, 0.8, 0.3)
        
        compatibility = self.engine.calculate_compatibility_score(person1, person2)
        self.assertGreater(compatibility, 0.5)
        self.assertLessEqual(compatibility, 1.0)
        
        # –ü—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–µ –ª–∏—á–Ω–æ—Å—Ç–∏
        person3 = PersonalityProfile(0.1, 0.2, 0.1, 0.2, 0.9)
        low_compatibility = self.engine.calculate_compatibility_score(person1, person3)
        self.assertLess(low_compatibility, compatibility)
    
    def test_personality_description(self):
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è –ª–∏—á–Ω–æ—Å—Ç–∏"""
        personality = PersonalityProfile(0.9, 0.2, 0.1, 0.8, 0.7)
        description = self.engine.get_personality_description(personality)
        
        self.assertIn('openness', description)
        self.assertIn('conscientiousness', description)
        self.assertIn('extraversion', description)
        self.assertIn('agreeableness', description)
        self.assertIn('neuroticism', description)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–ø–∏—Å–∞–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –∑–Ω–∞—á–µ–Ω–∏—è–º
        self.assertIn('–æ—Ç–∫—Ä—ã—Ç', description['openness'].lower())  # –í—ã—Å–æ–∫–∞—è –æ—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å
        self.assertIn('–∏–Ω—Ç—Ä–æ–≤–µ—Ä—Ç', description['extraversion'].lower())  # –ù–∏–∑–∫–∞—è —ç–∫—Å—Ç—Ä–∞–≤–µ—Ä—Å–∏—è

class TestEnhancedSyntheticGenerator(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
    
    def setUp(self):
        self.generator = EnhancedSyntheticGenerator()
    
    def test_generate_enhanced_user(self):
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = self.generator.generate_enhanced_user('ArtLovers')
        
        # –ë–∞–∑–æ–≤—ã–µ –ø–æ–ª—è
        self.assertIn('id', user)
        self.assertIn('age', user)
        self.assertIn('archetype', user)
        
        # OCEAN –ª–∏—á–Ω–æ—Å—Ç—å
        self.assertIn('personality', user)
        self.assertIn('personality_description', user)
        
        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã
        self.assertIn('dynamic_interests', user)
        dynamic_interests = user['dynamic_interests']
        self.assertGreater(len(dynamic_interests), 0)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
        first_interest = list(dynamic_interests.values())[0]
        self.assertIn('intensity', first_interest)
        self.assertIn('passion_score', first_interest)
        self.assertIn('decay_rate', first_interest)
        
        # –í–µ—Ä—Å–∏—è
        self.assertEqual(user['version'], '2.0_enhanced')
    
    def test_generate_enhanced_pair(self):
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–π –ø–∞—Ä—ã"""
        user1, user2, pair = self.generator.generate_enhanced_pair()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.assertIn('personality', user1)
        self.assertIn('personality', user2)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä—É
        self.assertIn('harmony_index', pair)
        self.assertIn('personality_compatibility', pair)
        self.assertIn('relationship_state', pair)
        
        # –ì–∞—Ä–º–æ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 0-1
        self.assertGreaterEqual(pair['harmony_index'], 0)
        self.assertLessEqual(pair['harmony_index'], 1)
    
    def test_calculate_ultra_realistic_rating(self):
        """–¢–µ—Å—Ç —É–ª—å—Ç—Ä–∞—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞"""
        user = self.generator.generate_enhanced_user('Gourmets')
        
        # –ü—Ä–æ–¥—É–∫—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∏–Ω—Ç–µ—Ä–µ—Å–∞–º
        product = {
            'title': '–†–µ—Å—Ç–æ—Ä–∞–Ω –∏—Ç–∞–ª—å—è–Ω—Å–∫–æ–π –∫—É—Ö–Ω–∏',
            'category': 'restaurant',
            'price': 2000,
            'tags': ['–ò—Ç–∞–ª—å—è–Ω—Å–∫–∞—è –∫—É—Ö–Ω—è', '–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π'],
            'love_language': 'quality_time',
            'novelty': 0.5
        }
        
        rating = self.generator.calculate_ultra_realistic_rating(user, product)
        
        self.assertGreaterEqual(rating, 1.0)
        self.assertLessEqual(rating, 10.0)
        self.assertIsInstance(rating, float)
    
    def test_enhanced_dataset_generation(self):
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞"""
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–∞–ª–µ–Ω—å–∫–∏–π –¥–∞—Ç–∞—Å–µ—Ç –¥–ª—è —Ç–µ—Å—Ç–∞
        dataset = self.generator.generate_enhanced_dataset(num_pairs=5)
        
        self.assertIn('users', dataset)
        self.assertIn('pairs', dataset)
        self.assertIn('interactions', dataset)
        self.assertIn('product_catalog', dataset)
        self.assertIn('metadata', dataset)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        self.assertEqual(len(dataset['users']), 10)  # 5 –ø–∞—Ä = 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.assertEqual(len(dataset['pairs']), 5)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        metadata = dataset['metadata']
        self.assertEqual(metadata['version'], '2.0_enhanced')
        self.assertIn('personality_model', metadata)
        self.assertEqual(metadata['personality_model'], 'OCEAN_Big_Five')

class TestMultiObjectiveRanker(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è –º–Ω–æ–≥–æ—Ü–µ–ª–µ–≤–æ–≥–æ —Ä–∞–Ω–∫–µ—Ä–∞"""
    
    def setUp(self):
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        self.test_dir = tempfile.mkdtemp()
        
        # –ú–æ–∫–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        with patch('multi_objective_ranker.ContentBasedRecommender'), \
             patch('multi_objective_ranker.CollaborativeFilteringRecommender'), \
             patch('multi_objective_ranker.EmbeddingService'):
            self.ranker = MultiObjectiveRanker(self.test_dir)
    
    def tearDown(self):
        shutil.rmtree(self.test_dir)
    
    def test_calculate_relevance_score(self):
        """–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏"""
        candidate_scores = {
            'content_score': 0.8,
            'cf_score': 0.7,
            'embedding_score': 0.6
        }
        
        relevance = self.ranker.calculate_relevance_score(
            'pair_123', {'price': 2000}, candidate_scores
        )
        
        self.assertGreaterEqual(relevance, 0)
        self.assertLessEqual(relevance, 1)
        self.assertIsInstance(relevance, float)
    
    def test_calculate_novelty_score(self):
        """–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –Ω–æ–≤–∏–∑–Ω—ã"""
        item_info = {
            'title': '–ù–æ–≤–æ–µ –º–µ—Å—Ç–æ',
            'category': 'restaurant',
            'novelty': 0.8,
            'tags': ['–ù–æ–≤—ã–π', '–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π']
        }
        
        novelty = self.ranker.calculate_novelty_score('pair_123', item_info)
        
        self.assertGreaterEqual(novelty, 0)
        self.assertLessEqual(novelty, 1)
        # –ù–æ–≤–æ–µ –º–µ—Å—Ç–æ –¥–æ–ª–∂–Ω–æ –∏–º–µ—Ç—å –≤—ã—Å–æ–∫—É—é –Ω–æ–≤–∏–∑–Ω—É
        self.assertGreater(novelty, 0.5)
    
    def test_calculate_empathy_score(self):
        """–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ —ç–º–ø–∞—Ç–∏–∏"""
        item_info = {
            'title': '–°–µ–º–µ–π–Ω—ã–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω',
            'category': 'restaurant',
            'tags': ['–°–µ–º–µ–π–Ω—ã–π', '–£—é—Ç–Ω—ã–π'],
            'love_language': 'quality_time'
        }
        
        empathy = self.ranker.calculate_empathy_score('pair_123', item_info)
        
        self.assertGreaterEqual(empathy, 0)
        self.assertLessEqual(empathy, 1)
        self.assertIsInstance(empathy, float)
    
    def test_calculate_multi_objective_score(self):
        """–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –º–Ω–æ–≥–æ—Ü–µ–ª–µ–≤–æ–π –æ—Ü–µ–Ω–∫–∏"""
        item_info = {
            'title': '–¢–µ—Å—Ç–æ–≤–æ–µ –º–µ—Å—Ç–æ',
            'category': 'restaurant',
            'price': 2000,
            'tags': ['–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π'],
            'love_language': 'quality_time',
            'novelty': 0.6
        }
        
        candidate_scores = {
            'content_score': 0.8,
            'cf_score': 0.7,
            'embedding_score': 0.6
        }
        
        multi_score = self.ranker.calculate_multi_objective_score(
            'pair_123', item_info, candidate_scores
        )
        
        self.assertIsInstance(multi_score, MultiObjectiveScore)
        self.assertGreaterEqual(multi_score.relevance, 0)
        self.assertLessEqual(multi_score.relevance, 1)
        self.assertGreaterEqual(multi_score.novelty, 0)
        self.assertLessEqual(multi_score.novelty, 1)
        self.assertGreaterEqual(multi_score.empathy, 0)
        self.assertLessEqual(multi_score.empathy, 1)
        self.assertGreaterEqual(multi_score.combined, 0)
        self.assertLessEqual(multi_score.combined, 1)

class TestContextAwarenessEngine(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è –¥–≤–∏–∂–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω–æ–π –æ—Å–≤–µ–¥–æ–º–ª–µ–Ω–Ω–æ—Å—Ç–∏"""
    
    def setUp(self):
        self.engine = ContextAwarenessEngine()
    
    def test_get_temporal_context(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        # –¢–µ—Å—Ç —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
        test_time = datetime(2024, 7, 15, 14, 30)  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, –ª–µ—Ç–æ, –¥–µ–Ω—å
        context = self.engine.get_temporal_context(test_time)
        
        self.assertEqual(context.hour, 14)
        self.assertEqual(context.season, 'summer')
        self.assertEqual(context.time_of_day, 'afternoon')
        self.assertFalse(context.is_weekend)
        
        # –¢–µ—Å—Ç —Å –≤—ã—Ö–æ–¥–Ω—ã–º –¥–Ω–µ–º
        weekend_time = datetime(2024, 7, 20, 19, 0)  # –°—É–±–±–æ—Ç–∞, –≤–µ—á–µ—Ä
        weekend_context = self.engine.get_temporal_context(weekend_time)
        
        self.assertTrue(weekend_context.is_weekend)
        self.assertEqual(weekend_context.time_of_day, 'evening')
    
    def test_detect_user_mood(self):
        """–¢–µ—Å—Ç –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"""
        # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É–∫–∞–∑—ã–≤–∞—é—â–∞—è –Ω–∞ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è
        adventurous_activity = [
            {'action': 'recommendation_shown', 'product_category': 'activity'},
            {'action': 'viewed', 'product_category': 'adventure', 'price': 2000}
        ]
        
        session_data = {
            'duration_minutes': 20,
            'items_viewed': 15,
            'categories_searched': ['adventure', 'activity']
        }
        
        mood = self.engine.detect_user_mood(adventurous_activity, session_data)
        
        self.assertIn(mood.mood_type, ['adventurous', 'comfortable', 'social', 'romantic', 'budget_conscious'])
        self.assertGreaterEqual(mood.confidence, 0)
        self.assertLessEqual(mood.confidence, 1)
        self.assertIsInstance(mood.mood_factors, list)
    
    def test_get_complete_context(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        context = self.engine.get_complete_context()
        
        self.assertIsInstance(context, CompleteContext)
        self.assertIsInstance(context.weather, WeatherContext)
        self.assertIsInstance(context.temporal, TemporalContext)
        self.assertGreaterEqual(context.context_score, 0)
        self.assertLessEqual(context.context_score, 1)
    
    def test_apply_context_filters(self):
        """–¢–µ—Å—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        recommendations = [
            {
                'title': '–õ–µ—Ç–Ω—è—è —Ç–µ—Ä—Ä–∞—Å–∞',
                'category': 'restaurant',
                'price': 2000,
                'tags': ['–û—Ç–∫—Ä—ã—Ç—ã–π', '–¢–µ—Ä—Ä–∞—Å–∞'],
                'final_score': 0.8
            },
            {
                'title': '–£—é—Ç–Ω–æ–µ –∫–∞—Ñ–µ',
                'category': 'cafe',
                'price': 800,
                'tags': ['–£—é—Ç–Ω—ã–π', '–ö—Ä—ã—Ç—ã–π'],
                'final_score': 0.7
            }
        ]
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Ö–æ—Ä–æ—à–µ–π –ø–æ–≥–æ–¥–æ–π
        good_weather_context = CompleteContext(
            weather=WeatherContext(25, 'sunny', 0.5, 5, 24, True),
            temporal=TemporalContext(14, 1, 15, 7, 'summer', False, False, 'afternoon', True),
            user_mood=self.engine.detect_user_mood([], {}),
            local_events=self.engine.get_local_events_context(),
            context_score=0.8
        )
        
        enhanced_recs = self.engine.apply_context_filters(recommendations, good_weather_context)
        
        self.assertEqual(len(enhanced_recs), 2)
        for rec in enhanced_recs:
            self.assertIn('context_boosted_score', rec)
            self.assertIn('context_boost_factor', rec)
            self.assertIn('context_reasons', rec)

class TestSalesDrivenXAI(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–¥–∞—é—â–∏—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π"""
    
    def setUp(self):
        self.xai = SalesDrivenXAI()
    
    def test_extract_personalization_insights(self):
        """–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Å–∞–π—Ç–æ–≤ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏"""
        pair_data = {
            'user1_personality': {
                'openness': 0.9,
                'extraversion': 0.7,
                'agreeableness': 0.8,
                'conscientiousness': 0.5,
                'neuroticism': 0.3
            },
            'user2_personality': {
                'openness': 0.8,
                'extraversion': 0.6,
                'agreeableness': 0.9,
                'conscientiousness': 0.6,
                'neuroticism': 0.2
            },
            'user1_interests': {'–ò—Å–∫—É—Å—Å—Ç–≤–æ': 9.0, '–¢–µ–∞—Ç—Ä': 8.5},
            'user2_interests': {'–ò—Å–∫—É—Å—Å—Ç–≤–æ': 8.5, '–ú—É–∑—ã–∫–∞': 9.0},
            'harmony_index': 0.85
        }
        
        recommendation = {
            'title': '–¢–µ–∞—Ç—Ä —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏—Å–∫—É—Å—Å—Ç–≤–∞',
            'category': 'entertainment',
            'price': 1800,
            'tags': ['–ò—Å–∫—É—Å—Å—Ç–≤–æ', '–¢–µ–∞—Ç—Ä', '–ö—É–ª—å—Ç—É—Ä–∞'],
            'novelty': 0.7
        }
        
        insights = self.xai.extract_personalization_insights(pair_data, recommendation)
        
        self.assertIsInstance(insights, list)
        self.assertGreater(len(insights), 0)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏–Ω—Å–∞–π—Ç–æ–≤
        first_insight = insights[0]
        self.assertIsInstance(first_insight, PersonalizationInsight)
        self.assertIn(first_insight.insight_type, ['personality', 'interests', 'relationship', 'context'])
    
    def test_generate_sales_explanation(self):
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞—é—â–µ–≥–æ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è"""
        recommendation = {
            'title': '–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω',
            'category': 'restaurant',
            'price': 2500,
            'tags': ['–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π', '–ò–∑—ã—Å–∫–∞–Ω–Ω—ã–π'],
            'relevance_score': 0.9,
            'novelty_score': 0.4,
            'empathy_score': 0.8
        }
        
        insights = [
            PersonalizationInsight(
                insight_type='personality',
                raw_data='openness: 0.8',
                human_interpretation='–í—ã –æ—Ç–∫—Ä—ã—Ç—ã –∫ –Ω–æ–≤–æ–º—É',
                benefit_connection='–≠—Ç–æ –º–µ—Å—Ç–æ –ø–æ–¥–∞—Ä–∏—Ç –Ω–æ–≤—ã–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è',
                confidence=0.8
            )
        ]
        
        explanation = self.xai.generate_sales_explanation(recommendation, insights)
        
        self.assertIsInstance(explanation, SalesExplanation)
        self.assertIsInstance(explanation.headline, str)
        self.assertGreater(len(explanation.headline), 10)
        self.assertIsInstance(explanation.personal_benefits, list)
        self.assertGreaterEqual(len(explanation.personal_benefits), 1)
        self.assertGreaterEqual(explanation.confidence_score, 0)
        self.assertLessEqual(explanation.confidence_score, 1)
    
    def test_create_explanation_variants(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π"""
        recommendation = {
            'title': '–ö–∞—Ñ–µ',
            'category': 'cafe',
            'price': 800,
            'tags': ['–£—é—Ç–Ω—ã–π'],
            'relevance_score': 0.7
        }
        
        insights = []
        variants = self.xai.create_explanation_variants(recommendation, insights, 3)
        
        self.assertEqual(len(variants), 3)
        for variant in variants:
            self.assertIsInstance(variant, SalesExplanation)
    
    def test_format_for_frontend(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞"""
        explanation = SalesExplanation(
            headline="–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫",
            value_proposition="–¢–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ",
            personal_benefits=["–í—ã–≥–æ–¥–∞ 1", "–í—ã–≥–æ–¥–∞ 2"],
            social_proof="–°–æ—Ü–∏–∞–ª—å–Ω–æ–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ",
            urgency_factor="–°—Ä–æ—á–Ω–æ—Å—Ç—å",
            confidence_score=0.85,
            technical_backup={}
        )
        
        formatted = self.xai.format_for_frontend(explanation)
        
        self.assertIn('explanation', formatted)
        self.assertIn('metadata', formatted)
        self.assertEqual(formatted['explanation']['confidence'], 85)

class TestSharedMemoryBank(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è –±–∞–Ω–∫–∞ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    
    def setUp(self):
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ë–î –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        self.test_db = tempfile.mktemp(suffix='.db')
        self.memory_bank = SharedMemoryBank(self.test_db)
    
    def tearDown(self):
        if os.path.exists(self.test_db):
            os.remove(self.test_db)
    
    def test_save_memory(self):
        """–¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        memory = self.memory_bank.save_memory(
            pair_id='test_pair',
            recommendation_id='rec_001',
            place_title='–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω',
            place_category='restaurant',
            visit_date=datetime.now(),
            joint_rating=8.5,
            photos=['photo1.jpg'],
            notes='–û—Ç–ª–∏—á–Ω–æ–µ –º–µ—Å—Ç–æ!',
            happiness_level=5
        )
        
        self.assertIsInstance(memory, SharedMemory)
        self.assertEqual(memory.pair_id, 'test_pair')
        self.assertEqual(memory.place_title, '–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω')
        self.assertEqual(memory.joint_rating, 8.5)
        self.assertGreater(memory.memory_strength, 0)
    
    def test_get_memories(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π
        for i in range(3):
            self.memory_bank.save_memory(
                pair_id='test_pair',
                recommendation_id=f'rec_{i}',
                place_title=f'–ú–µ—Å—Ç–æ {i}',
                place_category='restaurant',
                visit_date=datetime.now() - timedelta(days=i),
                joint_rating=7.0 + i,
                happiness_level=3 + i
            )
        
        memories = self.memory_bank.get_memories('test_pair')
        
        self.assertEqual(len(memories), 3)
        self.assertIsInstance(memories[0], SharedMemory)
        
        # –¢–µ—Å—Ç —Å –ª–∏–º–∏—Ç–æ–º
        limited_memories = self.memory_bank.get_memories('test_pair', limit=2)
        self.assertEqual(len(limited_memories), 2)
    
    def test_get_memory_analytics(self):
        """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        categories = ['restaurant', 'cafe', 'entertainment']
        for i, category in enumerate(categories):
            self.memory_bank.save_memory(
                pair_id='test_pair',
                recommendation_id=f'rec_{i}',
                place_title=f'–ú–µ—Å—Ç–æ {category}',
                place_category=category,
                visit_date=datetime.now() - timedelta(days=i),
                joint_rating=7.0 + i,
                happiness_level=4
            )
        
        analytics = self.memory_bank.get_memory_analytics('test_pair')
        
        self.assertEqual(analytics.total_memories, 3)
        self.assertGreater(analytics.avg_rating, 0)
        self.assertIsInstance(analytics.favorite_categories, list)
        self.assertIsInstance(analytics.ai_insights, list)
    
    def test_get_memory_based_recommendations(self):
        """–¢–µ—Å—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞–º—è—Ç–∏"""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ö–æ—Ä–æ—à–µ–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        self.memory_bank.save_memory(
            pair_id='test_pair',
            recommendation_id='rec_001',
            place_title='–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω',
            place_category='restaurant',
            visit_date=datetime.now(),
            joint_rating=9.5,
            happiness_level=5,
            relationship_impact='transformative'
        )
        
        recommendations = self.memory_bank.get_memory_based_recommendations('test_pair')
        
        self.assertIsInstance(recommendations, list)
        if recommendations:  # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            self.assertGreater(len(recommendations), 0)
            first_rec = recommendations[0]
            self.assertIn('recommended_place', first_rec.__dict__)
            self.assertIn('reason', first_rec.__dict__)

class TestMultiStepScenariosEngine(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è –¥–≤–∏–∂–∫–∞ –º–Ω–æ–≥–æ—à–∞–≥–æ–≤—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
    
    def setUp(self):
        # –ú–æ–∫–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        with patch('multi_step_scenarios.MultiObjectiveRanker'), \
             patch('multi_step_scenarios.ContextAwarenessEngine'):
            self.scenarios_engine = MultiStepScenariosEngine()
    
    def test_determine_optimal_scenario_type(self):
        """–¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ç–∏–ø–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è"""
        # –ú–æ–∫–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        mock_context = MagicMock()
        mock_context.weather.condition = 'sunny'
        mock_context.weather.is_good_weather = True
        mock_context.user_mood.mood_type = 'adventurous'
        
        scenario_type = self.scenarios_engine._determine_optimal_scenario_type(
            'pair_123', mock_context
        )
        
        self.assertIsInstance(scenario_type, ScenarioType)
    
    @patch('multi_step_scenarios.MultiStepScenariosEngine._get_candidates_for_pair')
    def test_generate_scenario(self, mock_get_candidates):
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è"""
        # –ú–æ–∫–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
        mock_candidates = [
            {
                'item_id': 'place1',
                'title': '–ö–∞—Ñ–µ',
                'category': 'cafe',
                'price': 800,
                'tags': ['–£—é—Ç–Ω—ã–π'],
                'love_language': 'quality_time',
                'novelty': 0.3,
                'content_score': 0.7,
                'cf_score': 0.6,
                'embedding_score': 0.5
            },
            {
                'item_id': 'place2',
                'title': '–†–µ—Å—Ç–æ—Ä–∞–Ω',
                'category': 'restaurant',
                'price': 2000,
                'tags': ['–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π'],
                'love_language': 'quality_time',
                'novelty': 0.5,
                'content_score': 0.8,
                'cf_score': 0.7,
                'embedding_score': 0.6
            }
        ]
        mock_get_candidates.return_value = mock_candidates
        
        scenario = self.scenarios_engine.generate_scenario(
            pair_id='test_pair',
            scenario_type=ScenarioType.ROMANTIC_EVENING
        )
        
        self.assertIsInstance(scenario, MultiStepScenario)
        self.assertEqual(scenario.scenario_type, ScenarioType.ROMANTIC_EVENING)
        self.assertGreater(len(scenario.steps), 0)
        self.assertGreater(scenario.total_duration, 0)
        self.assertIsInstance(scenario.preparation_tips, list)
    
    def test_create_scenario_variants(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
        with patch.object(self.scenarios_engine, 'generate_scenario') as mock_generate:
            # –ú–æ–∫–∞–µ–º –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
            mock_scenario = MagicMock()
            mock_scenario.title = "–¢–µ—Å—Ç–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π"
            mock_generate.return_value = mock_scenario
            
            variants = self.scenarios_engine.create_scenario_variants(
                'test_pair', ScenarioType.ADVENTURE_DAY
            )
            
            self.assertEqual(len(variants), 3)
            self.assertEqual(mock_generate.call_count, 3)
    
    def test_export_scenario_for_mobile(self):
        """–¢–µ—Å—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ"""
        # –°–æ–∑–¥–∞–µ–º mock —Å—Ü–µ–Ω–∞—Ä–∏–π
        from multi_step_scenarios import ScenarioStep, StepType
        
        mock_step = ScenarioStep(
            step_id='step1',
            step_type=StepType.START,
            place_title='–ö–∞—Ñ–µ',
            place_category='cafe',
            estimated_duration=60,
            estimated_cost=800,
            description='–ù–∞—á–∞–ª–æ –¥–Ω—è',
            timing_suggestion='12:00',
            transportation='–ø–µ—à–∫–æ–º',
            walking_time=10,
            booking_required=False,
            dress_code=None,
            weather_dependent=False,
            tips=['–°–æ–≤–µ—Ç 1'],
            why_this_step='–ü–æ—Ç–æ–º—É —á—Ç–æ',
            alternative_options=['–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞']
        )
        
        mock_scenario = MultiStepScenario(
            scenario_id='scenario1',
            scenario_type=ScenarioType.ROMANTIC_EVENING,
            title='–¢–µ—Å—Ç',
            subtitle='–ü–æ–¥—Ç–µ—Å—Ç',
            total_duration=180,
            total_cost_estimate=(1000, 2000),
            steps=[mock_step],
            best_time_of_day='evening',
            best_weather=['sunny'],
            difficulty_level=2,
            romance_level=5,
            adventure_level=2,
            created_for_pair='pair123',
            personality_match_score=0.8,
            context_match_score=0.7,
            preparation_tips=['–°–æ–≤–µ—Ç'],
            contingency_plans=['–ü–ª–∞–Ω –ë'],
            memory_triggers=['–¢—Ä–∏–≥–≥–µ—Ä'],
            created_at=datetime.now()
        )
        
        mobile_export = self.scenarios_engine.export_scenario_for_mobile(mock_scenario)
        
        self.assertIn('scenario_id', mobile_export)
        self.assertIn('steps', mobile_export)
        self.assertIn('preparation', mobile_export)
        self.assertIn('metadata', mobile_export)
        self.assertEqual(len(mobile_export['steps']), 1)

class TestIntegration(unittest.TestCase):
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã —Å–∏—Å—Ç–µ–º—ã"""
    
    def test_full_pipeline_integration(self):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ –æ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
        # 1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º enhanced –¥–∞–Ω–Ω—ã—Ö
        generator = EnhancedSyntheticGenerator()
        test_user = generator.generate_enhanced_user('ArtLovers')
        
        # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º personality engine
        personality_engine = PersonalityEngine()
        personality = PersonalityProfile.from_dict(test_user['personality'])
        
        # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º context awareness
        context_engine = ContextAwarenessEngine()
        context = context_engine.get_complete_context()
        
        # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º sales XAI
        xai = SalesDrivenXAI()
        test_recommendation = {
            'title': '–¢–µ—Å—Ç–æ–≤–æ–µ –º–µ—Å—Ç–æ',
            'category': 'restaurant',
            'price': 2000,
            'tags': ['–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π']
        }
        
        insights = xai.extract_personalization_insights(
            {'user1_personality': personality.to_dict()}, 
            test_recommendation
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –≤–º–µ—Å—Ç–µ
        self.assertIsInstance(test_user, dict)
        self.assertIsInstance(personality, PersonalityProfile)
        self.assertIsInstance(context, CompleteContext)
        self.assertIsInstance(insights, list)
        
        print("‚úÖ –ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

def run_comprehensive_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –æ—Ç—á–µ—Ç–æ–º"""
    print("üß™ –ó–∞–ø—É—Å–∫ Comprehensive Test Suite –¥–ª—è LoveMemory AI")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º test suite
    test_classes = [
        TestPersonalityEngine,
        TestEnhancedSyntheticGenerator,
        TestMultiObjectiveRanker,
        TestContextAwarenessEngine,
        TestSalesDrivenXAI,
        TestSharedMemoryBank,
        TestMultiStepScenariosEngine,
        TestIntegration
    ]
    
    total_tests = 0
    passed_tests = 0
    failed_tests = 0
    
    for test_class in test_classes:
        print(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º {test_class.__name__}...")
        
        suite = unittest.TestLoader().loadTestsFromTestCase(test_class)
        runner = unittest.TextTestRunner(verbosity=0, stream=open(os.devnull, 'w'))
        result = runner.run(suite)
        
        class_total = result.testsRun
        class_failed = len(result.failures) + len(result.errors)
        class_passed = class_total - class_failed
        
        total_tests += class_total
        passed_tests += class_passed
        failed_tests += class_failed
        
        print(f"  ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {class_passed}/{class_total}")
        if class_failed > 0:
            print(f"  ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {class_failed}")
            for failure in result.failures:
                print(f"    FAIL: {failure[0]}")
            for error in result.errors:
                print(f"    ERROR: {error[0]}")
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print(f"\n" + "=" * 60)
    print(f"üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print(f"=" * 60)
    print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed_tests}")
    print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(passed_tests/total_tests)*100:.1f}%")
    
    if failed_tests == 0:
        print(f"\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print(f"‚úÖ Commercial Grade —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ production")
    else:
        print(f"\n‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã - —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞")
    
    # –ü–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    print(f"\nüìã –ü–û–ö–†–´–¢–ò–ï –ö–û–ú–ü–û–ù–ï–ù–¢–û–í:")
    components = [
        "‚úÖ Personality Engine (OCEAN)",
        "‚úÖ Enhanced Synthetic Generator",
        "‚úÖ Multi-Objective Ranker",
        "‚úÖ Context Awareness Engine", 
        "‚úÖ Sales-Driven XAI",
        "‚úÖ Shared Memory Bank",
        "‚úÖ Multi-Step Scenarios Engine",
        "‚úÖ Integration Pipeline"
    ]
    
    for component in components:
        print(f"  {component}")
    
    print(f"\nüöÄ LoveMemory AI Commercial Grade —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞!")
    
    return failed_tests == 0

if __name__ == "__main__":
    success = run_comprehensive_tests()
    if not success:
        exit(1)
