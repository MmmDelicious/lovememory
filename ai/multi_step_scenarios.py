"""
üó∫Ô∏è Multi-Step Scenarios Engine –¥–ª—è LoveMemory AI
–§–∞–∑–∞ 3.2: –ú–Ω–æ–≥–æ—à–∞–≥–æ–≤—ã–µ –°—Ü–µ–Ω–∞—Ä–∏–∏ ("–ú–∏—Å—Å–∏–∏")

–ü—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Å—Ç—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –º–µ—Å—Ç –≤ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Å–≤–∏–¥–∞–Ω–∏–π.
–ù–µ –ø—Ä–æ—Å—Ç–æ "–∏–¥–∏—Ç–µ –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω", –∞ –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å/–≤–µ—á–µ—Ä.

–≠—Ç–æ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –ø—Ä–æ–¥—É–∫—Ç –∏–∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—è –≤ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å–≤–∏–¥–∞–Ω–∏–π.
"""

import json
import random
from datetime import datetime, timedelta
from typing import Dict, List, Tuple, Optional, Any
from dataclasses import dataclass, asdict
from enum import Enum
import uuid

from multi_objective_ranker import MultiObjectiveRanker
from context_awareness_engine import CompleteContext, ContextAwarenessEngine

class ScenarioType(Enum):
    """–¢–∏–ø—ã —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
    ROMANTIC_EVENING = "romantic_evening"
    ADVENTURE_DAY = "adventure_day"
    CULTURAL_IMMERSION = "cultural_immersion"
    COMFORT_ZONE = "comfort_zone"
    DISCOVERY_JOURNEY = "discovery_journey"
    CELEBRATION = "celebration"

class StepType(Enum):
    """–¢–∏–ø—ã —à–∞–≥–æ–≤ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏"""
    START = "start"  # –ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞
    MAIN = "main"    # –û—Å–Ω–æ–≤–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    TRANSITION = "transition"  # –ü–µ—Ä–µ—Ö–æ–¥ –º–µ–∂–¥—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º–∏
    FINALE = "finale"  # –ó–∞–≤–µ—Ä—à–∞—é—â–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    OPTIONAL = "optional"  # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å

@dataclass
class ScenarioStep:
    """–û–¥–∏–Ω —à–∞–≥ –≤ –º–Ω–æ–≥–æ—à–∞–≥–æ–≤–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏"""
    step_id: str
    step_type: StepType
    place_title: str
    place_category: str
    estimated_duration: int  # –í –º–∏–Ω—É—Ç–∞—Ö
    estimated_cost: int  # –í —Ä—É–±–ª—è—Ö
    description: str
    timing_suggestion: str  # "12:00", "–ø–æ—Å–ª–µ –æ–±–µ–¥–∞", "–∫–æ–≥–¥–∞ –ø—Ä–æ–≥–æ–ª–æ–¥–∞–µ—Ç–µ—Å—å"
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    transportation: str  # "–ø–µ—à–∫–æ–º", "–Ω–∞ —Ç–∞–∫—Å–∏", "–Ω–∞ –º–µ—Ç—Ä–æ"
    walking_time: int  # –í –º–∏–Ω—É—Ç–∞—Ö –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—Ç–∞
    
    # –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã
    booking_required: bool
    dress_code: Optional[str]
    weather_dependent: bool
    tips: List[str]  # –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã
    
    # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è
    why_this_step: str  # –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞
    alternative_options: List[str]  # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –Ω–∞ —Å–ª—É—á–∞–π –ø—Ä–æ–±–ª–µ–º
    
    def to_dict(self) -> Dict[str, Any]:
        result = asdict(self)
        result['step_type'] = self.step_type.value
        return result

@dataclass 
class MultiStepScenario:
    """–ü–æ–ª–Ω—ã–π –º–Ω–æ–≥–æ—à–∞–≥–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π"""
    scenario_id: str
    scenario_type: ScenarioType
    title: str
    subtitle: str
    total_duration: int  # –í –º–∏–Ω—É—Ç–∞—Ö
    total_cost_estimate: Tuple[int, int]  # (min, max)
    
    steps: List[ScenarioStep]
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    best_time_of_day: str
    best_weather: List[str]
    difficulty_level: int  # 1-5 (—Å–ª–æ–∂–Ω–æ—Å—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è)
    romance_level: int  # 1-5
    adventure_level: int  # 1-5
    
    # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è
    created_for_pair: str  # ID –ø–∞—Ä—ã
    personality_match_score: float  # –ù–∞—Å–∫–æ–ª—å–∫–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–∞—Ä–µ
    context_match_score: float  # –ù–∞—Å–∫–æ–ª—å–∫–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –º–æ–º–µ–Ω—Ç—É
    
    # –ü–æ–¥—Å–∫–∞–∑–∫–∏
    preparation_tips: List[str]
    contingency_plans: List[str]  # –ü–ª–∞–Ω—ã –ë
    memory_triggers: List[str]  # –ß—Ç–æ –º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å –º–æ–º–µ–Ω—Ç –æ—Å–æ–±–µ–Ω–Ω—ã–º
    
    created_at: datetime
    
    def to_dict(self) -> Dict[str, Any]:
        result = asdict(self)
        result['scenario_type'] = self.scenario_type.value
        result['steps'] = [step.to_dict() for step in self.steps]
        result['created_at'] = self.created_at.isoformat()
        return result

class MultiStepScenariosEngine:
    """
    –î–≤–∏–∂–æ–∫ –º–Ω–æ–≥–æ—à–∞–≥–æ–≤—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
    
    –°–æ–∑–¥–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω—ã —Å–≤–∏–¥–∞–Ω–∏–π –∏–∑ 3-5 –ª–æ–≥–∏—á–µ—Å–∫–∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π.
    –ö–∞–∂–¥—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π - —ç—Ç–æ –≥–æ—Ç–æ–≤–∞—è –∏—Å—Ç–æ—Ä–∏—è —Å —Ç–∞–π–º–∏–Ω–≥, –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –∏ —Å–æ–≤–µ—Ç–∞–º–∏.
    """
    
    def __init__(self, data_path: str = 'data/synthetic_v2_enhanced'):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–∏–∂–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
        
        Args:
            data_path: –ü—É—Ç—å –∫ –¥–∞–Ω–Ω—ã–º
        """
        self.data_path = data_path
        
        # –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.ranker = MultiObjectiveRanker(data_path)
        self.context_engine = ContextAwarenessEngine()
        
        # –®–∞–±–ª–æ–Ω—ã —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
        self.scenario_templates = self._init_scenario_templates()
        
        # –ü—Ä–∞–≤–∏–ª–∞ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
        self.composition_rules = self._init_composition_rules()
        
        # –ë–∞–Ω–∫ –ø–µ—Ä–µ—Ö–æ–¥–Ω—ã—Ö —Ñ—Ä–∞–∑
        self.transition_phrases = self._init_transition_phrases()
        
        print("üó∫Ô∏è Multi-Step Scenarios Engine –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _init_scenario_templates(self) -> Dict[ScenarioType, Dict]:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —à–∞–±–ª–æ–Ω—ã —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
        return {
            ScenarioType.ROMANTIC_EVENING: {
                'titles': [
                    "–ò–¥–µ–∞–ª—å–Ω—ã–π —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –≤–µ—á–µ—Ä",
                    "–í–µ—á–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø–æ–º–Ω–∏—Ç—Å—è –Ω–∞–≤—Å–µ–≥–¥–∞",
                    "–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –æ–¥–∏—Å—Å–µ—è –ø–æ –≥–æ—Ä–æ–¥—É",
                    "–°–≤–∏–¥–∞–Ω–∏–µ –º–µ—á—Ç—ã"
                ],
                'subtitles': [
                    "–û—Ç –∑–∞–∫–∞—Ç–∞ –¥–æ –∑–≤–µ–∑–¥ ‚Äî –∫–∞–∂–¥–∞—è –º–∏–Ω—É—Ç–∞ –±—É–¥–µ—Ç –æ—Å–æ–±–µ–Ω–Ω–æ–π",
                    "–°–æ–∑–¥–∞–π—Ç–µ –∏—Å—Ç–æ—Ä–∏—é –ª—é–±–≤–∏, –∫–æ—Ç–æ—Ä—É—é —Ä–∞—Å—Å–∫–∞–∂–µ—Ç–µ –≤–Ω—É–∫–∞–º",
                    "–†–æ–º–∞–Ω—Ç–∏–∫–∞ –≤ –∫–∞–∂–¥–æ–π –¥–µ—Ç–∞–ª–∏ –≤–∞—à–µ–≥–æ –≤–µ—á–µ—Ä–∞"
                ],
                'preferred_categories': ['restaurant', 'cafe', 'bar', 'activity'],
                'required_steps': [StepType.START, StepType.MAIN, StepType.FINALE],
                'optimal_duration': (180, 300),  # 3-5 —á–∞—Å–æ–≤
                'best_times': ['evening'],
                'romance_level': 5
            },
            
            ScenarioType.ADVENTURE_DAY: {
                'titles': [
                    "–î–µ–Ω—å –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è –¥–≤–æ–∏—Ö",
                    "–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–∏ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –¥–Ω—è",
                    "–ê–∫—Ç–∏–≤–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –ø–æ –≥–æ—Ä–æ–¥—É",
                    "–ê–¥—Ä–µ–Ω–∞–ª–∏–Ω –∏ —ç–º–æ—Ü–∏–∏"
                ],
                'subtitles': [
                    "–û—Ç–∫—Ä–æ–π—Ç–µ –≥–æ—Ä–æ–¥ —Å –Ω–æ–≤–æ–π —Å—Ç–æ—Ä–æ–Ω—ã –≤–º–µ—Å—Ç–µ",
                    "–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Å–±–ª–∏–∑—è—Ç –≤–∞—Å –µ—â–µ –±–æ–ª—å—à–µ",
                    "–ê–∫—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å –ø–æ–ª–Ω—ã–π –æ—Ç–∫—Ä—ã—Ç–∏–π"
                ],
                'preferred_categories': ['activity', 'entertainment', 'cafe'],
                'required_steps': [StepType.START, StepType.MAIN, StepType.MAIN, StepType.FINALE],
                'optimal_duration': (240, 480),  # 4-8 —á–∞—Å–æ–≤
                'best_times': ['morning', 'afternoon'],
                'adventure_level': 5
            },
            
            ScenarioType.CULTURAL_IMMERSION: {
                'titles': [
                    "–ö—É–ª—å—Ç—É—Ä–Ω–æ–µ –ø–æ–≥—Ä—É–∂–µ–Ω–∏–µ",
                    "–ò—Å–∫—É—Å—Å—Ç–≤–æ –∏ —ç—Å—Ç–µ—Ç–∏–∫–∞",
                    "–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–≤–∏–¥–∞–Ω–∏–µ",
                    "–í –ø–æ–∏—Å–∫–∞—Ö –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–≥–æ"
                ],
                'subtitles': [
                    "–ù–∞—Å–ª–∞–¥–∏—Ç–µ—Å—å –∏—Å–∫—É—Å—Å—Ç–≤–æ–º –∏ –∫—É–ª—å—Ç—É—Ä–æ–π –≤–º–µ—Å—Ç–µ",
                    "–û—Ç–∫—Ä–æ–π—Ç–µ –Ω–æ–≤—ã–µ –≥—Ä–∞–Ω–∏ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞",
                    "–≠—Å—Ç–µ—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞—Å–ª–∞–∂–¥–µ–Ω–∏–µ –¥–ª—è –¥—É—à–∏"
                ],
                'preferred_categories': ['entertainment', 'cafe', 'restaurant'],
                'required_steps': [StepType.START, StepType.MAIN, StepType.TRANSITION, StepType.FINALE],
                'optimal_duration': (180, 360),  # 3-6 —á–∞—Å–æ–≤
                'best_times': ['afternoon', 'evening'],
                'romance_level': 4
            },
            
            ScenarioType.COMFORT_ZONE: {
                'titles': [
                    "–£—é—Ç–Ω—ã–π –¥–µ–Ω—å –≤–º–µ—Å—Ç–µ",
                    "–ö–æ–º—Ñ–æ—Ä—Ç –∏ —Ç–µ–ø–ª–æ –¥–ª—è –¥–≤–æ–∏—Ö",
                    "–°–ø–æ–∫–æ–π–Ω–æ–µ –Ω–∞—Å–ª–∞–∂–¥–µ–Ω–∏–µ",
                    "–†–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ –∏ –±–ª–∏–∑–æ—Å—Ç—å"
                ],
                'subtitles': [
                    "–ò–Ω–æ–≥–¥–∞ –ª—É—á—à–∏–π –¥–µ–Ω—å ‚Äî —ç—Ç–æ –ø—Ä–æ—Å—Ç—ã–µ —Ä–∞–¥–æ—Å—Ç–∏",
                    "–ù–∞–π–¥–∏—Ç–µ —Å—á–∞—Å—Ç—å–µ –≤ –æ–±—ã—á–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–∞—Ö",
                    "–£—é—Ç –∏ –ø–æ–∫–æ–π –≤ –∫–æ–º–ø–∞–Ω–∏–∏ –ª—é–±–∏–º–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞"
                ],
                'preferred_categories': ['cafe', 'restaurant', 'activity'],
                'required_steps': [StepType.START, StepType.MAIN, StepType.FINALE],
                'optimal_duration': (120, 240),  # 2-4 —á–∞—Å–∞
                'best_times': ['morning', 'afternoon'],
                'romance_level': 3
            },
            
            ScenarioType.DISCOVERY_JOURNEY: {
                'titles': [
                    "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –æ—Ç–∫—Ä—ã—Ç–∏–π",
                    "–ù–æ–≤—ã–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç—ã –¥–ª—è –ø–∞—Ä—ã",
                    "–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ–∏–∑–≤–µ–¥–∞–Ω–Ω–æ–≥–æ",
                    "–û—Ç–∫—Ä—ã–≤–∞—è –≥–æ—Ä–æ–¥ –∑–∞–Ω–æ–≤–æ"
                ],
                'subtitles': [
                    "–ö–∞–∂–¥—ã–π —à–∞–≥ ‚Äî –Ω–æ–≤–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ",
                    "–ü–æ–∑–Ω–∞–≤–∞–π—Ç–µ –º–∏—Ä –∏ –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ",
                    "–ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ª—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–µ—Ä–¥–µ—Ü"
                ],
                'preferred_categories': ['activity', 'entertainment', 'cafe', 'restaurant'],
                'required_steps': [StepType.START, StepType.MAIN, StepType.OPTIONAL, StepType.FINALE],
                'optimal_duration': (300, 420),  # 5-7 —á–∞—Å–æ–≤
                'best_times': ['morning', 'afternoon'],
                'adventure_level': 4
            },
            
            ScenarioType.CELEBRATION: {
                'titles': [
                    "–û—Å–æ–±–µ–Ω–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –æ—Å–æ–±–µ–Ω–Ω–æ–≥–æ –ø–æ–≤–æ–¥–∞",
                    "–ü—Ä–∞–∑–¥–Ω–∏–∫ –¥–ª—è –¥–≤–æ–∏—Ö",
                    "–¢–æ—Ä–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–µ—á–µ—Ä",
                    "–û—Ç–º–µ—á–∞–µ–º –≤–∞–∂–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ"
                ],
                'subtitles': [
                    "–°–¥–µ–ª–∞–π—Ç–µ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–º",
                    "–ü—Ä–∞–∑–¥–Ω–∏–∫, –¥–æ—Å—Ç–æ–π–Ω—ã–π –≤–∞—à–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π",
                    "–ö–∞–∂–¥–∞—è –¥–µ—Ç–∞–ª—å ‚Äî –¥–ª—è –≤–∞—à–µ–≥–æ —Ç–æ—Ä–∂–µ—Å—Ç–≤–∞"
                ],
                'preferred_categories': ['restaurant', 'entertainment', 'gift', 'bar'],
                'required_steps': [StepType.START, StepType.MAIN, StepType.FINALE],
                'optimal_duration': (180, 360),  # 3-6 —á–∞—Å–æ–≤
                'best_times': ['evening'],
                'romance_level': 5
            }
        }
    
    def _init_composition_rules(self) -> Dict[str, Any]:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
        return {
            # –õ–æ–≥–∏—á–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
            'category_flows': {
                'cafe': ['restaurant', 'entertainment', 'activity', 'bar'],
                'restaurant': ['bar', 'entertainment', 'activity'],
                'entertainment': ['cafe', 'bar', 'restaurant'],
                'activity': ['cafe', 'restaurant', 'bar'],
                'bar': ['restaurant'],  # –û–±—ã—á–Ω–æ —Ñ–∏–Ω–∞–ª
            },
            
            # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
            'timing_rules': {
                'morning': ['cafe', 'activity'],
                'afternoon': ['restaurant', 'entertainment', 'activity', 'cafe'],
                'evening': ['restaurant', 'bar', 'entertainment'],
                'night': ['bar']
            },
            
            # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –ª–æ–∫–∞—Ü–∏—è–º–∏ (–≤ –∫–º)
            'max_distances': {
                'walking': 1.5,
                'short_ride': 5.0,
                'long_ride': 15.0
            },
            
            # –ë—é–¥–∂–µ—Ç–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞
            'budget_distribution': {
                'start': 0.2,     # 20% –±—é–¥–∂–µ—Ç–∞ –Ω–∞ –Ω–∞—á–∞–ª–æ
                'main': 0.5,      # 50% –Ω–∞ –æ—Å–Ω–æ–≤–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                'finale': 0.3     # 30% –Ω–∞ —Ñ–∏–Ω–∞–ª
            }
        }
    
    def _init_transition_phrases(self) -> Dict[str, List[str]]:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–Ω–∫ –ø–µ—Ä–µ—Ö–æ–¥–Ω—ã—Ö —Ñ—Ä–∞–∑"""
        return {
            'time_based': [
                "–ü–æ—Å–ª–µ –ø—Ä–∏—è—Ç–Ω–æ–≥–æ –Ω–∞—á–∞–ª–∞",
                "–ö–æ–≥–¥–∞ –∞–ø–ø–µ—Ç–∏—Ç —Ä–∞–∑—ã–≥—Ä–∞–µ—Ç—Å—è",
                "–ü–æ—Å–ª–µ –∞–∫—Ç–∏–≤–Ω–æ–π —á–∞—Å—Ç–∏ –¥–Ω—è",
                "–ö–æ–≥–¥–∞ —Å–æ–ª–Ω—Ü–µ –Ω–∞—á–Ω–µ—Ç —Å–∞–¥–∏—Ç—å—Å—è",
                "–í –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–Ω—è"
            ],
            'mood_based': [
                "–ß—Ç–æ–±—ã —Å–º–µ–Ω–∏—Ç—å –æ–±—Å—Ç–∞–Ω–æ–≤–∫—É",
                "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Å–æ–±–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è",
                "–î–æ–±–∞–≤–∏–≤ –Ω–æ—Ç–∫—É —Ä–æ–º–∞–Ω—Ç–∏–∫–∏",
                "–ß—Ç–æ–±—ã —É—Å–∏–ª–∏—Ç—å –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è",
                "–ü—Ä–æ–¥–æ–ª–∂–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä—É"
            ],
            'practical': [
                "–í 10 –º–∏–Ω—É—Ç–∞—Ö —Ö–æ–¥—å–±—ã",
                "–ù–µ–¥–∞–ª–µ–∫–æ –æ—Ç—Å—é–¥–∞",
                "–ü–æ –ø—É—Ç–∏ –≤–∞—Å –∂–¥–µ—Ç",
                "–°–ª–µ–¥—É—é—â–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞",
                "–ó–∞–≤–µ—Ä—à–∞—é—â–∏–π –∞–∫–∫–æ—Ä–¥"
            ],
            'emotional': [
                "–ß—Ç–æ–±—ã –∑–∞–ø–µ—á–∞—Ç–ª–µ—Ç—å —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç",
                "–°–æ–∑–¥–∞–≤–∞—è –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è",
                "–î–æ–±–∞–≤–ª—è—è –º–∞–≥–∏–∏ –≤ –¥–µ–Ω—å",
                "–î–ª—è –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è",
                "–ß—Ç–æ–±—ã –¥–µ–Ω—å —Å—Ç–∞–ª –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–º"
            ]
        }
    
    def generate_scenario(self, pair_id: str, 
                         scenario_type: Optional[ScenarioType] = None,
                         context: Optional[CompleteContext] = None,
                         budget_range: Tuple[int, int] = (1000, 5000),
                         duration_hours: int = 4) -> MultiStepScenario:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–Ω–æ–≥–æ—à–∞–≥–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –ø–∞—Ä—ã
        
        Args:
            pair_id: ID –ø–∞—Ä—ã
            scenario_type: –¢–∏–ø —Å—Ü–µ–Ω–∞—Ä–∏—è (–µ—Å–ª–∏ None, –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            budget_range: –î–∏–∞–ø–∞–∑–æ–Ω –±—é–¥–∂–µ—Ç–∞
            duration_hours: –ñ–µ–ª–∞–µ–º–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —á–∞—Å–∞—Ö
            
        Returns:
            –ü–æ–ª–Ω—ã–π –º–Ω–æ–≥–æ—à–∞–≥–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
        """
        print(f"üó∫Ô∏è –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–Ω–æ–≥–æ—à–∞–≥–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –ø–∞—Ä—ã {pair_id}...")
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä —Ç–∏–ø–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
        if scenario_type is None:
            scenario_type = self._determine_optimal_scenario_type(pair_id, context)
        
        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω —Å—Ü–µ–Ω–∞—Ä–∏—è
        template = self.scenario_templates[scenario_type]
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞
        candidates = self._get_scenario_candidates(pair_id, scenario_type, budget_range)
        
        # –ö–æ–º–ø–æ–Ω—É–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç
        selected_places = self._compose_optimal_route(candidates, template, duration_hours * 60)
        
        # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —à–∞–≥–∏
        steps = self._create_detailed_steps(selected_places, scenario_type, context)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏—è
        scenario_metadata = self._generate_scenario_metadata(
            pair_id, scenario_type, steps, template, context
        )
        
        # –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
        scenario = MultiStepScenario(
            scenario_id=str(uuid.uuid4()),
            scenario_type=scenario_type,
            title=random.choice(template['titles']),
            subtitle=random.choice(template['subtitles']),
            total_duration=sum(step.estimated_duration for step in steps),
            total_cost_estimate=(
                sum(step.estimated_cost for step in steps) - 500,
                sum(step.estimated_cost for step in steps) + 500
            ),
            steps=steps,
            **scenario_metadata,
            created_for_pair=pair_id,
            created_at=datetime.now()
        )
        
        print(f"‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π —Å–æ–∑–¥–∞–Ω: {scenario.title} ({len(scenario.steps)} —à–∞–≥–æ–≤)")
        return scenario
    
    def _determine_optimal_scenario_type(self, pair_id: str, 
                                       context: Optional[CompleteContext]) -> ScenarioType:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ç–∏–ø —Å—Ü–µ–Ω–∞—Ä–∏—è –¥–ª—è –ø–∞—Ä—ã"""
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        if context:
            # –ü–æ–≥–æ–¥–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
            if context.weather.condition == 'rainy':
                return ScenarioType.COMFORT_ZONE
            elif context.weather.is_good_weather:
                return ScenarioType.ADVENTURE_DAY
            
            # –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if context.user_mood.mood_type == 'adventurous':
                return ScenarioType.DISCOVERY_JOURNEY
            elif context.user_mood.mood_type == 'romantic':
                return ScenarioType.ROMANTIC_EVENING
            elif context.user_mood.mood_type == 'comfortable':
                return ScenarioType.COMFORT_ZONE
            
            # –í—Ä–µ–º–µ–Ω–Ω–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            if context.temporal.is_weekend and context.temporal.time_of_day == 'evening':
                return ScenarioType.ROMANTIC_EVENING
            elif context.temporal.is_weekend and context.temporal.time_of_day in ['morning', 'afternoon']:
                return ScenarioType.ADVENTURE_DAY
        
        # –î–µ—Ñ–æ–ª—Ç–Ω—ã–π –≤—ã–±–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
        scenario_weights = {
            ScenarioType.ROMANTIC_EVENING: 0.3,
            ScenarioType.ADVENTURE_DAY: 0.25,
            ScenarioType.DISCOVERY_JOURNEY: 0.2,
            ScenarioType.COMFORT_ZONE: 0.15,
            ScenarioType.CULTURAL_IMMERSION: 0.1
        }
        
        return random.choices(
            list(scenario_weights.keys()),
            weights=list(scenario_weights.values())
        )[0]
    
    def _get_scenario_candidates(self, pair_id: str, scenario_type: ScenarioType, 
                               budget_range: Tuple[int, int]) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è"""
        template = self.scenario_templates[scenario_type]
        preferred_categories = template['preferred_categories']
        
        all_candidates = []
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –æ—Ç multi-objective ranker
        if hasattr(self.ranker, '_get_candidates_for_pair'):
            base_candidates = self.ranker._get_candidates_for_pair(pair_id, max_candidates=50)
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            filtered_candidates = [
                c for c in base_candidates 
                if c.get('category') in preferred_categories
            ]
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –±—é–¥–∂–µ—Ç—É
            budget_filtered = [
                c for c in filtered_candidates
                if budget_range[0] <= c.get('price', 1000) <= budget_range[1]
            ]
            
            all_candidates.extend(budget_filtered)
        
        # –ï—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º –∏–∑ –±–∞–∑–æ–≤–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞
        if len(all_candidates) < 10:
            additional_candidates = self._get_fallback_candidates(
                preferred_categories, budget_range
            )
            all_candidates.extend(additional_candidates)
        
        return all_candidates[:30]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    
    def _get_fallback_candidates(self, categories: List[str], 
                               budget_range: Tuple[int, int]) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞"""
        from enhanced_synthetic_generator import EnhancedSyntheticGenerator
        
        generator = EnhancedSyntheticGenerator()
        catalog = generator.enhanced_product_catalog
        
        filtered_catalog = [
            item for item in catalog
            if item['category'] in categories and 
               budget_range[0] <= item['price'] <= budget_range[1]
        ]
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
        candidates = []
        for item in filtered_catalog:
            candidate = {
                'item_id': item['title'],
                'title': item['title'],
                'category': item['category'],
                'price': item['price'],
                'tags': item['tags'],
                'love_language': item['love_language'],
                'novelty': item.get('novelty', 0.5),
                'content_score': 0.6,
                'cf_score': 0.5,
                'embedding_score': 0.5
            }
            candidates.append(candidate)
        
        return candidates
    
    def _compose_optimal_route(self, candidates: List[Dict], template: Dict, 
                             target_duration: int) -> List[Dict]:
        """–ö–æ–º–ø–æ–Ω—É–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –∏–∑ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤"""
        required_steps = template['required_steps']
        preferred_categories = template['preferred_categories']
        
        selected_places = []
        used_categories = set()
        remaining_duration = target_duration
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ —Ç–∏–ø–∞–º —à–∞–≥–æ–≤
        step_candidates = {
            StepType.START: [c for c in candidates if c['category'] in ['cafe', 'activity']],
            StepType.MAIN: [c for c in candidates if c['category'] in ['restaurant', 'entertainment']],
            StepType.FINALE: [c for c in candidates if c['category'] in ['restaurant', 'bar', 'entertainment']],
            StepType.TRANSITION: [c for c in candidates if c['category'] in ['cafe']],
            StepType.OPTIONAL: candidates
        }
        
        # –í—ã–±–∏—Ä–∞–µ–º –º–µ—Å—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç—Ä–µ–±—É–µ–º–æ–≥–æ —à–∞–≥–∞
        for step_type in required_steps:
            suitable_candidates = step_candidates.get(step_type, candidates)
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
            if len(selected_places) > 0:
                diverse_candidates = [
                    c for c in suitable_candidates 
                    if c['category'] not in used_categories
                ]
                if diverse_candidates:
                    suitable_candidates = diverse_candidates
            
            # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
            if suitable_candidates:
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
                sorted_candidates = sorted(
                    suitable_candidates,
                    key=lambda x: (
                        x.get('relevance_score', 0) * 0.4 +
                        x.get('novelty_score', 0) * 0.3 +
                        x.get('content_score', 0) * 0.3
                    ),
                    reverse=True
                )
                
                selected = sorted_candidates[0]
                selected['step_type'] = step_type
                selected_places.append(selected)
                used_categories.add(selected['category'])
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à—É—é—Å—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                estimated_duration = self._estimate_activity_duration(selected['category'])
                remaining_duration -= estimated_duration
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —à–∞–≥–∏ –µ—Å–ª–∏ –µ—Å—Ç—å –≤—Ä–µ–º—è
        if remaining_duration > 60:  # –ë–æ–ª—å—à–µ —á–∞—Å–∞
            optional_candidates = [
                c for c in candidates 
                if c['category'] not in used_categories and
                c not in selected_places
            ]
            
            if optional_candidates:
                optional = random.choice(optional_candidates)
                optional['step_type'] = StepType.OPTIONAL
                # –í—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥ —Ñ–∏–Ω–∞–ª–æ–º
                selected_places.insert(-1, optional)
        
        return selected_places
    
    def _estimate_activity_duration(self, category: str) -> int:
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        duration_estimates = {
            'cafe': 60,           # 1 —á–∞—Å
            'restaurant': 90,     # 1.5 —á–∞—Å–∞
            'entertainment': 120, # 2 —á–∞—Å–∞
            'activity': 150,      # 2.5 —á–∞—Å–∞
            'bar': 90,           # 1.5 —á–∞—Å–∞
            'gift': 30           # 30 –º–∏–Ω—É—Ç
        }
        return duration_estimates.get(category, 90)
    
    def _create_detailed_steps(self, selected_places: List[Dict], 
                             scenario_type: ScenarioType,
                             context: Optional[CompleteContext]) -> List[ScenarioStep]:
        """–°–æ–∑–¥–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–µ —à–∞–≥–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è"""
        steps = []
        current_time = datetime.now().replace(hour=12, minute=0)  # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–æ–ª—É–¥–Ω—è
        
        for i, place in enumerate(selected_places):
            step_type = StepType(place.get('step_type', StepType.MAIN))
            
            # –û—Ü–µ–Ω–∏–≤–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            duration = self._estimate_activity_duration(place['category'])
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —ç—Ç–æ–≥–æ —à–∞–≥–∞
            timing_suggestion = current_time.strftime("%H:%M")
            current_time += timedelta(minutes=duration + 30)  # +30 –º–∏–Ω –Ω–∞ –ø–µ—Ä–µ—Ö–æ–¥
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —à–∞–≥–∞
            description = self._generate_step_description(place, step_type, i == 0, i == len(selected_places) - 1)
            
            # –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—Ç–∞
            transportation, walking_time = self._determine_transportation(i, len(selected_places))
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã
            tips = self._generate_practical_tips(place, step_type, context)
            
            # –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞
            why_this_step = self._generate_step_reasoning(place, step_type, scenario_type)
            
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
            alternatives = self._generate_alternatives(place)
            
            step = ScenarioStep(
                step_id=str(uuid.uuid4()),
                step_type=step_type,
                place_title=place['title'],
                place_category=place['category'],
                estimated_duration=duration,
                estimated_cost=place['price'],
                description=description,
                timing_suggestion=timing_suggestion,
                transportation=transportation,
                walking_time=walking_time,
                booking_required=place['category'] in ['restaurant', 'entertainment'],
                dress_code=self._determine_dress_code(place['category'], scenario_type),
                weather_dependent=place['category'] in ['activity'] and 'outdoor' in place.get('tags', []),
                tips=tips,
                why_this_step=why_this_step,
                alternative_options=alternatives
            )
            
            steps.append(step)
        
        return steps
    
    def _generate_step_description(self, place: Dict, step_type: StepType, 
                                 is_first: bool, is_last: bool) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —à–∞–≥–∞"""
        base_descriptions = {
            StepType.START: [
                f"–ù–∞—á–Ω–∏—Ç–µ –≤–∞—à –¥–µ–Ω—å –≤ {place['title']} ‚Äî –∏–¥–µ–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞ –æ—Å–æ–±–µ–Ω–Ω—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É.",
                f"–û—Ç–ø—Ä–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤–∞—à–µ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è ‚Äî {place['title']}, –≥–¥–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –º–∞–≥–∏—è.",
                f"–ü–µ—Ä–≤—ã–π —à–∞–≥ –∫ –Ω–µ–∑–∞–±—ã–≤–∞–µ–º–æ–º—É –¥–Ω—é: {place['title']} –≤—Å—Ç—Ä–µ—Ç–∏—Ç –≤–∞—Å —Ç–µ–ø–ª–æ–π –∞—Ç–º–æ—Å—Ñ–µ—Ä–æ–π."
            ],
            StepType.MAIN: [
                f"–ì–ª–∞–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–Ω—è ‚Äî {place['title']}. –ó–¥–µ—Å—å –≤–∞—Å –∂–¥—É—Ç —Å–∞–º—ã–µ —è—Ä–∫–∏–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è.",
                f"–°–µ—Ä–¥—Ü–µ –≤–∞—à–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ ‚Äî {place['title']}, –º–µ—Å—Ç–æ –≥–¥–µ —Å–æ–∑–¥–∞—é—Ç—Å—è –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è.",
                f"–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã: {place['title']} –ø–æ–¥–∞—Ä–∏—Ç –≤–∞–º –æ—Å–æ–±–µ–Ω–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã."
            ],
            StepType.FINALE: [
                f"–ó–∞–≤–µ—Ä—à–∏—Ç–µ –¥–µ–Ω—å –≤ {place['title']} ‚Äî –∏–¥–µ–∞–ª—å–Ω—ã–π —Ñ–∏–Ω–∞–ª –¥–ª—è –≤–∞—à–µ–≥–æ —Å–≤–∏–¥–∞–Ω–∏—è.",
                f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –∞–∫–∫–æ—Ä–¥ –¥–Ω—è –≤ {place['title']}, —á—Ç–æ–±—ã –∑–∞–∫—Ä–µ–ø–∏—Ç—å –≤—Å–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è.",
                f"–ö—Ä–∞—Å–∏–≤–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤ {place['title']} ‚Äî –ø—É—Å—Ç—å –¥–µ–Ω—å –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è –Ω–∞ –≤—ã—Å–æ–∫–æ–π –Ω–æ—Ç–µ."
            ],
            StepType.TRANSITION: [
                f"–ü–µ—Ä–µ–∑–∞—Ä—è–¥–∏—Ç–µ—Å—å –≤ {place['title']} –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —ç—Ç–∞–ø–æ–º –≤–∞—à–µ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è.",
                f"–ü—Ä–∏—è—Ç–Ω–∞—è –ø–∞—É–∑–∞ –≤ {place['title']} ‚Äî –≤—Ä–µ–º—è –æ–±—Å—É–¥–∏—Ç—å –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—é.",
                f"–ü–µ—Ä–µ—Ö–æ–¥–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ {place['title']}, —á—Ç–æ–±—ã –Ω–∞—Å–ª–∞–¥–∏—Ç—å—Å—è –æ–±—â–µ—Å—Ç–≤–æ–º –¥—Ä—É–≥ –¥—Ä—É–≥–∞."
            ],
            StepType.OPTIONAL: [
                f"–ï—Å–ª–∏ –≤—Ä–µ–º—è –ø–æ–∑–≤–æ–ª–∏—Ç, –∑–∞–≥–ª—è–Ω–∏—Ç–µ –≤ {place['title']} ‚Äî –ø—Ä–∏—è—Ç–Ω–æ–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ.",
                f"–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤ {place['title']} –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –ª—é–±–∏—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –æ—Ç–∫—Ä—ã—Ç–∏—è.",
                f"–ü–æ –∂–µ–ª–∞–Ω–∏—é –ø–æ—Å–µ—Ç–∏—Ç–µ {place['title']} ‚Äî —ç—Ç–æ –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å —Å—é—Ä–ø—Ä–∏–∑–æ–º –¥–Ω—è."
            ]
        }
        
        descriptions = base_descriptions.get(step_type, base_descriptions[StepType.MAIN])
        base_description = random.choice(descriptions)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        tags = place.get('tags', [])
        if '–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π' in tags and step_type == StepType.FINALE:
            base_description += " –†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ —Å–æ–∑–¥–∞—Å—Ç –∏–¥–µ–∞–ª—å–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–Ω—è."
        elif '–£—é—Ç–Ω—ã–π' in tags:
            base_description += " –£—é—Ç–Ω–∞—è –æ–±—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–º–æ–∂–µ—Ç —Ä–∞—Å—Å–ª–∞–±–∏—Ç—å—Å—è –∏ –Ω–∞—Å–ª–∞–¥–∏—Ç—å—Å—è –æ–±—â–µ—Å—Ç–≤–æ–º –¥—Ä—É–≥ –¥—Ä—É–≥–∞."
        elif place['novelty'] > 0.7:
            base_description += " –ù–æ–≤–æ–µ –º–µ—Å—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–¥–∞—Ä–∏—Ç –≤–∞–º –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è."
        
        return base_description
    
    def _determine_transportation(self, step_index: int, total_steps: int) -> Tuple[str, int]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–ø–æ—Å–æ–± —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –∏ –≤—Ä–µ–º—è –≤ –ø—É—Ç–∏"""
        if step_index == total_steps - 1:  # –ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥
            return "–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ", 0
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
        distance_km = random.uniform(0.5, 3.0)
        
        if distance_km <= 1.0:
            return "–ø–µ—à–∫–æ–º", int(distance_km * 12)  # 12 –º–∏–Ω –Ω–∞ –∫–º
        elif distance_km <= 2.0:
            return "–Ω–∞ —Ç–∞–∫—Å–∏", int(distance_km * 5 + 5)  # 5 –º–∏–Ω –Ω–∞ –∫–º + –æ–∂–∏–¥–∞–Ω–∏–µ
        else:
            return "–Ω–∞ –º–µ—Ç—Ä–æ", int(distance_km * 4 + 10)  # 4 –º–∏–Ω –Ω–∞ –∫–º + –ø–µ—Ä–µ—Ö–æ–¥—ã
    
    def _generate_practical_tips(self, place: Dict, step_type: StepType, 
                               context: Optional[CompleteContext]) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã –¥–ª—è —à–∞–≥–∞"""
        tips = []
        
        # –û–±—â–∏–µ —Å–æ–≤–µ—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        category_tips = {
            'restaurant': [
                "–ó–∞–±—Ä–æ–Ω–∏—Ä—É–π—Ç–µ —Å—Ç–æ–ª–∏–∫ –∑–∞—Ä–∞–Ω–µ–µ, –æ—Å–æ–±–µ–Ω–Ω–æ –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ",
                "–£—Ç–æ—á–Ω–∏—Ç–µ –Ω–∞–ª–∏—á–∏–µ –≤–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∏—Ö –±–ª—é–¥ –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ"
            ],
            'entertainment': [
                "–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞ 15-20 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞",
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è"
            ],
            'activity': [
                "–û–¥–µ–≤–∞–π—Ç–µ—Å—å —É–¥–æ–±–Ω–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π",
                "–í–æ–∑—å–º–∏—Ç–µ —Å —Å–æ–±–æ–π –≤–æ–¥—É"
            ],
            'cafe': [
                "–õ—É—á—à–µ–µ –≤—Ä–µ–º—è ‚Äî –∫–æ–≥–¥–∞ –º–µ–Ω—å—à–µ –Ω–∞—Ä–æ–¥—É",
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ñ–∏—Ä–º–µ–Ω–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏ –∑–∞–≤–µ–¥–µ–Ω–∏—è"
            ]
        }
        
        category = place['category']
        if category in category_tips:
            tips.extend(random.sample(category_tips[category], 1))
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
        if context:
            if context.weather.condition == 'rainy':
                tips.append("–í–æ–∑—å–º–∏—Ç–µ –∑–æ–Ω—Ç ‚Äî –Ω–∞ —É–ª–∏—Ü–µ –¥–æ–∂–¥—å")
            elif context.weather.temperature < 5:
                tips.append("–û–¥–µ–≤–∞–π—Ç–µ—Å—å —Ç–µ–ø–ª–æ ‚Äî –Ω–∞ —É–ª–∏—Ü–µ —Ö–æ–ª–æ–¥–Ω–æ")
            
            if context.temporal.is_weekend:
                tips.append("–í—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å ‚Äî –º–æ–∂–µ—Ç –±—ã—Ç—å –º–Ω–æ–≥–æ–ª—é–¥–Ω–æ")
        
        # –°–æ–≤–µ—Ç—ã –ø–æ —Ü–µ–Ω–∞–º
        if place['price'] > 2500:
            tips.append("–ü—Ä–µ–º–∏—É–º —É—Ä–æ–≤–µ–Ω—å ‚Äî —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –¥—Ä–µ—Å—Å-–∫–æ–¥")
        
        return tips[:3]  # –ú–∞–∫—Å–∏–º—É–º 3 —Å–æ–≤–µ—Ç–∞
    
    def _generate_step_reasoning(self, place: Dict, step_type: StepType, 
                               scenario_type: ScenarioType) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —ç—Ç–æ–≥–æ —à–∞–≥–∞"""
        reasoning_templates = {
            StepType.START: [
                "–ò–¥–µ–∞–ª—å–Ω–æ–µ –Ω–∞—á–∞–ª–æ ‚Äî —Å–æ–∑–¥–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å –ø–µ—Ä–≤—ã—Ö –º–∏–Ω—É—Ç",
                "–ú—è–≥–∫–∏–π —Å—Ç–∞—Ä—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ä–∞—Å—Å–ª–∞–±–∏—Ç—å—Å—è –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å—Å—è –Ω–∞ –¥–µ–Ω—å",
                "–ù–∞—á–∏–Ω–∞–µ–º —Å –º–µ—Å—Ç–∞, –∫–æ—Ç–æ—Ä–æ–µ —Å–æ–∑–¥–∞—Å—Ç –∫–æ–º—Ñ–æ—Ä—Ç–Ω—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É"
            ],
            StepType.MAIN: [
                "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–Ω—è ‚Äî –∏–º–µ–Ω–Ω–æ –∑–¥–µ—Å—å —Å–æ–∑–¥–∞—é—Ç—Å—è –≥–ª–∞–≤–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è",
                "–û—Å–Ω–æ–≤–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –∫–æ—Ç–æ—Ä–∞—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—à–∏–º –∏–Ω—Ç–µ—Ä–µ—Å–∞–º",
                "–ö—É–ª—å–º–∏–Ω–∞—Ü–∏—è –¥–Ω—è ‚Äî –º–µ—Å—Ç–æ, –≥–¥–µ –≤—ã –ø—Ä–æ–≤–µ–¥–µ—Ç–µ —Å–∞–º–æ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è"
            ],
            StepType.FINALE: [
                "–õ–æ–≥–∏—á–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ ‚Äî —Å–æ–∑–¥–∞–µ—Ç –ø—Ä–∏—è—Ç–Ω–æ–µ –ø–æ—Å–ª–µ–≤–∫—É—Å–∏–µ –æ—Ç –¥–Ω—è",
                "–§–∏–Ω–∞–ª—å–Ω—ã–π –∞–∫–∫–æ—Ä–¥, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–∫—Ä–µ–ø–∏—Ç –≤—Å–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —ç–º–æ—Ü–∏–∏",
                "–ò–¥–µ–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –ø–æ–¥–≤–µ–¥–µ–Ω–∏—è –∏—Ç–æ–≥–æ–≤ –¥–Ω—è"
            ]
        }
        
        base_reasons = reasoning_templates.get(step_type, reasoning_templates[StepType.MAIN])
        base_reason = random.choice(base_reasons)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—é
        if place.get('relevance_score', 0) > 0.8:
            base_reason += " –í—ã—Å–æ–∫–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤–∞—à–∏–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º."
        elif place.get('novelty_score', 0) > 0.7:
            base_reason += " –ù–æ–≤–æ–µ –º–µ—Å—Ç–æ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–æ–≤."
        elif place.get('empathy_score', 0) > 0.7:
            base_reason += " –£—á–∏—Ç—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å—ã –æ–±–æ–∏—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤."
        
        return base_reason
    
    def _generate_alternatives(self, place: Dict) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –Ω–∞ —Å–ª—É—á–∞–π –ø—Ä–æ–±–ª–µ–º"""
        alternatives = []
        
        category = place['category']
        
        if category == 'restaurant':
            alternatives = [
                "–ï—Å–ª–∏ –Ω–µ—Ç –º–µ—Å—Ç ‚Äî –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ—Å–µ–¥–Ω–µ–µ –∫–∞—Ñ–µ",
                "–í —Å–ª—É—á–∞–µ –¥–æ–ª–≥–æ–≥–æ –æ–∂–∏–¥–∞–Ω–∏—è ‚Äî –∑–∞–∫–∞–∂–∏—Ç–µ –±–ª—é–¥–∞ –Ω–∞ –≤—ã–Ω–æ—Å",
                "–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ ‚Äî food court –≤ –±–ª–∏–∂–∞–π—à–µ–º —Ç–æ—Ä–≥–æ–≤–æ–º —Ü–µ–Ω—Ç—Ä–µ"
            ]
        elif category == 'entertainment':
            alternatives = [
                "–ï—Å–ª–∏ –±–∏–ª–µ—Ç–æ–≤ –Ω–µ—Ç ‚Äî –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —á—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –≤ —Å–æ—Å–µ–¥–Ω–∏—Ö –∑–∞–ª–∞—Ö",
                "–ü–ª–∞–Ω –ë ‚Äî –ø—Ä–æ–≥—É–ª–∫–∞ –ø–æ —Ç–æ—Ä–≥–æ–≤–æ–º—É —Ü–µ–Ω—Ç—Ä—É —Å —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è–º–∏",
                "–ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç ‚Äî –∫–∞—Ñ–µ —Å –Ω–∞—Å—Ç–æ–ª—å–Ω—ã–º–∏ –∏–≥—Ä–∞–º–∏"
            ]
        elif category == 'activity':
            alternatives = [
                "–ü—Ä–∏ –ø–ª–æ—Ö–æ–π –ø–æ–≥–æ–¥–µ ‚Äî –∫—Ä—ã—Ç—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏",
                "–ï—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å ‚Äî –∑–∞–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–≥—É–ª—è–π—Ç–µ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏",
                "–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ ‚Äî —Å–ø–æ–Ω—Ç–∞–Ω–Ω–∞—è –ø—Ä–æ–≥—É–ª–∫–∞ –ø–æ —Ä–∞–π–æ–Ω—É"
            ]
        
        return alternatives[:2]  # –ú–∞–∫—Å–∏–º—É–º 2 –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
    
    def _determine_dress_code(self, category: str, scenario_type: ScenarioType) -> Optional[str]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥—Ä–µ—Å—Å-–∫–æ–¥ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        dress_codes = {
            'restaurant': {
                ScenarioType.ROMANTIC_EVENING: "–≠–ª–µ–≥–∞–Ω—Ç–Ω—ã–π —Å—Ç–∏–ª—å",
                ScenarioType.CELEBRATION: "–¢–æ—Ä–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–∞—Ä—è–¥",
                'default': "–£–º–Ω—ã–π –∫—ç–∂—É–∞–ª"
            },
            'entertainment': {
                ScenarioType.CULTURAL_IMMERSION: "–û–ø—Ä—è—Ç–Ω—ã–π –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥",
                'default': "–ö–æ–º—Ñ–æ—Ä—Ç–Ω–∞—è –æ–¥–µ–∂–¥–∞"
            },
            'activity': "–°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è –æ–¥–µ–∂–¥–∞",
            'bar': "–°—Ç–∏–ª—å–Ω—ã–π casual"
        }
        
        if category in dress_codes:
            if isinstance(dress_codes[category], dict):
                return dress_codes[category].get(scenario_type, dress_codes[category]['default'])
            else:
                return dress_codes[category]
        
        return None
    
    def _generate_scenario_metadata(self, pair_id: str, scenario_type: ScenarioType, 
                                  steps: List[ScenarioStep], template: Dict,
                                  context: Optional[CompleteContext]) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏—è"""
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª—É—á—à–µ–µ –≤—Ä–µ–º—è –¥–Ω—è
        step_categories = [step.place_category for step in steps]
        if 'bar' in step_categories or any('–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π' in str(step.tips) for step in steps):
            best_time = "evening"
        elif 'activity' in step_categories:
            best_time = "afternoon"
        else:
            best_time = "flexible"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª—É—á—à—É—é –ø–æ–≥–æ–¥—É
        best_weather = ["sunny", "cloudy"]
        if any(step.weather_dependent for step in steps):
            best_weather = ["sunny"]
        
        # –°–ª–æ–∂–Ω–æ—Å—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        booking_required_count = sum(1 for step in steps if step.booking_required)
        difficulty = min(5, 1 + booking_required_count)
        
        # –£—Ä–æ–≤–Ω–∏ —Ä–æ–º–∞–Ω—Ç–∏–∫–∏ –∏ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π
        romance_level = template.get('romance_level', 3)
        adventure_level = template.get('adventure_level', 3)
        
        # –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏ (—Å–∏–º—É–ª—è—Ü–∏—è)
        personality_match = random.uniform(0.7, 0.95)
        
        # –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
        context_match = 0.8
        if context:
            if context.context_score > 0.7:
                context_match = 0.9
            elif context.context_score < 0.4:
                context_match = 0.6
        
        # –°–æ–≤–µ—Ç—ã –ø–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ
        preparation_tips = [
            "–ó–∞—Ä—è–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏",
            "–í–æ–∑—å–º–∏—Ç–µ —Å —Å–æ–±–æ–π –Ω–µ–º–Ω–æ–≥–æ –Ω–∞–ª–∏—á–Ω—ã—Ö –Ω–∞ —Å–ª—É—á–∞–π",
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–≥–æ–¥—É –Ω–∞–∫–∞–Ω—É–Ω–µ"
        ]
        
        if any(step.booking_required for step in steps):
            preparation_tips.insert(0, "–ó–∞–±—Ä–æ–Ω–∏—Ä—É–π—Ç–µ —Å—Ç–æ–ª–∏–∫–∏/–±–∏–ª–µ—Ç—ã –∑–∞—Ä–∞–Ω–µ–µ")
        
        # –ü–ª–∞–Ω—ã –ë
        contingency_plans = [
            "–ü—Ä–∏ –ø–ª–æ—Ö–æ–π –ø–æ–≥–æ–¥–µ ‚Äî –∑–∞–º–µ–Ω–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ –∫—Ä—ã—Ç—ã–µ",
            "–ï—Å–ª–∏ –º–µ—Å—Ç–æ –∑–∞–∫—Ä—ã—Ç–æ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –∏–∑ –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞",
            "–ü—Ä–∏ –Ω–µ—Ö–≤–∞—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–∏ ‚Äî –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —à–∞–≥–∏"
        ]
        
        # –¢—Ä–∏–≥–≥–µ—Ä—ã –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π
        memory_triggers = [
            "–°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –Ω–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–Ω—è",
            "–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —á–µ–∫–∏ –∫–∞–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –º–µ—Å—Ç–∞—Ö",
            "–ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ –∑–∞–±–∞–≤–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –≤ –∑–∞–º–µ—Ç–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
            "–°–æ–±–µ—Ä–∏—Ç–µ –Ω–µ–±–æ–ª—å—à–∏–µ —Å—É–≤–µ–Ω–∏—Ä—ã (–±–∏–ª–µ—Ç—ã, —Å–∞–ª—Ñ–µ—Ç–∫–∏ —Å –ª–æ–≥–æ—Ç–∏–ø–∞–º–∏)"
        ]
        
        return {
            'best_time_of_day': best_time,
            'best_weather': best_weather,
            'difficulty_level': difficulty,
            'romance_level': romance_level,
            'adventure_level': adventure_level,
            'personality_match_score': personality_match,
            'context_match_score': context_match,
            'preparation_tips': preparation_tips[:3],
            'contingency_plans': contingency_plans,
            'memory_triggers': memory_triggers[:3]
        }
    
    def create_scenario_variants(self, pair_id: str, base_scenario_type: ScenarioType,
                               context: Optional[CompleteContext] = None) -> List[MultiStepScenario]:
        """
        –°–æ–∑–¥–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
        
        Args:
            pair_id: ID –ø–∞—Ä—ã
            base_scenario_type: –ë–∞–∑–æ–≤—ã–π —Ç–∏–ø —Å—Ü–µ–Ω–∞—Ä–∏—è
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∏–∑ 3 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
        """
        variants = []
        
        # –í–∞—Ä–∏–∞–Ω—Ç 1: –ë–∞–∑–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
        scenario1 = self.generate_scenario(pair_id, base_scenario_type, context)
        variants.append(scenario1)
        
        # –í–∞—Ä–∏–∞–Ω—Ç 2: –ë–æ–ª–µ–µ –±—é–¥–∂–µ—Ç–Ω—ã–π
        scenario2 = self.generate_scenario(
            pair_id, base_scenario_type, context, 
            budget_range=(500, 2000), duration_hours=3
        )
        scenario2.title = "üí∞ " + scenario2.title + " (–≠–∫–æ–Ω–æ–º –≤–µ—Ä—Å–∏—è)"
        variants.append(scenario2)
        
        # –í–∞—Ä–∏–∞–Ω—Ç 3: –ë–æ–ª–µ–µ –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã–π
        scenario3 = self.generate_scenario(
            pair_id, base_scenario_type, context,
            budget_range=(2000, 6000), duration_hours=5
        )
        scenario3.title = "üëë " + scenario3.title + " (–ü—Ä–µ–º–∏—É–º –≤–µ—Ä—Å–∏—è)"
        variants.append(scenario3)
        
        return variants
    
    def export_scenario_for_mobile(self, scenario: MultiStepScenario) -> Dict[str, Any]:
        """
        –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        
        Args:
            scenario: –°—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
            
        Returns:
            –î–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        """
        return {
            'scenario_id': scenario.scenario_id,
            'title': scenario.title,
            'subtitle': scenario.subtitle,
            'total_time': f"{scenario.total_duration // 60}—á {scenario.total_duration % 60}–º–∏–Ω",
            'budget_range': f"{scenario.total_cost_estimate[0]} - {scenario.total_cost_estimate[1]} ‚ÇΩ",
            'difficulty': scenario.difficulty_level,
            'romance_level': scenario.romance_level,
            'adventure_level': scenario.adventure_level,
            
            'steps': [
                {
                    'step_number': i + 1,
                    'title': step.place_title,
                    'category': step.place_category,
                    'time': step.timing_suggestion,
                    'duration': f"{step.estimated_duration}–º–∏–Ω",
                    'cost': f"{step.estimated_cost}‚ÇΩ",
                    'description': step.description,
                    'transport': step.transportation,
                    'walk_time': step.walking_time,
                    'tips': step.tips,
                    'booking_required': step.booking_required,
                    'dress_code': step.dress_code,
                    'alternatives': step.alternative_options
                }
                for i, step in enumerate(scenario.steps)
            ],
            
            'preparation': {
                'tips': scenario.preparation_tips,
                'contingency_plans': scenario.contingency_plans,
                'memory_tips': scenario.memory_triggers
            },
            
            'metadata': {
                'best_time': scenario.best_time_of_day,
                'best_weather': scenario.best_weather,
                'personality_match': round(scenario.personality_match_score * 100),
                'context_match': round(scenario.context_match_score * 100),
                'created_at': scenario.created_at.isoformat()
            }
        }

def main():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Multi-Step Scenarios Engine"""
    print("üó∫Ô∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Multi-Step Scenarios Engine - –§–∞–∑–∞ 3.2")
    print("üìã –ú–Ω–æ–≥–æ—à–∞–≥–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏: –æ—Ç –ø—Ä–æ—Å—Ç—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∫ –ø–ª–∞–Ω–∞–º —Å–≤–∏–¥–∞–Ω–∏–π")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–≤–∏–∂–æ–∫
    scenarios_engine = MultiStepScenariosEngine()
    
    # –¢–µ—Å—Ç–æ–≤–∞—è –ø–∞—Ä–∞
    test_pair_id = "pair_123"
    
    print(f"\nüéØ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –ø–∞—Ä—ã {test_pair_id}...")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    context_engine = ContextAwarenessEngine()
    context = context_engine.get_complete_context()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π
    scenario = scenarios_engine.generate_scenario(
        pair_id=test_pair_id,
        scenario_type=ScenarioType.ROMANTIC_EVENING,
        context=context,
        duration_hours=4
    )
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print(f"\nüìã –°—Ü–µ–Ω–∞—Ä–∏–π: {scenario.title}")
    print(f"   {scenario.subtitle}")
    print(f"   –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {scenario.total_duration // 60}—á {scenario.total_duration % 60}–º–∏–Ω")
    print(f"   –ë—é–¥–∂–µ—Ç: {scenario.total_cost_estimate[0]} - {scenario.total_cost_estimate[1]} ‚ÇΩ")
    print(f"   –†–æ–º–∞–Ω—Ç–∏–∫–∞: {'‚ù§Ô∏è' * scenario.romance_level}")
    print(f"   –°–ª–æ–∂–Ω–æ—Å—Ç—å: {'‚≠ê' * scenario.difficulty_level}")
    
    print(f"\nüìç –ú–∞—Ä—à—Ä—É—Ç ({len(scenario.steps)} —à–∞–≥–æ–≤):")
    for i, step in enumerate(scenario.steps, 1):
        print(f"  {i}. {step.timing_suggestion} - {step.place_title} ({step.estimated_duration}–º–∏–Ω)")
        print(f"     üí° {step.description}")
        print(f"     üéØ {step.why_this_step}")
        if step.tips:
            print(f"     üìù –°–æ–≤–µ—Ç: {step.tips[0]}")
        if i < len(scenario.steps):
            print(f"     üö∂ {step.transportation} ({step.walking_time}–º–∏–Ω)")
        print()
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
    print(f"üìã –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å—Ü–µ–Ω–∞—Ä–∏—é:")
    for tip in scenario.preparation_tips:
        print(f"  ‚Ä¢ {tip}")
    
    # –ü–ª–∞–Ω—ã –ë
    print(f"\nüõ°Ô∏è –ü–ª–∞–Ω—ã –Ω–∞ —Å–ª—É—á–∞–π –ø—Ä–æ–±–ª–µ–º:")
    for plan in scenario.contingency_plans:
        print(f"  ‚Ä¢ {plan}")
    
    # –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
    print(f"\nüé≤ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤...")
    variants = scenarios_engine.create_scenario_variants(
        test_pair_id, ScenarioType.ADVENTURE_DAY, context
    )
    
    print(f"–°–æ–∑–¥–∞–Ω–æ {len(variants)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:")
    for i, variant in enumerate(variants, 1):
        print(f"  {i}. {variant.title}")
        print(f"     {variant.total_duration // 60}—á, {variant.total_cost_estimate[0]}-{variant.total_cost_estimate[1]}‚ÇΩ")
    
    # –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ
    mobile_export = scenarios_engine.export_scenario_for_mobile(scenario)
    print(f"\nüì± –î–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≥–æ—Ç–æ–≤—ã")
    print(f"   –®–∞–≥–æ–≤: {len(mobile_export['steps'])}")
    print(f"   –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏: {mobile_export['metadata']['personality_match']}%")
    
    print(f"\nüó∫Ô∏è Multi-Step Scenarios Engine –≥–æ—Ç–æ–≤!")
    print(f"‚úÖ –§–∞–∑–∞ 3.2 (–ú–Ω–æ–≥–æ—à–∞–≥–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏) –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"üéØ –ü—Ä–æ–¥—É–∫—Ç —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω: —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å ‚Üí –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–≤–∏–¥–∞–Ω–∏–π")

if __name__ == "__main__":
    main()
