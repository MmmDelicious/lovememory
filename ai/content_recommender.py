#!/usr/bin/env python3
"""
Content-Based Recommendation System –¥–ª—è LoveMemory AI
–§–∞–∑–∞ 4: Baseline content-based —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

–§—É–Ω–∫—Ü–∏–∏:
- recommend_date(pair_id, top_k=10) - –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
- calculate_similarity_score - –ø–æ–¥—Å—á–µ—Ç —Å—Ö–æ–¥—Å—Ç–≤–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π
- haversine_distance - —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
- gaussian_smoothing - —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –¥–ª—è distance_score
"""

import json
import math
import random
from typing import Dict, List, Tuple, Optional
from datetime import datetime, timedelta
import pandas as pd
import numpy as np
from dataclasses import dataclass

@dataclass
class RecommendationResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
    item_id: str
    title: str
    category: str
    score: float
    reasons: List[str]
    price: float
    location: Optional[Tuple[float, float]] = None

class ContentBasedRecommender:
    """Content-based —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞"""
    
    def __init__(self, data_path: str = 'data/synthetic_v1'):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        self.data_path = data_path
        self.users = None
        self.pairs = None
        self.interactions = None
        self.product_catalog = None
        
        # –í–µ—Å–æ–≤—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ)
        self.weights = {
            'interest_overlap': 0.6,
            'distance_score': 0.2,
            'price_match': 0.2
        }
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è distance scoring
        self.distance_params = {
            'max_distance_km': 50,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            'gaussian_sigma': 10    # –ü–∞—Ä–∞–º–µ—Ç—Ä —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è –¥–ª—è –≥–∞—É—Å—Å–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        }
        
        self.load_data()
    
    def load_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ"""
        try:
            print("üìä –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º CSV —Ñ–∞–π–ª—ã
            self.users = pd.read_csv(f'{self.data_path}/users.csv')
            self.pairs = pd.read_csv(f'{self.data_path}/pairs.csv')
            self.interactions = pd.read_csv(f'{self.data_path}/interactions.csv')
            self.product_catalog = pd.read_csv(f'{self.data_path}/product_catalog.csv')
            
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:")
            print(f"  - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(self.users)}")
            print(f"  - –ü–∞—Ä: {len(self.pairs)}")
            print(f"  - –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π: {len(self.interactions)}")
            print(f"  - –¢–æ–≤–∞—Ä–æ–≤: {len(self.product_catalog)}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise
    
    def haversine_distance(self, lat1: float, lon1: float, lat2: float, lon2: float) -> float:
        """
        –í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ –Ω–∞ –ó–µ–º–ª–µ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö
        –∏—Å–ø–æ–ª—å–∑—É—è —Ñ–æ—Ä–º—É–ª—É Haversine
        """
        # –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö
        R = 6371.0
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≥—Ä–∞–¥—É—Å—ã –≤ —Ä–∞–¥–∏–∞–Ω—ã
        lat1_rad = math.radians(lat1)
        lon1_rad = math.radians(lon1)
        lat2_rad = math.radians(lat2)
        lon2_rad = math.radians(lon2)
        
        # –†–∞–∑–Ω–æ—Å—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        dlat = lat2_rad - lat1_rad
        dlon = lon2_rad - lon1_rad
        
        # –§–æ—Ä–º—É–ª–∞ Haversine
        a = (math.sin(dlat/2)**2 + 
             math.cos(lat1_rad) * math.cos(lat2_rad) * math.sin(dlon/2)**2)
        c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))
        
        return R * c
    
    def gaussian_smoothing(self, distance: float, sigma: float = None) -> float:
        """
        –ü—Ä–∏–º–µ–Ω—è–µ—Ç –≥–∞—É—Å—Å–æ–≤–æ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –∫ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 0 –¥–æ 1, –≥–¥–µ 1 - –±–ª–∏–∑–∫–æ, 0 - –¥–∞–ª–µ–∫–æ
        """
        if sigma is None:
            sigma = self.distance_params['gaussian_sigma']
        
        # –ì–∞—É—Å—Å–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏—è: exp(-(x^2)/(2*sigma^2))
        return math.exp(-(distance**2) / (2 * sigma**2))
    
    def calculate_interest_overlap(self, user1_interests: Dict, user2_interests: Dict, 
                                 product_tags: List[str]) -> float:
        """
        –í—ã—á–∏—Å–ª—è–µ—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –ø–∞—Ä—ã —Å —Ç–µ–≥–∞–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
        """
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏–Ω—Ç–µ—Ä–µ—Å—ã –ø–∞—Ä—ã
        pair_interests = set()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–µ—Å—ã –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for interest, intensity in user1_interests.items():
            if intensity >= 5:  # –¢–æ–ª—å–∫–æ –∑–Ω–∞—á–∏–º—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã
                pair_interests.add(interest.lower())
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–µ—Å—ã –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for interest, intensity in user2_interests.items():
            if intensity >= 5:  # –¢–æ–ª—å–∫–æ –∑–Ω–∞—á–∏–º—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã
                pair_interests.add(interest.lower())
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å —Ç–µ–≥–∞–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
        product_tags_lower = [tag.lower() for tag in product_tags]
        overlap = len(pair_interests.intersection(set(product_tags_lower)))
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç–µ–≥–æ–≤ –ø—Ä–æ–¥—É–∫—Ç–∞
        if len(product_tags) == 0:
            return 0.0
        
        return min(1.0, overlap / len(product_tags))
    
    def calculate_price_match(self, user1_budget: str, user2_budget: str, 
                            product_price: float) -> float:
        """
        –í—ã—á–∏—Å–ª—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ü–µ–Ω—ã –ø—Ä–æ–¥—É–∫—Ç–∞ –±—é–¥–∂–µ—Ç—É –ø–∞—Ä—ã
        """
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π –±—é–¥–∂–µ—Ç –ø–∞—Ä—ã
        budget_mapping = {
            'low': 1,
            'medium': 2,
            'high': 3
        }
        
        user1_budget_level = budget_mapping.get(user1_budget, 2)
        user2_budget_level = budget_mapping.get(user2_budget, 2)
        
        # –ë–µ—Ä–µ–º —Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –±—é–¥–∂–µ—Ç–∞
        avg_budget_level = (user1_budget_level + user2_budget_level) / 2
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω—ã —Ü–µ–Ω
        price_ranges = {
            1: (0, 1000),      # low budget
            2: (500, 5000),    # medium budget  
            3: (2000, 20000)   # high budget
        }
        
        min_price, max_price = price_ranges.get(int(avg_budget_level), (500, 5000))
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
        if min_price <= product_price <= max_price:
            return 1.0
        elif product_price < min_price:
            # –°–ª–∏—à–∫–æ–º –¥–µ—à–µ–≤–æ - –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ
            return 0.7
        else:
            # –°–ª–∏—à–∫–æ–º –¥–æ—Ä–æ–≥–æ
            distance_penalty = (product_price - max_price) / max_price
            return max(0.0, 1.0 - distance_penalty)
    
    def calculate_distance_score(self, user1_city: str, user2_city: str, 
                               product_lat: float, product_lon: float) -> float:
        """
        –í—ã—á–∏—Å–ª—è–µ—Ç score –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ –ø—Ä–æ–¥—É–∫—Ç–∞/–º–µ—Å—Ç–∞
        """
        # –ï—Å–ª–∏ —É –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π score
        if pd.isna(product_lat) or pd.isna(product_lon):
            return 0.5
        
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ú–æ—Å–∫–≤—ã –∫–∞–∫ —Ü–µ–Ω—Ç—Ä
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        moscow_lat, moscow_lon = 55.7558, 37.6176
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
        distance = self.haversine_distance(moscow_lat, moscow_lon, product_lat, product_lon)
        
        # –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0
        if distance > self.distance_params['max_distance_km']:
            return 0.0
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –≥–∞—É—Å—Å–æ–≤–æ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ
        return self.gaussian_smoothing(distance)
    
    def get_recent_interactions(self, pair_id: str, limit: int = 20) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–∞—Ä—ã –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø–∞—Ä–µ
            pair = self.pairs[self.pairs['id'] == pair_id].iloc[0]
            user1_id = pair['user1_id']
            user2_id = pair['user2_id']
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
            pair_interactions = self.interactions[
                (self.interactions['user_id'] == user1_id) | 
                (self.interactions['user_id'] == user2_id)
            ].sort_values('created_at', ascending=False).head(limit)
            
            return pair_interactions.to_dict('records')
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π: {e}")
            return []
    
    def calculate_personalization_boost(self, pair_id: str, product_id: str) -> float:
        """
        –í—ã—á–∏—Å–ª—è–µ—Ç boost –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
        """
        recent_interactions = self.get_recent_interactions(pair_id, 20)
        
        if not recent_interactions:
            return 1.0
        
        # –ò—â–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ—Ö–æ–∂–∏–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
        product = self.product_catalog[self.product_catalog['id'] == product_id]
        if product.empty:
            return 1.0
        
        product_category = product.iloc[0]['category']
        product_tags = eval(product.iloc[0]['tags']) if isinstance(product.iloc[0]['tags'], str) else []
        
        boost = 1.0
        
        for interaction in recent_interactions:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ —Ç–æ–π –∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if interaction.get('product_id'):
                interacted_product = self.product_catalog[
                    self.product_catalog['id'] == interaction['product_id']
                ]
                
                if not interacted_product.empty:
                    interacted_category = interacted_product.iloc[0]['category']
                    
                    if interacted_category == product_category:
                        # –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç boost
                        if interaction.get('rating', 0) >= 7:
                            boost += 0.1
                        # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —É–º–µ–Ω—å—à–∞–µ—Ç
                        elif interaction.get('rating', 0) <= 4:
                            boost -= 0.05
        
        return max(0.5, min(2.0, boost))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º boost –æ—Ç 0.5 –¥–æ 2.0
    
    def recommend_date(self, pair_id: str, top_k: int = 10, 
                      user_location: Optional[Tuple[float, float]] = None) -> List[RecommendationResult]:
        """
        –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –ø–∞—Ä—ã
        
        Args:
            pair_id: ID –ø–∞—Ä—ã
            top_k: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            user_location: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (lat, lon)
        
        Returns:
            –°–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Å scores –∏ –ø—Ä–∏—á–∏–Ω–∞–º–∏
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä–µ
            pair = self.pairs[self.pairs['id'] == pair_id]
            if pair.empty:
                raise ValueError(f"–ü–∞—Ä–∞ {pair_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
            pair = pair.iloc[0]
            user1_id = pair['user1_id']
            user2_id = pair['user2_id']
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            user1 = self.users[self.users['id'] == user1_id].iloc[0]
            user2 = self.users[self.users['id'] == user2_id].iloc[0]
            
            # –ü–∞—Ä—Å–∏–º –∏–Ω—Ç–µ—Ä–µ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            user1_interests = eval(user1['interests']) if isinstance(user1['interests'], str) else {}
            user2_interests = eval(user2['interests']) if isinstance(user2['interests'], str) else {}
            
            recommendations = []
            
            # –û—Ü–µ–Ω–∏–≤–∞–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–æ–¥—É–∫—Ç –≤ –∫–∞—Ç–∞–ª–æ–≥–µ
            for _, product in self.product_catalog.iterrows():
                # –ü–∞—Ä—Å–∏–º —Ç–µ–≥–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
                product_tags = eval(product['tags']) if isinstance(product['tags'], str) else []
                
                # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã score
                interest_score = self.calculate_interest_overlap(
                    user1_interests, user2_interests, product_tags
                )
                
                price_score = self.calculate_price_match(
                    user1['budget_preference'], user2['budget_preference'], 
                    product['price']
                )
                
                distance_score = self.calculate_distance_score(
                    user1['city'], user2['city'], 
                    product['latitude'], product['longitude']
                )
                
                # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π score
                total_score = (
                    self.weights['interest_overlap'] * interest_score +
                    self.weights['distance_score'] * distance_score +
                    self.weights['price_match'] * price_score
                )
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—é
                personalization_boost = self.calculate_personalization_boost(
                    pair_id, product['id']
                )
                
                final_score = total_score * personalization_boost
                
                # –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–∏—á–∏–Ω—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                reasons = []
                if interest_score > 0.3:
                    reasons.append(f"–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–∞–º –ø–∞—Ä—ã ({interest_score:.2f})")
                if price_score > 0.7:
                    reasons.append(f"–ü–æ–¥—Ö–æ–¥–∏—Ç –ø–æ –±—é–¥–∂–µ—Ç—É ({price_score:.2f})")
                if distance_score > 0.5:
                    reasons.append(f"–£–¥–æ–±–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ ({distance_score:.2f})")
                if personalization_boost > 1.1:
                    reasons.append(f"–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è (+{personalization_boost:.2f})")
                
                recommendations.append(RecommendationResult(
                    item_id=product['id'],
                    title=product['title'],
                    category=product['category'],
                    score=final_score,
                    reasons=reasons,
                    price=product['price'],
                    location=(product['latitude'], product['longitude']) if not pd.isna(product['latitude']) else None
                ))
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ score –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º top_k
            recommendations.sort(key=lambda x: x.score, reverse=True)
            
            return recommendations[:top_k]
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ recommend_date: {e}")
            return []
    
    def evaluate_baseline_metrics(self, test_pairs: List[str] = None, k: int = 10) -> Dict:
        """
        –í—ã—á–∏—Å–ª—è–µ—Ç baseline –º–µ—Ç—Ä–∏–∫–∏ –Ω–∞ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        
        –ú–µ—Ç—Ä–∏–∫–∏:
        - Precision@k: –¥–æ–ª—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤ top-k
        - Recall@k: –¥–æ–ª—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        - NDCG@k: Normalized Discounted Cumulative Gain
        """
        if test_pairs is None:
            # –ë–µ—Ä–µ–º —Å–ª—É—á–∞–π–Ω—É—é –≤—ã–±–æ—Ä–∫—É –ø–∞—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            test_pairs = self.pairs['id'].sample(min(100, len(self.pairs))).tolist()
        
        precision_scores = []
        recall_scores = []
        ndcg_scores = []
        
        for pair_id in test_pairs:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                recommendations = self.recommend_date(pair_id, top_k=k)
                
                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–∞—Ä—ã
                pair = self.pairs[self.pairs['id'] == pair_id].iloc[0]
                user1_id = pair['user1_id']
                user2_id = pair['user2_id']
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è (—Ä–µ–π—Ç–∏–Ω–≥ >= 7)
                positive_interactions = self.interactions[
                    ((self.interactions['user_id'] == user1_id) | 
                     (self.interactions['user_id'] == user2_id)) &
                    (self.interactions['rating'] >= 7)
                ]
                
                relevant_items = set(positive_interactions['product_id'].tolist())
                recommended_items = set([rec.item_id for rec in recommendations])
                
                # Precision@k
                if len(recommended_items) > 0:
                    precision = len(relevant_items.intersection(recommended_items)) / len(recommended_items)
                    precision_scores.append(precision)
                
                # Recall@k
                if len(relevant_items) > 0:
                    recall = len(relevant_items.intersection(recommended_items)) / len(relevant_items)
                    recall_scores.append(recall)
                
                # NDCG@k (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
                dcg = 0.0
                for i, rec in enumerate(recommendations):
                    if rec.item_id in relevant_items:
                        dcg += 1.0 / math.log2(i + 2)  # i+2 –ø–æ—Ç–æ–º—É —á—Ç–æ log2(1) = 0
                
                # IDCG (Ideal DCG) - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω—ã–π DCG
                idcg = sum(1.0 / math.log2(i + 2) for i in range(min(k, len(relevant_items))))
                
                if idcg > 0:
                    ndcg = dcg / idcg
                    ndcg_scores.append(ndcg)
                
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ –¥–ª—è –ø–∞—Ä—ã {pair_id}: {e}")
                continue
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏
        metrics = {
            'precision_at_k': np.mean(precision_scores) if precision_scores else 0.0,
            'recall_at_k': np.mean(recall_scores) if recall_scores else 0.0,
            'ndcg_at_k': np.mean(ndcg_scores) if ndcg_scores else 0.0,
            'num_test_pairs': len(test_pairs),
            'weights': self.weights
        }
        
        return metrics
    
    def save_model_metadata(self, metrics: Dict, model_path: str = 'models/content_v1'):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –≤ model_metadata
        """
        import os
        os.makedirs('models', exist_ok=True)
        
        metadata = {
            'model_id': 'content_v1',
            'type': 'content_based',
            'version': '1.0',
            'trained_on': {
                'num_users': len(self.users),
                'num_pairs': len(self.pairs),
                'num_interactions': len(self.interactions),
                'num_products': len(self.product_catalog)
            },
            'metrics': metrics,
            'parameters': {
                'weights': self.weights,
                'distance_params': self.distance_params
            },
            'created_at': datetime.now().isoformat()
        }
        
        with open(f'{model_path}_metadata.json', 'w', encoding='utf-8') as f:
            json.dump(metadata, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {model_path}_metadata.json")

def main():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    print("üöÄ –ó–∞–ø—É—Å–∫ Content-Based Recommendation System")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É
    recommender = ContentBasedRecommender()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ —Å–ª—É—á–∞–π–Ω–æ–π –ø–∞—Ä–µ
    test_pair_id = recommender.pairs['id'].iloc[0]
    print(f"\nüéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø–∞—Ä—ã: {test_pair_id}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    recommendations = recommender.recommend_date(test_pair_id, top_k=5)
    
    print(f"\nüìã –¢–æ–ø-5 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:")
    for i, rec in enumerate(recommendations, 1):
        print(f"{i}. {rec.title}")
        print(f"   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {rec.category}")
        print(f"   Score: {rec.score:.3f}")
        print(f"   –¶–µ–Ω–∞: {rec.price:.0f} —Ä—É–±.")
        print(f"   –ü—Ä–∏—á–∏–Ω—ã: {', '.join(rec.reasons)}")
        print()
    
    # –í—ã—á–∏—Å–ª—è–µ–º baseline –º–µ—Ç—Ä–∏–∫–∏
    print("üìä –í—ã—á–∏—Å–ª—è–µ–º baseline –º–µ—Ç—Ä–∏–∫–∏...")
    metrics = recommender.evaluate_baseline_metrics(k=10)
    
    print(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ü–µ–Ω–∫–∏:")
    print(f"  Precision@10: {metrics['precision_at_k']:.3f}")
    print(f"  Recall@10: {metrics['recall_at_k']:.3f}")
    print(f"  NDCG@10: {metrics['ndcg_at_k']:.3f}")
    print(f"  –¢–µ—Å—Ç–æ–≤—ã—Ö –ø–∞—Ä: {metrics['num_test_pairs']}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏
    recommender.save_model_metadata(metrics)
    
    print("\nüéâ Content-based —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞!")

if __name__ == "__main__":
    main()
