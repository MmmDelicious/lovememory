#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

def analyze_rating_distribution():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –¥–æ –∏ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
    
    print("üìä –ê–ù–ê–õ–ò–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô –í –î–ê–ù–ù–´–•")
    print("="*80)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    interactions = pd.read_csv('data/synthetic_v1/interactions.csv')
    users = pd.read_csv('data/synthetic_v1/users.csv')
    product_catalog = pd.read_csv('data/synthetic_v1/product_catalog.csv')
    
    print(f"üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"  - –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π: {len(interactions):,}")
    print(f"  - –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {len(product_catalog)}")
    print(f"  - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏
    rating_interactions = interactions[interactions['action'] == 'rating']
    
    print(f"\nüìä –ê–Ω–∞–ª–∏–∑ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤:")
    print(f"  - –†–µ–π—Ç–∏–Ω–≥–æ–≤—ã—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π: {len(rating_interactions):,}")
    print(f"  - –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {rating_interactions['rating'].mean():.3f}")
    print(f"  - –ú–µ–¥–∏–∞–Ω–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: {rating_interactions['rating'].median():.3f}")
    print(f"  - –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {rating_interactions['rating'].std():.3f}")
    print(f"  - –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: {rating_interactions['rating'].min():.3f}")
    print(f"  - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: {rating_interactions['rating'].max():.3f}")
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º
    print(f"\nüìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤:")
    bins = [1, 3, 5, 7, 10]
    labels = ['–û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π (1-3)', '–ù–∏–∑–∫–∏–π (3-5)', '–°—Ä–µ–¥–Ω–∏–π (5-7)', '–í—ã—Å–æ–∫–∏–π (7-10)']
    rating_interactions['rating_category'] = pd.cut(rating_interactions['rating'], bins=bins, labels=labels, include_lowest=True)
    
    distribution = rating_interactions['rating_category'].value_counts()
    for category, count in distribution.items():
        percentage = count / len(rating_interactions) * 100
        print(f"  - {category}: {count:,} ({percentage:.1f}%)")
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ –∞—Ä—Ö–µ—Ç–∏–ø–∞–º
    print(f"\nüé≠ –ê–Ω–∞–ª–∏–∑ –ø–æ –∞—Ä—Ö–µ—Ç–∏–ø–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    interactions_with_users = rating_interactions.merge(users, left_on='user_id', right_on='id', how='left')
    
    archetype_stats = interactions_with_users.groupby('archetype')['rating'].agg(['mean', 'std', 'count']).round(3)
    print(archetype_stats)
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Ç–æ–≤–∞—Ä–æ–≤
    print(f"\nüè™ –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Ç–æ–≤–∞—Ä–æ–≤:")
    
    interactions_with_products = rating_interactions.merge(product_catalog, left_on='product_id', right_on='id', how='left')
    category_stats = interactions_with_products.groupby('category')['rating'].agg(['mean', 'std', 'count']).round(3)
    print(category_stats)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
    print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö:")
    
    # 1. Variance –≤ —Ä–µ–π—Ç–∏–Ω–≥–∞—Ö (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ —á–µ–º —Ä–∞–Ω—å—à–µ)
    variance = rating_interactions['rating'].var()
    print(f"  - –î–∏—Å–ø–µ—Ä—Å–∏—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤: {variance:.3f}")
    
    # 2. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ "–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö" –æ—Ü–µ–Ω–æ–∫ (serendipity —ç—Ñ—Ñ–µ–∫—Ç)
    # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å–ª—É—á–∞–∏ –≥–¥–µ –≥—É—Ä–º–∞–Ω –ø–æ—Å—Ç–∞–≤–∏–ª –≤—ã—Å–æ–∫—É—é –æ—Ü–µ–Ω–∫—É –Ω–µ-–≥—É—Ä–º–µ—Ç—Å–∫–æ–º—É –º–µ—Å—Ç—É
    unexpected_ratings = 0
    
    for archetype in ['ArtLovers', 'Gamers', 'Gourmets', 'Fitness', 'Travelers', 'Adventurers']:
        archetype_users = users[users['archetype'] == archetype]['id'].values
        archetype_interactions = interactions_with_products[
            interactions_with_products['user_id'].isin(archetype_users)
        ]
        
        # –ò—â–µ–º –≤—ã—Å–æ–∫–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∏ –¥–ª—è "–Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏—Ö" –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        if archetype == 'Gourmets':
            non_food = archetype_interactions[~archetype_interactions['category'].isin(['restaurant', 'cafe'])]
            high_ratings = non_food[non_food['rating'] >= 8]
            unexpected_ratings += len(high_ratings)
        elif archetype == 'ArtLovers':
            non_culture = archetype_interactions[~archetype_interactions['category'].isin(['activity'])]
            high_ratings = non_culture[non_culture['rating'] >= 8]
            unexpected_ratings += len(high_ratings)
    
    total_high_ratings = len(rating_interactions[rating_interactions['rating'] >= 8])
    serendipity_rate = unexpected_ratings / max(total_high_ratings, 1) * 100
    
    print(f"  - '–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ' –≤—ã—Å–æ–∫–∏–µ –æ—Ü–µ–Ω–∫–∏: {unexpected_ratings}")
    print(f"  - Serendipity rate: {serendipity_rate:.1f}%")
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ)
    negative_ratings = len(rating_interactions[rating_interactions['rating'] <= 3])
    negative_rate = negative_ratings / len(rating_interactions) * 100
    print(f"  - –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–∏ (‚â§3): {negative_ratings} ({negative_rate:.1f}%)")
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º–æ–π (–æ–∂–∏–¥–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
    print(f"\nüìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–∏—Å—Ç–µ–º–æ–π:")
    print(f"  - –û–∂–∏–¥–∞–ª–∏: —Å—Ä–µ–¥–Ω–µ–µ ~6-7, –¥–∏—Å–ø–µ—Ä—Å–∏—è ~1-2")
    print(f"  - –ü–æ–ª—É—á–∏–ª–∏: —Å—Ä–µ–¥–Ω–µ–µ {rating_interactions['rating'].mean():.1f}, –¥–∏—Å–ø–µ—Ä—Å–∏—è {variance:.1f}")
    
    if variance > 2.0:
        print(f"  ‚úÖ –î–∏—Å–ø–µ—Ä—Å–∏—è —É–≤–µ–ª–∏—á–∏–ª–∞—Å—å - –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞–ª–∏ –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏")
    else:
        print(f"  ‚ö†Ô∏è –î–∏—Å–ø–µ—Ä—Å–∏—è –≤—Å–µ –µ—â–µ –Ω–∏–∑–∫–∞—è - –≤–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ —à—É–º–∞")
    
    if 4.0 <= rating_interactions['rating'].mean() <= 7.0:
        print(f"  ‚úÖ –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –≤ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ")
    else:
        print(f"  ‚ö†Ô∏è –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –≤–Ω–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
    
    if negative_rate >= 15:
        print(f"  ‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫")
    else:
        print(f"  ‚ö†Ô∏è –ú–∞–ª–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫ - —Å–∏—Å—Ç–µ–º–∞ –≤—Å–µ –µ—â–µ —Å–ª–∏—à–∫–æ–º '–ø–æ–∑–∏—Ç–∏–≤–Ω–∞—è'")
    
    return {
        'mean_rating': rating_interactions['rating'].mean(),
        'rating_variance': variance,
        'negative_rate': negative_rate,
        'serendipity_rate': serendipity_rate,
        'total_interactions': len(interactions),
        'rating_interactions': len(rating_interactions)
    }

def simulate_collaborative_filtering_impact(stats):
    """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ CF –º–µ—Ç—Ä–∏–∫–∏"""
    
    print(f"\nü§ñ –ü–†–û–ì–ù–û–ó –í–õ–ò–Ø–ù–ò–Ø –ù–ê COLLABORATIVE FILTERING:")
    print("="*80)
    
    # –ü—Ä–µ–¥—ã–¥—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
    old_ndcg = 0.915
    old_rmse = 2.470
    
    # –ù–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ (–∏–∑ –Ω–∞—à–µ–≥–æ —Ç–µ—Å—Ç–∞)
    new_ndcg = 0.916  # –§–∞–∫—Ç–∏—á–µ—Å–∫–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ
    new_rmse = 5.124  # –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –≤—ã—Ä–æ—Å
    
    print(f"üìä –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –º–µ—Ç—Ä–∏–∫–∞—Ö CF:")
    print(f"  - NDCG@10: {old_ndcg:.3f} ‚Üí {new_ndcg:.3f} (–∏–∑–º–µ–Ω–µ–Ω–∏–µ: {((new_ndcg/old_ndcg - 1)*100):+.1f}%)")
    print(f"  - RMSE: {old_rmse:.3f} ‚Üí {new_rmse:.3f} (–∏–∑–º–µ–Ω–µ–Ω–∏–µ: {((new_rmse/old_rmse - 1)*100):+.1f}%)")
    
    print(f"\nüîç –ê–Ω–∞–ª–∏–∑:")
    print(f"  ‚úÖ RMSE –≤—ã—Ä–æ—Å –≤ 2+ —Ä–∞–∑–∞ - –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞–ª–∏ —Å–ª–æ–∂–Ω–µ–µ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")
    print(f"  ‚ö†Ô∏è NDCG –æ—Å—Ç–∞–ª—Å—è –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–µ–∏–∑–º–µ–Ω–Ω—ã–º - –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤—Å–µ –µ—â–µ —Å–ª–∏—à–∫–æ–º —á–µ—Ç–∫–∏–µ")
    
    print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è:")
    print(f"  1. –£–≤–µ–ª–∏—á–∏—Ç—å —Ñ–∞–∫—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–≥–æ '–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è' —Å ¬±1.8 –¥–æ ¬±2.5")
    print(f"  2. –ü–æ–¥–Ω—è—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å '–ø–ª–æ—Ö–æ–≥–æ –¥–Ω—è' —Å 5% –¥–æ 10%")
    print(f"  3. –î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ cross-category –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π")
    print(f"  4. –£–≤–µ–ª–∏—á–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –¥–æ 200+ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –±–æ–ª—å—à–µ–π —Ä–∞–∑—Ä–µ–∂–µ–Ω–Ω–æ—Å—Ç–∏")
    
    # –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    expected_ndcg_improvement = "0.4-0.6"
    print(f"\nüéØ –û–∂–∏–¥–∞–µ–º—ã–π NDCG –ø–æ—Å–ª–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π: {expected_ndcg_improvement}")

def main():
    """–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞"""
    try:
        stats = analyze_rating_distribution()
        simulate_collaborative_filtering_impact(stats)
        
        print(f"\nüéâ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
        print("="*80)
        print(f"‚úÖ –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ –≤–Ω–µ–¥—Ä–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        print(f"‚úÖ –ö–∞—Ç–∞–ª–æ–≥ —Ä–∞—Å—à–∏—Ä–µ–Ω —Å 12 –¥–æ 75+ —Ç–æ–≤–∞—Ä–æ–≤")  
        print(f"‚úÖ RMSE —Å—Ç–∞–ª –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º (2.47 ‚Üí 5.12)")
        print(f"‚ö†Ô∏è NDCG –≤—Å–µ –µ—â–µ —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫ (0.915 ‚Üí 0.916)")
        print(f"üìà –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è NDCG –¥–æ 0.4-0.6")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        print(f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö –≤ data/synthetic_v1/")

if __name__ == "__main__":
    main()
